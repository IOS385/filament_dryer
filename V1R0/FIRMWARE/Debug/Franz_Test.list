
Franz_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007670  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08007730  08007730  00008730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007884  08007884  00009084  2**0
                  CONTENTS
  4 .ARM          00000000  08007884  08007884  00009084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007884  08007884  00009084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007884  08007884  00008884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007888  08007888  00008888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800788c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000084  08007910  00009084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08007910  00009368  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c30e  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f68  00000000  00000000  000153ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00017328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a2a  00000000  00000000  00018050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014376  00000000  00000000  00018a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e93e  00000000  00000000  0002cdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082eb2  00000000  00000000  0003b72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be5e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035e4  00000000  00000000  000be624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000c1c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007718 	.word	0x08007718

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	08007718 	.word	0x08007718

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0010      	movs	r0, r2
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	0019      	movs	r1, r3
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 febb 	bl	8001fac <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 fdfb 	bl	8001e3c <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 fead 	bl	8001fac <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fea3 	bl	8001fac <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fe25 	bl	8001ec4 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			@ (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fe1b 	bl	8001ec4 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	0008      	movs	r0, r1
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 fb6d 	bl	8000984 <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 faed 	bl	8000894 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 fb5f 	bl	8000984 <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			@ (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 fb55 	bl	8000984 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			@ (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 fafb 	bl	80008e4 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			@ (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 faf1 	bl	80008e4 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			@ (mov r8, r8)

08000310 <__aeabi_f2uiz>:
 8000310:	219e      	movs	r1, #158	@ 0x9e
 8000312:	b510      	push	{r4, lr}
 8000314:	05c9      	lsls	r1, r1, #23
 8000316:	1c04      	adds	r4, r0, #0
 8000318:	f7ff fff0 	bl	80002fc <__aeabi_fcmpge>
 800031c:	2800      	cmp	r0, #0
 800031e:	d103      	bne.n	8000328 <__aeabi_f2uiz+0x18>
 8000320:	1c20      	adds	r0, r4, #0
 8000322:	f000 fe5f 	bl	8000fe4 <__aeabi_f2iz>
 8000326:	bd10      	pop	{r4, pc}
 8000328:	219e      	movs	r1, #158	@ 0x9e
 800032a:	1c20      	adds	r0, r4, #0
 800032c:	05c9      	lsls	r1, r1, #23
 800032e:	f000 fcb5 	bl	8000c9c <__aeabi_fsub>
 8000332:	f000 fe57 	bl	8000fe4 <__aeabi_f2iz>
 8000336:	2380      	movs	r3, #128	@ 0x80
 8000338:	061b      	lsls	r3, r3, #24
 800033a:	469c      	mov	ip, r3
 800033c:	4460      	add	r0, ip
 800033e:	e7f2      	b.n	8000326 <__aeabi_f2uiz+0x16>

08000340 <__aeabi_fadd>:
 8000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000342:	46ce      	mov	lr, r9
 8000344:	4647      	mov	r7, r8
 8000346:	0243      	lsls	r3, r0, #9
 8000348:	0a5a      	lsrs	r2, r3, #9
 800034a:	024e      	lsls	r6, r1, #9
 800034c:	0045      	lsls	r5, r0, #1
 800034e:	0fc4      	lsrs	r4, r0, #31
 8000350:	0048      	lsls	r0, r1, #1
 8000352:	4691      	mov	r9, r2
 8000354:	0e2d      	lsrs	r5, r5, #24
 8000356:	0a72      	lsrs	r2, r6, #9
 8000358:	0e00      	lsrs	r0, r0, #24
 800035a:	4694      	mov	ip, r2
 800035c:	b580      	push	{r7, lr}
 800035e:	099b      	lsrs	r3, r3, #6
 8000360:	0fc9      	lsrs	r1, r1, #31
 8000362:	09b6      	lsrs	r6, r6, #6
 8000364:	1a2a      	subs	r2, r5, r0
 8000366:	428c      	cmp	r4, r1
 8000368:	d021      	beq.n	80003ae <__aeabi_fadd+0x6e>
 800036a:	2a00      	cmp	r2, #0
 800036c:	dd0d      	ble.n	800038a <__aeabi_fadd+0x4a>
 800036e:	2800      	cmp	r0, #0
 8000370:	d12d      	bne.n	80003ce <__aeabi_fadd+0x8e>
 8000372:	2e00      	cmp	r6, #0
 8000374:	d100      	bne.n	8000378 <__aeabi_fadd+0x38>
 8000376:	e08d      	b.n	8000494 <__aeabi_fadd+0x154>
 8000378:	1e51      	subs	r1, r2, #1
 800037a:	2a01      	cmp	r2, #1
 800037c:	d100      	bne.n	8000380 <__aeabi_fadd+0x40>
 800037e:	e11d      	b.n	80005bc <__aeabi_fadd+0x27c>
 8000380:	2aff      	cmp	r2, #255	@ 0xff
 8000382:	d100      	bne.n	8000386 <__aeabi_fadd+0x46>
 8000384:	e0ab      	b.n	80004de <__aeabi_fadd+0x19e>
 8000386:	000a      	movs	r2, r1
 8000388:	e027      	b.n	80003da <__aeabi_fadd+0x9a>
 800038a:	2a00      	cmp	r2, #0
 800038c:	d04d      	beq.n	800042a <__aeabi_fadd+0xea>
 800038e:	1b42      	subs	r2, r0, r5
 8000390:	2d00      	cmp	r5, #0
 8000392:	d000      	beq.n	8000396 <__aeabi_fadd+0x56>
 8000394:	e0cc      	b.n	8000530 <__aeabi_fadd+0x1f0>
 8000396:	2b00      	cmp	r3, #0
 8000398:	d100      	bne.n	800039c <__aeabi_fadd+0x5c>
 800039a:	e079      	b.n	8000490 <__aeabi_fadd+0x150>
 800039c:	1e54      	subs	r4, r2, #1
 800039e:	2a01      	cmp	r2, #1
 80003a0:	d100      	bne.n	80003a4 <__aeabi_fadd+0x64>
 80003a2:	e128      	b.n	80005f6 <__aeabi_fadd+0x2b6>
 80003a4:	2aff      	cmp	r2, #255	@ 0xff
 80003a6:	d100      	bne.n	80003aa <__aeabi_fadd+0x6a>
 80003a8:	e097      	b.n	80004da <__aeabi_fadd+0x19a>
 80003aa:	0022      	movs	r2, r4
 80003ac:	e0c5      	b.n	800053a <__aeabi_fadd+0x1fa>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	dc00      	bgt.n	80003b4 <__aeabi_fadd+0x74>
 80003b2:	e096      	b.n	80004e2 <__aeabi_fadd+0x1a2>
 80003b4:	2800      	cmp	r0, #0
 80003b6:	d04f      	beq.n	8000458 <__aeabi_fadd+0x118>
 80003b8:	2dff      	cmp	r5, #255	@ 0xff
 80003ba:	d100      	bne.n	80003be <__aeabi_fadd+0x7e>
 80003bc:	e08f      	b.n	80004de <__aeabi_fadd+0x19e>
 80003be:	2180      	movs	r1, #128	@ 0x80
 80003c0:	04c9      	lsls	r1, r1, #19
 80003c2:	430e      	orrs	r6, r1
 80003c4:	2a1b      	cmp	r2, #27
 80003c6:	dd51      	ble.n	800046c <__aeabi_fadd+0x12c>
 80003c8:	002a      	movs	r2, r5
 80003ca:	3301      	adds	r3, #1
 80003cc:	e018      	b.n	8000400 <__aeabi_fadd+0xc0>
 80003ce:	2dff      	cmp	r5, #255	@ 0xff
 80003d0:	d100      	bne.n	80003d4 <__aeabi_fadd+0x94>
 80003d2:	e084      	b.n	80004de <__aeabi_fadd+0x19e>
 80003d4:	2180      	movs	r1, #128	@ 0x80
 80003d6:	04c9      	lsls	r1, r1, #19
 80003d8:	430e      	orrs	r6, r1
 80003da:	2101      	movs	r1, #1
 80003dc:	2a1b      	cmp	r2, #27
 80003de:	dc08      	bgt.n	80003f2 <__aeabi_fadd+0xb2>
 80003e0:	0031      	movs	r1, r6
 80003e2:	2020      	movs	r0, #32
 80003e4:	40d1      	lsrs	r1, r2
 80003e6:	1a82      	subs	r2, r0, r2
 80003e8:	4096      	lsls	r6, r2
 80003ea:	0032      	movs	r2, r6
 80003ec:	1e50      	subs	r0, r2, #1
 80003ee:	4182      	sbcs	r2, r0
 80003f0:	4311      	orrs	r1, r2
 80003f2:	1a5b      	subs	r3, r3, r1
 80003f4:	015a      	lsls	r2, r3, #5
 80003f6:	d459      	bmi.n	80004ac <__aeabi_fadd+0x16c>
 80003f8:	2107      	movs	r1, #7
 80003fa:	002a      	movs	r2, r5
 80003fc:	4019      	ands	r1, r3
 80003fe:	d049      	beq.n	8000494 <__aeabi_fadd+0x154>
 8000400:	210f      	movs	r1, #15
 8000402:	4019      	ands	r1, r3
 8000404:	2904      	cmp	r1, #4
 8000406:	d000      	beq.n	800040a <__aeabi_fadd+0xca>
 8000408:	3304      	adds	r3, #4
 800040a:	0159      	lsls	r1, r3, #5
 800040c:	d542      	bpl.n	8000494 <__aeabi_fadd+0x154>
 800040e:	1c50      	adds	r0, r2, #1
 8000410:	2afe      	cmp	r2, #254	@ 0xfe
 8000412:	d03a      	beq.n	800048a <__aeabi_fadd+0x14a>
 8000414:	019b      	lsls	r3, r3, #6
 8000416:	b2c0      	uxtb	r0, r0
 8000418:	0a5b      	lsrs	r3, r3, #9
 800041a:	05c0      	lsls	r0, r0, #23
 800041c:	4318      	orrs	r0, r3
 800041e:	07e4      	lsls	r4, r4, #31
 8000420:	4320      	orrs	r0, r4
 8000422:	bcc0      	pop	{r6, r7}
 8000424:	46b9      	mov	r9, r7
 8000426:	46b0      	mov	r8, r6
 8000428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800042a:	20fe      	movs	r0, #254	@ 0xfe
 800042c:	4680      	mov	r8, r0
 800042e:	1c6f      	adds	r7, r5, #1
 8000430:	0038      	movs	r0, r7
 8000432:	4647      	mov	r7, r8
 8000434:	4207      	tst	r7, r0
 8000436:	d000      	beq.n	800043a <__aeabi_fadd+0xfa>
 8000438:	e08e      	b.n	8000558 <__aeabi_fadd+0x218>
 800043a:	2d00      	cmp	r5, #0
 800043c:	d000      	beq.n	8000440 <__aeabi_fadd+0x100>
 800043e:	e0b4      	b.n	80005aa <__aeabi_fadd+0x26a>
 8000440:	2b00      	cmp	r3, #0
 8000442:	d100      	bne.n	8000446 <__aeabi_fadd+0x106>
 8000444:	e0db      	b.n	80005fe <__aeabi_fadd+0x2be>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d06c      	beq.n	8000524 <__aeabi_fadd+0x1e4>
 800044a:	1b98      	subs	r0, r3, r6
 800044c:	0145      	lsls	r5, r0, #5
 800044e:	d400      	bmi.n	8000452 <__aeabi_fadd+0x112>
 8000450:	e0f7      	b.n	8000642 <__aeabi_fadd+0x302>
 8000452:	000c      	movs	r4, r1
 8000454:	1af3      	subs	r3, r6, r3
 8000456:	e03d      	b.n	80004d4 <__aeabi_fadd+0x194>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d01b      	beq.n	8000494 <__aeabi_fadd+0x154>
 800045c:	1e51      	subs	r1, r2, #1
 800045e:	2a01      	cmp	r2, #1
 8000460:	d100      	bne.n	8000464 <__aeabi_fadd+0x124>
 8000462:	e082      	b.n	800056a <__aeabi_fadd+0x22a>
 8000464:	2aff      	cmp	r2, #255	@ 0xff
 8000466:	d03a      	beq.n	80004de <__aeabi_fadd+0x19e>
 8000468:	000a      	movs	r2, r1
 800046a:	e7ab      	b.n	80003c4 <__aeabi_fadd+0x84>
 800046c:	0031      	movs	r1, r6
 800046e:	2020      	movs	r0, #32
 8000470:	40d1      	lsrs	r1, r2
 8000472:	1a82      	subs	r2, r0, r2
 8000474:	4096      	lsls	r6, r2
 8000476:	0032      	movs	r2, r6
 8000478:	1e50      	subs	r0, r2, #1
 800047a:	4182      	sbcs	r2, r0
 800047c:	430a      	orrs	r2, r1
 800047e:	189b      	adds	r3, r3, r2
 8000480:	015a      	lsls	r2, r3, #5
 8000482:	d5b9      	bpl.n	80003f8 <__aeabi_fadd+0xb8>
 8000484:	1c6a      	adds	r2, r5, #1
 8000486:	2dfe      	cmp	r5, #254	@ 0xfe
 8000488:	d175      	bne.n	8000576 <__aeabi_fadd+0x236>
 800048a:	20ff      	movs	r0, #255	@ 0xff
 800048c:	2300      	movs	r3, #0
 800048e:	e7c4      	b.n	800041a <__aeabi_fadd+0xda>
 8000490:	000c      	movs	r4, r1
 8000492:	0033      	movs	r3, r6
 8000494:	08db      	lsrs	r3, r3, #3
 8000496:	2aff      	cmp	r2, #255	@ 0xff
 8000498:	d146      	bne.n	8000528 <__aeabi_fadd+0x1e8>
 800049a:	2b00      	cmp	r3, #0
 800049c:	d0f5      	beq.n	800048a <__aeabi_fadd+0x14a>
 800049e:	2280      	movs	r2, #128	@ 0x80
 80004a0:	03d2      	lsls	r2, r2, #15
 80004a2:	4313      	orrs	r3, r2
 80004a4:	025b      	lsls	r3, r3, #9
 80004a6:	20ff      	movs	r0, #255	@ 0xff
 80004a8:	0a5b      	lsrs	r3, r3, #9
 80004aa:	e7b6      	b.n	800041a <__aeabi_fadd+0xda>
 80004ac:	019f      	lsls	r7, r3, #6
 80004ae:	09bf      	lsrs	r7, r7, #6
 80004b0:	0038      	movs	r0, r7
 80004b2:	f002 fd6d 	bl	8002f90 <__clzsi2>
 80004b6:	3805      	subs	r0, #5
 80004b8:	4087      	lsls	r7, r0
 80004ba:	4285      	cmp	r5, r0
 80004bc:	dc24      	bgt.n	8000508 <__aeabi_fadd+0x1c8>
 80004be:	003b      	movs	r3, r7
 80004c0:	2120      	movs	r1, #32
 80004c2:	1b42      	subs	r2, r0, r5
 80004c4:	3201      	adds	r2, #1
 80004c6:	40d3      	lsrs	r3, r2
 80004c8:	1a8a      	subs	r2, r1, r2
 80004ca:	4097      	lsls	r7, r2
 80004cc:	1e7a      	subs	r2, r7, #1
 80004ce:	4197      	sbcs	r7, r2
 80004d0:	2200      	movs	r2, #0
 80004d2:	433b      	orrs	r3, r7
 80004d4:	0759      	lsls	r1, r3, #29
 80004d6:	d193      	bne.n	8000400 <__aeabi_fadd+0xc0>
 80004d8:	e797      	b.n	800040a <__aeabi_fadd+0xca>
 80004da:	000c      	movs	r4, r1
 80004dc:	0033      	movs	r3, r6
 80004de:	08db      	lsrs	r3, r3, #3
 80004e0:	e7db      	b.n	800049a <__aeabi_fadd+0x15a>
 80004e2:	2a00      	cmp	r2, #0
 80004e4:	d014      	beq.n	8000510 <__aeabi_fadd+0x1d0>
 80004e6:	1b42      	subs	r2, r0, r5
 80004e8:	2d00      	cmp	r5, #0
 80004ea:	d14b      	bne.n	8000584 <__aeabi_fadd+0x244>
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d0d0      	beq.n	8000492 <__aeabi_fadd+0x152>
 80004f0:	1e51      	subs	r1, r2, #1
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	d100      	bne.n	80004f8 <__aeabi_fadd+0x1b8>
 80004f6:	e09e      	b.n	8000636 <__aeabi_fadd+0x2f6>
 80004f8:	2aff      	cmp	r2, #255	@ 0xff
 80004fa:	d0ef      	beq.n	80004dc <__aeabi_fadd+0x19c>
 80004fc:	000a      	movs	r2, r1
 80004fe:	2a1b      	cmp	r2, #27
 8000500:	dd5f      	ble.n	80005c2 <__aeabi_fadd+0x282>
 8000502:	0002      	movs	r2, r0
 8000504:	1c73      	adds	r3, r6, #1
 8000506:	e77b      	b.n	8000400 <__aeabi_fadd+0xc0>
 8000508:	4b50      	ldr	r3, [pc, #320]	@ (800064c <__aeabi_fadd+0x30c>)
 800050a:	1a2a      	subs	r2, r5, r0
 800050c:	403b      	ands	r3, r7
 800050e:	e7e1      	b.n	80004d4 <__aeabi_fadd+0x194>
 8000510:	21fe      	movs	r1, #254	@ 0xfe
 8000512:	1c6a      	adds	r2, r5, #1
 8000514:	4211      	tst	r1, r2
 8000516:	d13b      	bne.n	8000590 <__aeabi_fadd+0x250>
 8000518:	2d00      	cmp	r5, #0
 800051a:	d15d      	bne.n	80005d8 <__aeabi_fadd+0x298>
 800051c:	2b00      	cmp	r3, #0
 800051e:	d07f      	beq.n	8000620 <__aeabi_fadd+0x2e0>
 8000520:	2e00      	cmp	r6, #0
 8000522:	d17f      	bne.n	8000624 <__aeabi_fadd+0x2e4>
 8000524:	2200      	movs	r2, #0
 8000526:	08db      	lsrs	r3, r3, #3
 8000528:	025b      	lsls	r3, r3, #9
 800052a:	0a5b      	lsrs	r3, r3, #9
 800052c:	b2d0      	uxtb	r0, r2
 800052e:	e774      	b.n	800041a <__aeabi_fadd+0xda>
 8000530:	28ff      	cmp	r0, #255	@ 0xff
 8000532:	d0d2      	beq.n	80004da <__aeabi_fadd+0x19a>
 8000534:	2480      	movs	r4, #128	@ 0x80
 8000536:	04e4      	lsls	r4, r4, #19
 8000538:	4323      	orrs	r3, r4
 800053a:	2401      	movs	r4, #1
 800053c:	2a1b      	cmp	r2, #27
 800053e:	dc07      	bgt.n	8000550 <__aeabi_fadd+0x210>
 8000540:	001c      	movs	r4, r3
 8000542:	2520      	movs	r5, #32
 8000544:	40d4      	lsrs	r4, r2
 8000546:	1aaa      	subs	r2, r5, r2
 8000548:	4093      	lsls	r3, r2
 800054a:	1e5a      	subs	r2, r3, #1
 800054c:	4193      	sbcs	r3, r2
 800054e:	431c      	orrs	r4, r3
 8000550:	1b33      	subs	r3, r6, r4
 8000552:	0005      	movs	r5, r0
 8000554:	000c      	movs	r4, r1
 8000556:	e74d      	b.n	80003f4 <__aeabi_fadd+0xb4>
 8000558:	1b9f      	subs	r7, r3, r6
 800055a:	017a      	lsls	r2, r7, #5
 800055c:	d422      	bmi.n	80005a4 <__aeabi_fadd+0x264>
 800055e:	2f00      	cmp	r7, #0
 8000560:	d1a6      	bne.n	80004b0 <__aeabi_fadd+0x170>
 8000562:	2400      	movs	r4, #0
 8000564:	2000      	movs	r0, #0
 8000566:	2300      	movs	r3, #0
 8000568:	e757      	b.n	800041a <__aeabi_fadd+0xda>
 800056a:	199b      	adds	r3, r3, r6
 800056c:	2501      	movs	r5, #1
 800056e:	3201      	adds	r2, #1
 8000570:	0159      	lsls	r1, r3, #5
 8000572:	d400      	bmi.n	8000576 <__aeabi_fadd+0x236>
 8000574:	e740      	b.n	80003f8 <__aeabi_fadd+0xb8>
 8000576:	2101      	movs	r1, #1
 8000578:	4835      	ldr	r0, [pc, #212]	@ (8000650 <__aeabi_fadd+0x310>)
 800057a:	4019      	ands	r1, r3
 800057c:	085b      	lsrs	r3, r3, #1
 800057e:	4003      	ands	r3, r0
 8000580:	430b      	orrs	r3, r1
 8000582:	e7a7      	b.n	80004d4 <__aeabi_fadd+0x194>
 8000584:	28ff      	cmp	r0, #255	@ 0xff
 8000586:	d0a9      	beq.n	80004dc <__aeabi_fadd+0x19c>
 8000588:	2180      	movs	r1, #128	@ 0x80
 800058a:	04c9      	lsls	r1, r1, #19
 800058c:	430b      	orrs	r3, r1
 800058e:	e7b6      	b.n	80004fe <__aeabi_fadd+0x1be>
 8000590:	2aff      	cmp	r2, #255	@ 0xff
 8000592:	d100      	bne.n	8000596 <__aeabi_fadd+0x256>
 8000594:	e779      	b.n	800048a <__aeabi_fadd+0x14a>
 8000596:	199b      	adds	r3, r3, r6
 8000598:	085b      	lsrs	r3, r3, #1
 800059a:	0759      	lsls	r1, r3, #29
 800059c:	d000      	beq.n	80005a0 <__aeabi_fadd+0x260>
 800059e:	e72f      	b.n	8000400 <__aeabi_fadd+0xc0>
 80005a0:	08db      	lsrs	r3, r3, #3
 80005a2:	e7c1      	b.n	8000528 <__aeabi_fadd+0x1e8>
 80005a4:	000c      	movs	r4, r1
 80005a6:	1af7      	subs	r7, r6, r3
 80005a8:	e782      	b.n	80004b0 <__aeabi_fadd+0x170>
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d12c      	bne.n	8000608 <__aeabi_fadd+0x2c8>
 80005ae:	2e00      	cmp	r6, #0
 80005b0:	d193      	bne.n	80004da <__aeabi_fadd+0x19a>
 80005b2:	2380      	movs	r3, #128	@ 0x80
 80005b4:	2400      	movs	r4, #0
 80005b6:	20ff      	movs	r0, #255	@ 0xff
 80005b8:	03db      	lsls	r3, r3, #15
 80005ba:	e72e      	b.n	800041a <__aeabi_fadd+0xda>
 80005bc:	2501      	movs	r5, #1
 80005be:	1b9b      	subs	r3, r3, r6
 80005c0:	e718      	b.n	80003f4 <__aeabi_fadd+0xb4>
 80005c2:	0019      	movs	r1, r3
 80005c4:	2520      	movs	r5, #32
 80005c6:	40d1      	lsrs	r1, r2
 80005c8:	1aaa      	subs	r2, r5, r2
 80005ca:	4093      	lsls	r3, r2
 80005cc:	1e5a      	subs	r2, r3, #1
 80005ce:	4193      	sbcs	r3, r2
 80005d0:	430b      	orrs	r3, r1
 80005d2:	0005      	movs	r5, r0
 80005d4:	199b      	adds	r3, r3, r6
 80005d6:	e753      	b.n	8000480 <__aeabi_fadd+0x140>
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d100      	bne.n	80005de <__aeabi_fadd+0x29e>
 80005dc:	e77e      	b.n	80004dc <__aeabi_fadd+0x19c>
 80005de:	2e00      	cmp	r6, #0
 80005e0:	d100      	bne.n	80005e4 <__aeabi_fadd+0x2a4>
 80005e2:	e77c      	b.n	80004de <__aeabi_fadd+0x19e>
 80005e4:	2280      	movs	r2, #128	@ 0x80
 80005e6:	03d2      	lsls	r2, r2, #15
 80005e8:	4591      	cmp	r9, r2
 80005ea:	d302      	bcc.n	80005f2 <__aeabi_fadd+0x2b2>
 80005ec:	4594      	cmp	ip, r2
 80005ee:	d200      	bcs.n	80005f2 <__aeabi_fadd+0x2b2>
 80005f0:	0033      	movs	r3, r6
 80005f2:	08db      	lsrs	r3, r3, #3
 80005f4:	e753      	b.n	800049e <__aeabi_fadd+0x15e>
 80005f6:	000c      	movs	r4, r1
 80005f8:	1af3      	subs	r3, r6, r3
 80005fa:	3501      	adds	r5, #1
 80005fc:	e6fa      	b.n	80003f4 <__aeabi_fadd+0xb4>
 80005fe:	2e00      	cmp	r6, #0
 8000600:	d0af      	beq.n	8000562 <__aeabi_fadd+0x222>
 8000602:	000c      	movs	r4, r1
 8000604:	0033      	movs	r3, r6
 8000606:	e78d      	b.n	8000524 <__aeabi_fadd+0x1e4>
 8000608:	2e00      	cmp	r6, #0
 800060a:	d100      	bne.n	800060e <__aeabi_fadd+0x2ce>
 800060c:	e767      	b.n	80004de <__aeabi_fadd+0x19e>
 800060e:	2280      	movs	r2, #128	@ 0x80
 8000610:	03d2      	lsls	r2, r2, #15
 8000612:	4591      	cmp	r9, r2
 8000614:	d3ed      	bcc.n	80005f2 <__aeabi_fadd+0x2b2>
 8000616:	4594      	cmp	ip, r2
 8000618:	d2eb      	bcs.n	80005f2 <__aeabi_fadd+0x2b2>
 800061a:	000c      	movs	r4, r1
 800061c:	0033      	movs	r3, r6
 800061e:	e7e8      	b.n	80005f2 <__aeabi_fadd+0x2b2>
 8000620:	0033      	movs	r3, r6
 8000622:	e77f      	b.n	8000524 <__aeabi_fadd+0x1e4>
 8000624:	199b      	adds	r3, r3, r6
 8000626:	2200      	movs	r2, #0
 8000628:	0159      	lsls	r1, r3, #5
 800062a:	d5b9      	bpl.n	80005a0 <__aeabi_fadd+0x260>
 800062c:	4a07      	ldr	r2, [pc, #28]	@ (800064c <__aeabi_fadd+0x30c>)
 800062e:	4013      	ands	r3, r2
 8000630:	08db      	lsrs	r3, r3, #3
 8000632:	2201      	movs	r2, #1
 8000634:	e778      	b.n	8000528 <__aeabi_fadd+0x1e8>
 8000636:	199b      	adds	r3, r3, r6
 8000638:	3201      	adds	r2, #1
 800063a:	3501      	adds	r5, #1
 800063c:	0159      	lsls	r1, r3, #5
 800063e:	d49a      	bmi.n	8000576 <__aeabi_fadd+0x236>
 8000640:	e6da      	b.n	80003f8 <__aeabi_fadd+0xb8>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d08d      	beq.n	8000562 <__aeabi_fadd+0x222>
 8000646:	08db      	lsrs	r3, r3, #3
 8000648:	e76e      	b.n	8000528 <__aeabi_fadd+0x1e8>
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	fbffffff 	.word	0xfbffffff
 8000650:	7dffffff 	.word	0x7dffffff

08000654 <__aeabi_fdiv>:
 8000654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000656:	464f      	mov	r7, r9
 8000658:	4646      	mov	r6, r8
 800065a:	46d6      	mov	lr, sl
 800065c:	0244      	lsls	r4, r0, #9
 800065e:	b5c0      	push	{r6, r7, lr}
 8000660:	0047      	lsls	r7, r0, #1
 8000662:	1c0e      	adds	r6, r1, #0
 8000664:	0a64      	lsrs	r4, r4, #9
 8000666:	0e3f      	lsrs	r7, r7, #24
 8000668:	0fc5      	lsrs	r5, r0, #31
 800066a:	2f00      	cmp	r7, #0
 800066c:	d03c      	beq.n	80006e8 <__aeabi_fdiv+0x94>
 800066e:	2fff      	cmp	r7, #255	@ 0xff
 8000670:	d042      	beq.n	80006f8 <__aeabi_fdiv+0xa4>
 8000672:	2300      	movs	r3, #0
 8000674:	2280      	movs	r2, #128	@ 0x80
 8000676:	4699      	mov	r9, r3
 8000678:	469a      	mov	sl, r3
 800067a:	00e4      	lsls	r4, r4, #3
 800067c:	04d2      	lsls	r2, r2, #19
 800067e:	4314      	orrs	r4, r2
 8000680:	3f7f      	subs	r7, #127	@ 0x7f
 8000682:	0273      	lsls	r3, r6, #9
 8000684:	0a5b      	lsrs	r3, r3, #9
 8000686:	4698      	mov	r8, r3
 8000688:	0073      	lsls	r3, r6, #1
 800068a:	0e1b      	lsrs	r3, r3, #24
 800068c:	0ff6      	lsrs	r6, r6, #31
 800068e:	2b00      	cmp	r3, #0
 8000690:	d01b      	beq.n	80006ca <__aeabi_fdiv+0x76>
 8000692:	2bff      	cmp	r3, #255	@ 0xff
 8000694:	d013      	beq.n	80006be <__aeabi_fdiv+0x6a>
 8000696:	4642      	mov	r2, r8
 8000698:	2180      	movs	r1, #128	@ 0x80
 800069a:	00d2      	lsls	r2, r2, #3
 800069c:	04c9      	lsls	r1, r1, #19
 800069e:	4311      	orrs	r1, r2
 80006a0:	4688      	mov	r8, r1
 80006a2:	2000      	movs	r0, #0
 80006a4:	3b7f      	subs	r3, #127	@ 0x7f
 80006a6:	0029      	movs	r1, r5
 80006a8:	1aff      	subs	r7, r7, r3
 80006aa:	464b      	mov	r3, r9
 80006ac:	4071      	eors	r1, r6
 80006ae:	b2c9      	uxtb	r1, r1
 80006b0:	2b0f      	cmp	r3, #15
 80006b2:	d900      	bls.n	80006b6 <__aeabi_fdiv+0x62>
 80006b4:	e0b5      	b.n	8000822 <__aeabi_fdiv+0x1ce>
 80006b6:	4a74      	ldr	r2, [pc, #464]	@ (8000888 <__aeabi_fdiv+0x234>)
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	58d3      	ldr	r3, [r2, r3]
 80006bc:	469f      	mov	pc, r3
 80006be:	4643      	mov	r3, r8
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d13f      	bne.n	8000744 <__aeabi_fdiv+0xf0>
 80006c4:	3fff      	subs	r7, #255	@ 0xff
 80006c6:	3302      	adds	r3, #2
 80006c8:	e003      	b.n	80006d2 <__aeabi_fdiv+0x7e>
 80006ca:	4643      	mov	r3, r8
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d12d      	bne.n	800072c <__aeabi_fdiv+0xd8>
 80006d0:	2301      	movs	r3, #1
 80006d2:	0029      	movs	r1, r5
 80006d4:	464a      	mov	r2, r9
 80006d6:	4071      	eors	r1, r6
 80006d8:	b2c9      	uxtb	r1, r1
 80006da:	431a      	orrs	r2, r3
 80006dc:	2a0e      	cmp	r2, #14
 80006de:	d838      	bhi.n	8000752 <__aeabi_fdiv+0xfe>
 80006e0:	486a      	ldr	r0, [pc, #424]	@ (800088c <__aeabi_fdiv+0x238>)
 80006e2:	0092      	lsls	r2, r2, #2
 80006e4:	5882      	ldr	r2, [r0, r2]
 80006e6:	4697      	mov	pc, r2
 80006e8:	2c00      	cmp	r4, #0
 80006ea:	d113      	bne.n	8000714 <__aeabi_fdiv+0xc0>
 80006ec:	2304      	movs	r3, #4
 80006ee:	4699      	mov	r9, r3
 80006f0:	3b03      	subs	r3, #3
 80006f2:	2700      	movs	r7, #0
 80006f4:	469a      	mov	sl, r3
 80006f6:	e7c4      	b.n	8000682 <__aeabi_fdiv+0x2e>
 80006f8:	2c00      	cmp	r4, #0
 80006fa:	d105      	bne.n	8000708 <__aeabi_fdiv+0xb4>
 80006fc:	2308      	movs	r3, #8
 80006fe:	4699      	mov	r9, r3
 8000700:	3b06      	subs	r3, #6
 8000702:	27ff      	movs	r7, #255	@ 0xff
 8000704:	469a      	mov	sl, r3
 8000706:	e7bc      	b.n	8000682 <__aeabi_fdiv+0x2e>
 8000708:	230c      	movs	r3, #12
 800070a:	4699      	mov	r9, r3
 800070c:	3b09      	subs	r3, #9
 800070e:	27ff      	movs	r7, #255	@ 0xff
 8000710:	469a      	mov	sl, r3
 8000712:	e7b6      	b.n	8000682 <__aeabi_fdiv+0x2e>
 8000714:	0020      	movs	r0, r4
 8000716:	f002 fc3b 	bl	8002f90 <__clzsi2>
 800071a:	2776      	movs	r7, #118	@ 0x76
 800071c:	1f43      	subs	r3, r0, #5
 800071e:	409c      	lsls	r4, r3
 8000720:	2300      	movs	r3, #0
 8000722:	427f      	negs	r7, r7
 8000724:	4699      	mov	r9, r3
 8000726:	469a      	mov	sl, r3
 8000728:	1a3f      	subs	r7, r7, r0
 800072a:	e7aa      	b.n	8000682 <__aeabi_fdiv+0x2e>
 800072c:	4640      	mov	r0, r8
 800072e:	f002 fc2f 	bl	8002f90 <__clzsi2>
 8000732:	4642      	mov	r2, r8
 8000734:	1f43      	subs	r3, r0, #5
 8000736:	409a      	lsls	r2, r3
 8000738:	2376      	movs	r3, #118	@ 0x76
 800073a:	425b      	negs	r3, r3
 800073c:	1a1b      	subs	r3, r3, r0
 800073e:	4690      	mov	r8, r2
 8000740:	2000      	movs	r0, #0
 8000742:	e7b0      	b.n	80006a6 <__aeabi_fdiv+0x52>
 8000744:	2303      	movs	r3, #3
 8000746:	464a      	mov	r2, r9
 8000748:	431a      	orrs	r2, r3
 800074a:	4691      	mov	r9, r2
 800074c:	2003      	movs	r0, #3
 800074e:	33fc      	adds	r3, #252	@ 0xfc
 8000750:	e7a9      	b.n	80006a6 <__aeabi_fdiv+0x52>
 8000752:	000d      	movs	r5, r1
 8000754:	20ff      	movs	r0, #255	@ 0xff
 8000756:	2200      	movs	r2, #0
 8000758:	05c0      	lsls	r0, r0, #23
 800075a:	07ed      	lsls	r5, r5, #31
 800075c:	4310      	orrs	r0, r2
 800075e:	4328      	orrs	r0, r5
 8000760:	bce0      	pop	{r5, r6, r7}
 8000762:	46ba      	mov	sl, r7
 8000764:	46b1      	mov	r9, r6
 8000766:	46a8      	mov	r8, r5
 8000768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800076a:	000d      	movs	r5, r1
 800076c:	2000      	movs	r0, #0
 800076e:	2200      	movs	r2, #0
 8000770:	e7f2      	b.n	8000758 <__aeabi_fdiv+0x104>
 8000772:	4653      	mov	r3, sl
 8000774:	2b02      	cmp	r3, #2
 8000776:	d0ed      	beq.n	8000754 <__aeabi_fdiv+0x100>
 8000778:	2b03      	cmp	r3, #3
 800077a:	d033      	beq.n	80007e4 <__aeabi_fdiv+0x190>
 800077c:	46a0      	mov	r8, r4
 800077e:	2b01      	cmp	r3, #1
 8000780:	d105      	bne.n	800078e <__aeabi_fdiv+0x13a>
 8000782:	2000      	movs	r0, #0
 8000784:	2200      	movs	r2, #0
 8000786:	e7e7      	b.n	8000758 <__aeabi_fdiv+0x104>
 8000788:	0035      	movs	r5, r6
 800078a:	2803      	cmp	r0, #3
 800078c:	d07a      	beq.n	8000884 <__aeabi_fdiv+0x230>
 800078e:	003b      	movs	r3, r7
 8000790:	337f      	adds	r3, #127	@ 0x7f
 8000792:	2b00      	cmp	r3, #0
 8000794:	dd2d      	ble.n	80007f2 <__aeabi_fdiv+0x19e>
 8000796:	4642      	mov	r2, r8
 8000798:	0752      	lsls	r2, r2, #29
 800079a:	d007      	beq.n	80007ac <__aeabi_fdiv+0x158>
 800079c:	220f      	movs	r2, #15
 800079e:	4641      	mov	r1, r8
 80007a0:	400a      	ands	r2, r1
 80007a2:	2a04      	cmp	r2, #4
 80007a4:	d002      	beq.n	80007ac <__aeabi_fdiv+0x158>
 80007a6:	2204      	movs	r2, #4
 80007a8:	4694      	mov	ip, r2
 80007aa:	44e0      	add	r8, ip
 80007ac:	4642      	mov	r2, r8
 80007ae:	0112      	lsls	r2, r2, #4
 80007b0:	d505      	bpl.n	80007be <__aeabi_fdiv+0x16a>
 80007b2:	4642      	mov	r2, r8
 80007b4:	4b36      	ldr	r3, [pc, #216]	@ (8000890 <__aeabi_fdiv+0x23c>)
 80007b6:	401a      	ands	r2, r3
 80007b8:	003b      	movs	r3, r7
 80007ba:	4690      	mov	r8, r2
 80007bc:	3380      	adds	r3, #128	@ 0x80
 80007be:	2bfe      	cmp	r3, #254	@ 0xfe
 80007c0:	dcc8      	bgt.n	8000754 <__aeabi_fdiv+0x100>
 80007c2:	4642      	mov	r2, r8
 80007c4:	0192      	lsls	r2, r2, #6
 80007c6:	0a52      	lsrs	r2, r2, #9
 80007c8:	b2d8      	uxtb	r0, r3
 80007ca:	e7c5      	b.n	8000758 <__aeabi_fdiv+0x104>
 80007cc:	2280      	movs	r2, #128	@ 0x80
 80007ce:	2500      	movs	r5, #0
 80007d0:	20ff      	movs	r0, #255	@ 0xff
 80007d2:	03d2      	lsls	r2, r2, #15
 80007d4:	e7c0      	b.n	8000758 <__aeabi_fdiv+0x104>
 80007d6:	2280      	movs	r2, #128	@ 0x80
 80007d8:	03d2      	lsls	r2, r2, #15
 80007da:	4214      	tst	r4, r2
 80007dc:	d002      	beq.n	80007e4 <__aeabi_fdiv+0x190>
 80007de:	4643      	mov	r3, r8
 80007e0:	4213      	tst	r3, r2
 80007e2:	d049      	beq.n	8000878 <__aeabi_fdiv+0x224>
 80007e4:	2280      	movs	r2, #128	@ 0x80
 80007e6:	03d2      	lsls	r2, r2, #15
 80007e8:	4322      	orrs	r2, r4
 80007ea:	0252      	lsls	r2, r2, #9
 80007ec:	20ff      	movs	r0, #255	@ 0xff
 80007ee:	0a52      	lsrs	r2, r2, #9
 80007f0:	e7b2      	b.n	8000758 <__aeabi_fdiv+0x104>
 80007f2:	2201      	movs	r2, #1
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	2b1b      	cmp	r3, #27
 80007f8:	dcc3      	bgt.n	8000782 <__aeabi_fdiv+0x12e>
 80007fa:	4642      	mov	r2, r8
 80007fc:	40da      	lsrs	r2, r3
 80007fe:	4643      	mov	r3, r8
 8000800:	379e      	adds	r7, #158	@ 0x9e
 8000802:	40bb      	lsls	r3, r7
 8000804:	1e59      	subs	r1, r3, #1
 8000806:	418b      	sbcs	r3, r1
 8000808:	431a      	orrs	r2, r3
 800080a:	0753      	lsls	r3, r2, #29
 800080c:	d004      	beq.n	8000818 <__aeabi_fdiv+0x1c4>
 800080e:	230f      	movs	r3, #15
 8000810:	4013      	ands	r3, r2
 8000812:	2b04      	cmp	r3, #4
 8000814:	d000      	beq.n	8000818 <__aeabi_fdiv+0x1c4>
 8000816:	3204      	adds	r2, #4
 8000818:	0153      	lsls	r3, r2, #5
 800081a:	d529      	bpl.n	8000870 <__aeabi_fdiv+0x21c>
 800081c:	2001      	movs	r0, #1
 800081e:	2200      	movs	r2, #0
 8000820:	e79a      	b.n	8000758 <__aeabi_fdiv+0x104>
 8000822:	4642      	mov	r2, r8
 8000824:	0163      	lsls	r3, r4, #5
 8000826:	0155      	lsls	r5, r2, #5
 8000828:	42ab      	cmp	r3, r5
 800082a:	d215      	bcs.n	8000858 <__aeabi_fdiv+0x204>
 800082c:	201b      	movs	r0, #27
 800082e:	2200      	movs	r2, #0
 8000830:	3f01      	subs	r7, #1
 8000832:	2601      	movs	r6, #1
 8000834:	001c      	movs	r4, r3
 8000836:	0052      	lsls	r2, r2, #1
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	2c00      	cmp	r4, #0
 800083c:	db01      	blt.n	8000842 <__aeabi_fdiv+0x1ee>
 800083e:	429d      	cmp	r5, r3
 8000840:	d801      	bhi.n	8000846 <__aeabi_fdiv+0x1f2>
 8000842:	1b5b      	subs	r3, r3, r5
 8000844:	4332      	orrs	r2, r6
 8000846:	3801      	subs	r0, #1
 8000848:	2800      	cmp	r0, #0
 800084a:	d1f3      	bne.n	8000834 <__aeabi_fdiv+0x1e0>
 800084c:	1e58      	subs	r0, r3, #1
 800084e:	4183      	sbcs	r3, r0
 8000850:	4313      	orrs	r3, r2
 8000852:	4698      	mov	r8, r3
 8000854:	000d      	movs	r5, r1
 8000856:	e79a      	b.n	800078e <__aeabi_fdiv+0x13a>
 8000858:	201a      	movs	r0, #26
 800085a:	2201      	movs	r2, #1
 800085c:	1b5b      	subs	r3, r3, r5
 800085e:	e7e8      	b.n	8000832 <__aeabi_fdiv+0x1de>
 8000860:	3b02      	subs	r3, #2
 8000862:	425a      	negs	r2, r3
 8000864:	4153      	adcs	r3, r2
 8000866:	425b      	negs	r3, r3
 8000868:	0035      	movs	r5, r6
 800086a:	2200      	movs	r2, #0
 800086c:	b2d8      	uxtb	r0, r3
 800086e:	e773      	b.n	8000758 <__aeabi_fdiv+0x104>
 8000870:	0192      	lsls	r2, r2, #6
 8000872:	2000      	movs	r0, #0
 8000874:	0a52      	lsrs	r2, r2, #9
 8000876:	e76f      	b.n	8000758 <__aeabi_fdiv+0x104>
 8000878:	431a      	orrs	r2, r3
 800087a:	0252      	lsls	r2, r2, #9
 800087c:	0035      	movs	r5, r6
 800087e:	20ff      	movs	r0, #255	@ 0xff
 8000880:	0a52      	lsrs	r2, r2, #9
 8000882:	e769      	b.n	8000758 <__aeabi_fdiv+0x104>
 8000884:	4644      	mov	r4, r8
 8000886:	e7ad      	b.n	80007e4 <__aeabi_fdiv+0x190>
 8000888:	08007730 	.word	0x08007730
 800088c:	08007770 	.word	0x08007770
 8000890:	f7ffffff 	.word	0xf7ffffff

08000894 <__eqsf2>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	0042      	lsls	r2, r0, #1
 8000898:	024e      	lsls	r6, r1, #9
 800089a:	004c      	lsls	r4, r1, #1
 800089c:	0245      	lsls	r5, r0, #9
 800089e:	0a6d      	lsrs	r5, r5, #9
 80008a0:	0e12      	lsrs	r2, r2, #24
 80008a2:	0fc3      	lsrs	r3, r0, #31
 80008a4:	0a76      	lsrs	r6, r6, #9
 80008a6:	0e24      	lsrs	r4, r4, #24
 80008a8:	0fc9      	lsrs	r1, r1, #31
 80008aa:	2aff      	cmp	r2, #255	@ 0xff
 80008ac:	d010      	beq.n	80008d0 <__eqsf2+0x3c>
 80008ae:	2cff      	cmp	r4, #255	@ 0xff
 80008b0:	d00c      	beq.n	80008cc <__eqsf2+0x38>
 80008b2:	2001      	movs	r0, #1
 80008b4:	42a2      	cmp	r2, r4
 80008b6:	d10a      	bne.n	80008ce <__eqsf2+0x3a>
 80008b8:	42b5      	cmp	r5, r6
 80008ba:	d108      	bne.n	80008ce <__eqsf2+0x3a>
 80008bc:	428b      	cmp	r3, r1
 80008be:	d00f      	beq.n	80008e0 <__eqsf2+0x4c>
 80008c0:	2a00      	cmp	r2, #0
 80008c2:	d104      	bne.n	80008ce <__eqsf2+0x3a>
 80008c4:	0028      	movs	r0, r5
 80008c6:	1e43      	subs	r3, r0, #1
 80008c8:	4198      	sbcs	r0, r3
 80008ca:	e000      	b.n	80008ce <__eqsf2+0x3a>
 80008cc:	2001      	movs	r0, #1
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	2001      	movs	r0, #1
 80008d2:	2cff      	cmp	r4, #255	@ 0xff
 80008d4:	d1fb      	bne.n	80008ce <__eqsf2+0x3a>
 80008d6:	4335      	orrs	r5, r6
 80008d8:	d1f9      	bne.n	80008ce <__eqsf2+0x3a>
 80008da:	404b      	eors	r3, r1
 80008dc:	0018      	movs	r0, r3
 80008de:	e7f6      	b.n	80008ce <__eqsf2+0x3a>
 80008e0:	2000      	movs	r0, #0
 80008e2:	e7f4      	b.n	80008ce <__eqsf2+0x3a>

080008e4 <__gesf2>:
 80008e4:	b530      	push	{r4, r5, lr}
 80008e6:	0042      	lsls	r2, r0, #1
 80008e8:	0244      	lsls	r4, r0, #9
 80008ea:	024d      	lsls	r5, r1, #9
 80008ec:	0fc3      	lsrs	r3, r0, #31
 80008ee:	0048      	lsls	r0, r1, #1
 80008f0:	0a64      	lsrs	r4, r4, #9
 80008f2:	0e12      	lsrs	r2, r2, #24
 80008f4:	0a6d      	lsrs	r5, r5, #9
 80008f6:	0e00      	lsrs	r0, r0, #24
 80008f8:	0fc9      	lsrs	r1, r1, #31
 80008fa:	2aff      	cmp	r2, #255	@ 0xff
 80008fc:	d019      	beq.n	8000932 <__gesf2+0x4e>
 80008fe:	28ff      	cmp	r0, #255	@ 0xff
 8000900:	d00b      	beq.n	800091a <__gesf2+0x36>
 8000902:	2a00      	cmp	r2, #0
 8000904:	d11e      	bne.n	8000944 <__gesf2+0x60>
 8000906:	2800      	cmp	r0, #0
 8000908:	d10b      	bne.n	8000922 <__gesf2+0x3e>
 800090a:	2d00      	cmp	r5, #0
 800090c:	d027      	beq.n	800095e <__gesf2+0x7a>
 800090e:	2c00      	cmp	r4, #0
 8000910:	d134      	bne.n	800097c <__gesf2+0x98>
 8000912:	2900      	cmp	r1, #0
 8000914:	d02f      	beq.n	8000976 <__gesf2+0x92>
 8000916:	0008      	movs	r0, r1
 8000918:	bd30      	pop	{r4, r5, pc}
 800091a:	2d00      	cmp	r5, #0
 800091c:	d128      	bne.n	8000970 <__gesf2+0x8c>
 800091e:	2a00      	cmp	r2, #0
 8000920:	d101      	bne.n	8000926 <__gesf2+0x42>
 8000922:	2c00      	cmp	r4, #0
 8000924:	d0f5      	beq.n	8000912 <__gesf2+0x2e>
 8000926:	428b      	cmp	r3, r1
 8000928:	d107      	bne.n	800093a <__gesf2+0x56>
 800092a:	2b00      	cmp	r3, #0
 800092c:	d023      	beq.n	8000976 <__gesf2+0x92>
 800092e:	0018      	movs	r0, r3
 8000930:	e7f2      	b.n	8000918 <__gesf2+0x34>
 8000932:	2c00      	cmp	r4, #0
 8000934:	d11c      	bne.n	8000970 <__gesf2+0x8c>
 8000936:	28ff      	cmp	r0, #255	@ 0xff
 8000938:	d014      	beq.n	8000964 <__gesf2+0x80>
 800093a:	1e58      	subs	r0, r3, #1
 800093c:	2302      	movs	r3, #2
 800093e:	4018      	ands	r0, r3
 8000940:	3801      	subs	r0, #1
 8000942:	e7e9      	b.n	8000918 <__gesf2+0x34>
 8000944:	2800      	cmp	r0, #0
 8000946:	d0f8      	beq.n	800093a <__gesf2+0x56>
 8000948:	428b      	cmp	r3, r1
 800094a:	d1f6      	bne.n	800093a <__gesf2+0x56>
 800094c:	4282      	cmp	r2, r0
 800094e:	dcf4      	bgt.n	800093a <__gesf2+0x56>
 8000950:	dbeb      	blt.n	800092a <__gesf2+0x46>
 8000952:	42ac      	cmp	r4, r5
 8000954:	d8f1      	bhi.n	800093a <__gesf2+0x56>
 8000956:	2000      	movs	r0, #0
 8000958:	42ac      	cmp	r4, r5
 800095a:	d2dd      	bcs.n	8000918 <__gesf2+0x34>
 800095c:	e7e5      	b.n	800092a <__gesf2+0x46>
 800095e:	2c00      	cmp	r4, #0
 8000960:	d0da      	beq.n	8000918 <__gesf2+0x34>
 8000962:	e7ea      	b.n	800093a <__gesf2+0x56>
 8000964:	2d00      	cmp	r5, #0
 8000966:	d103      	bne.n	8000970 <__gesf2+0x8c>
 8000968:	428b      	cmp	r3, r1
 800096a:	d1e6      	bne.n	800093a <__gesf2+0x56>
 800096c:	2000      	movs	r0, #0
 800096e:	e7d3      	b.n	8000918 <__gesf2+0x34>
 8000970:	2002      	movs	r0, #2
 8000972:	4240      	negs	r0, r0
 8000974:	e7d0      	b.n	8000918 <__gesf2+0x34>
 8000976:	2001      	movs	r0, #1
 8000978:	4240      	negs	r0, r0
 800097a:	e7cd      	b.n	8000918 <__gesf2+0x34>
 800097c:	428b      	cmp	r3, r1
 800097e:	d0e8      	beq.n	8000952 <__gesf2+0x6e>
 8000980:	e7db      	b.n	800093a <__gesf2+0x56>
 8000982:	46c0      	nop			@ (mov r8, r8)

08000984 <__lesf2>:
 8000984:	b530      	push	{r4, r5, lr}
 8000986:	0042      	lsls	r2, r0, #1
 8000988:	0244      	lsls	r4, r0, #9
 800098a:	024d      	lsls	r5, r1, #9
 800098c:	0fc3      	lsrs	r3, r0, #31
 800098e:	0048      	lsls	r0, r1, #1
 8000990:	0a64      	lsrs	r4, r4, #9
 8000992:	0e12      	lsrs	r2, r2, #24
 8000994:	0a6d      	lsrs	r5, r5, #9
 8000996:	0e00      	lsrs	r0, r0, #24
 8000998:	0fc9      	lsrs	r1, r1, #31
 800099a:	2aff      	cmp	r2, #255	@ 0xff
 800099c:	d01a      	beq.n	80009d4 <__lesf2+0x50>
 800099e:	28ff      	cmp	r0, #255	@ 0xff
 80009a0:	d00e      	beq.n	80009c0 <__lesf2+0x3c>
 80009a2:	2a00      	cmp	r2, #0
 80009a4:	d11e      	bne.n	80009e4 <__lesf2+0x60>
 80009a6:	2800      	cmp	r0, #0
 80009a8:	d10e      	bne.n	80009c8 <__lesf2+0x44>
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d02a      	beq.n	8000a04 <__lesf2+0x80>
 80009ae:	2c00      	cmp	r4, #0
 80009b0:	d00c      	beq.n	80009cc <__lesf2+0x48>
 80009b2:	428b      	cmp	r3, r1
 80009b4:	d01d      	beq.n	80009f2 <__lesf2+0x6e>
 80009b6:	1e58      	subs	r0, r3, #1
 80009b8:	2302      	movs	r3, #2
 80009ba:	4018      	ands	r0, r3
 80009bc:	3801      	subs	r0, #1
 80009be:	e010      	b.n	80009e2 <__lesf2+0x5e>
 80009c0:	2d00      	cmp	r5, #0
 80009c2:	d10d      	bne.n	80009e0 <__lesf2+0x5c>
 80009c4:	2a00      	cmp	r2, #0
 80009c6:	d120      	bne.n	8000a0a <__lesf2+0x86>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d11e      	bne.n	8000a0a <__lesf2+0x86>
 80009cc:	2900      	cmp	r1, #0
 80009ce:	d023      	beq.n	8000a18 <__lesf2+0x94>
 80009d0:	0008      	movs	r0, r1
 80009d2:	e006      	b.n	80009e2 <__lesf2+0x5e>
 80009d4:	2c00      	cmp	r4, #0
 80009d6:	d103      	bne.n	80009e0 <__lesf2+0x5c>
 80009d8:	28ff      	cmp	r0, #255	@ 0xff
 80009da:	d1ec      	bne.n	80009b6 <__lesf2+0x32>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d017      	beq.n	8000a10 <__lesf2+0x8c>
 80009e0:	2002      	movs	r0, #2
 80009e2:	bd30      	pop	{r4, r5, pc}
 80009e4:	2800      	cmp	r0, #0
 80009e6:	d0e6      	beq.n	80009b6 <__lesf2+0x32>
 80009e8:	428b      	cmp	r3, r1
 80009ea:	d1e4      	bne.n	80009b6 <__lesf2+0x32>
 80009ec:	4282      	cmp	r2, r0
 80009ee:	dce2      	bgt.n	80009b6 <__lesf2+0x32>
 80009f0:	db04      	blt.n	80009fc <__lesf2+0x78>
 80009f2:	42ac      	cmp	r4, r5
 80009f4:	d8df      	bhi.n	80009b6 <__lesf2+0x32>
 80009f6:	2000      	movs	r0, #0
 80009f8:	42ac      	cmp	r4, r5
 80009fa:	d2f2      	bcs.n	80009e2 <__lesf2+0x5e>
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00b      	beq.n	8000a18 <__lesf2+0x94>
 8000a00:	0018      	movs	r0, r3
 8000a02:	e7ee      	b.n	80009e2 <__lesf2+0x5e>
 8000a04:	2c00      	cmp	r4, #0
 8000a06:	d0ec      	beq.n	80009e2 <__lesf2+0x5e>
 8000a08:	e7d5      	b.n	80009b6 <__lesf2+0x32>
 8000a0a:	428b      	cmp	r3, r1
 8000a0c:	d1d3      	bne.n	80009b6 <__lesf2+0x32>
 8000a0e:	e7f5      	b.n	80009fc <__lesf2+0x78>
 8000a10:	2000      	movs	r0, #0
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d0e5      	beq.n	80009e2 <__lesf2+0x5e>
 8000a16:	e7ce      	b.n	80009b6 <__lesf2+0x32>
 8000a18:	2001      	movs	r0, #1
 8000a1a:	4240      	negs	r0, r0
 8000a1c:	e7e1      	b.n	80009e2 <__lesf2+0x5e>
 8000a1e:	46c0      	nop			@ (mov r8, r8)

08000a20 <__aeabi_fmul>:
 8000a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a22:	464f      	mov	r7, r9
 8000a24:	4646      	mov	r6, r8
 8000a26:	46d6      	mov	lr, sl
 8000a28:	0243      	lsls	r3, r0, #9
 8000a2a:	0a5b      	lsrs	r3, r3, #9
 8000a2c:	0045      	lsls	r5, r0, #1
 8000a2e:	b5c0      	push	{r6, r7, lr}
 8000a30:	4699      	mov	r9, r3
 8000a32:	1c0f      	adds	r7, r1, #0
 8000a34:	0e2d      	lsrs	r5, r5, #24
 8000a36:	0fc6      	lsrs	r6, r0, #31
 8000a38:	2d00      	cmp	r5, #0
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_fmul+0x1e>
 8000a3c:	e088      	b.n	8000b50 <__aeabi_fmul+0x130>
 8000a3e:	2dff      	cmp	r5, #255	@ 0xff
 8000a40:	d100      	bne.n	8000a44 <__aeabi_fmul+0x24>
 8000a42:	e08d      	b.n	8000b60 <__aeabi_fmul+0x140>
 8000a44:	2280      	movs	r2, #128	@ 0x80
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	04d2      	lsls	r2, r2, #19
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	4691      	mov	r9, r2
 8000a50:	4698      	mov	r8, r3
 8000a52:	469a      	mov	sl, r3
 8000a54:	3d7f      	subs	r5, #127	@ 0x7f
 8000a56:	027c      	lsls	r4, r7, #9
 8000a58:	007b      	lsls	r3, r7, #1
 8000a5a:	0a64      	lsrs	r4, r4, #9
 8000a5c:	0e1b      	lsrs	r3, r3, #24
 8000a5e:	0fff      	lsrs	r7, r7, #31
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d068      	beq.n	8000b36 <__aeabi_fmul+0x116>
 8000a64:	2bff      	cmp	r3, #255	@ 0xff
 8000a66:	d021      	beq.n	8000aac <__aeabi_fmul+0x8c>
 8000a68:	2280      	movs	r2, #128	@ 0x80
 8000a6a:	00e4      	lsls	r4, r4, #3
 8000a6c:	04d2      	lsls	r2, r2, #19
 8000a6e:	4314      	orrs	r4, r2
 8000a70:	4642      	mov	r2, r8
 8000a72:	3b7f      	subs	r3, #127	@ 0x7f
 8000a74:	195b      	adds	r3, r3, r5
 8000a76:	2100      	movs	r1, #0
 8000a78:	1c5d      	adds	r5, r3, #1
 8000a7a:	2a0a      	cmp	r2, #10
 8000a7c:	dc2e      	bgt.n	8000adc <__aeabi_fmul+0xbc>
 8000a7e:	407e      	eors	r6, r7
 8000a80:	4642      	mov	r2, r8
 8000a82:	2a02      	cmp	r2, #2
 8000a84:	dc23      	bgt.n	8000ace <__aeabi_fmul+0xae>
 8000a86:	3a01      	subs	r2, #1
 8000a88:	2a01      	cmp	r2, #1
 8000a8a:	d900      	bls.n	8000a8e <__aeabi_fmul+0x6e>
 8000a8c:	e0bd      	b.n	8000c0a <__aeabi_fmul+0x1ea>
 8000a8e:	2902      	cmp	r1, #2
 8000a90:	d06e      	beq.n	8000b70 <__aeabi_fmul+0x150>
 8000a92:	2901      	cmp	r1, #1
 8000a94:	d12c      	bne.n	8000af0 <__aeabi_fmul+0xd0>
 8000a96:	2000      	movs	r0, #0
 8000a98:	2200      	movs	r2, #0
 8000a9a:	05c0      	lsls	r0, r0, #23
 8000a9c:	07f6      	lsls	r6, r6, #31
 8000a9e:	4310      	orrs	r0, r2
 8000aa0:	4330      	orrs	r0, r6
 8000aa2:	bce0      	pop	{r5, r6, r7}
 8000aa4:	46ba      	mov	sl, r7
 8000aa6:	46b1      	mov	r9, r6
 8000aa8:	46a8      	mov	r8, r5
 8000aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aac:	002b      	movs	r3, r5
 8000aae:	33ff      	adds	r3, #255	@ 0xff
 8000ab0:	2c00      	cmp	r4, #0
 8000ab2:	d065      	beq.n	8000b80 <__aeabi_fmul+0x160>
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	4641      	mov	r1, r8
 8000ab8:	4311      	orrs	r1, r2
 8000aba:	0032      	movs	r2, r6
 8000abc:	3501      	adds	r5, #1
 8000abe:	4688      	mov	r8, r1
 8000ac0:	407a      	eors	r2, r7
 8000ac2:	35ff      	adds	r5, #255	@ 0xff
 8000ac4:	290a      	cmp	r1, #10
 8000ac6:	dd00      	ble.n	8000aca <__aeabi_fmul+0xaa>
 8000ac8:	e0d8      	b.n	8000c7c <__aeabi_fmul+0x25c>
 8000aca:	0016      	movs	r6, r2
 8000acc:	2103      	movs	r1, #3
 8000ace:	4640      	mov	r0, r8
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4082      	lsls	r2, r0
 8000ad4:	20a6      	movs	r0, #166	@ 0xa6
 8000ad6:	00c0      	lsls	r0, r0, #3
 8000ad8:	4202      	tst	r2, r0
 8000ada:	d020      	beq.n	8000b1e <__aeabi_fmul+0xfe>
 8000adc:	4653      	mov	r3, sl
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d046      	beq.n	8000b70 <__aeabi_fmul+0x150>
 8000ae2:	2b03      	cmp	r3, #3
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_fmul+0xc8>
 8000ae6:	e0bb      	b.n	8000c60 <__aeabi_fmul+0x240>
 8000ae8:	4651      	mov	r1, sl
 8000aea:	464c      	mov	r4, r9
 8000aec:	2901      	cmp	r1, #1
 8000aee:	d0d2      	beq.n	8000a96 <__aeabi_fmul+0x76>
 8000af0:	002b      	movs	r3, r5
 8000af2:	337f      	adds	r3, #127	@ 0x7f
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	dd70      	ble.n	8000bda <__aeabi_fmul+0x1ba>
 8000af8:	0762      	lsls	r2, r4, #29
 8000afa:	d004      	beq.n	8000b06 <__aeabi_fmul+0xe6>
 8000afc:	220f      	movs	r2, #15
 8000afe:	4022      	ands	r2, r4
 8000b00:	2a04      	cmp	r2, #4
 8000b02:	d000      	beq.n	8000b06 <__aeabi_fmul+0xe6>
 8000b04:	3404      	adds	r4, #4
 8000b06:	0122      	lsls	r2, r4, #4
 8000b08:	d503      	bpl.n	8000b12 <__aeabi_fmul+0xf2>
 8000b0a:	4b63      	ldr	r3, [pc, #396]	@ (8000c98 <__aeabi_fmul+0x278>)
 8000b0c:	401c      	ands	r4, r3
 8000b0e:	002b      	movs	r3, r5
 8000b10:	3380      	adds	r3, #128	@ 0x80
 8000b12:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b14:	dc2c      	bgt.n	8000b70 <__aeabi_fmul+0x150>
 8000b16:	01a2      	lsls	r2, r4, #6
 8000b18:	0a52      	lsrs	r2, r2, #9
 8000b1a:	b2d8      	uxtb	r0, r3
 8000b1c:	e7bd      	b.n	8000a9a <__aeabi_fmul+0x7a>
 8000b1e:	2090      	movs	r0, #144	@ 0x90
 8000b20:	0080      	lsls	r0, r0, #2
 8000b22:	4202      	tst	r2, r0
 8000b24:	d127      	bne.n	8000b76 <__aeabi_fmul+0x156>
 8000b26:	38b9      	subs	r0, #185	@ 0xb9
 8000b28:	38ff      	subs	r0, #255	@ 0xff
 8000b2a:	4210      	tst	r0, r2
 8000b2c:	d06d      	beq.n	8000c0a <__aeabi_fmul+0x1ea>
 8000b2e:	003e      	movs	r6, r7
 8000b30:	46a1      	mov	r9, r4
 8000b32:	468a      	mov	sl, r1
 8000b34:	e7d2      	b.n	8000adc <__aeabi_fmul+0xbc>
 8000b36:	2c00      	cmp	r4, #0
 8000b38:	d141      	bne.n	8000bbe <__aeabi_fmul+0x19e>
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	4642      	mov	r2, r8
 8000b3e:	431a      	orrs	r2, r3
 8000b40:	4690      	mov	r8, r2
 8000b42:	002b      	movs	r3, r5
 8000b44:	4642      	mov	r2, r8
 8000b46:	2101      	movs	r1, #1
 8000b48:	1c5d      	adds	r5, r3, #1
 8000b4a:	2a0a      	cmp	r2, #10
 8000b4c:	dd97      	ble.n	8000a7e <__aeabi_fmul+0x5e>
 8000b4e:	e7c5      	b.n	8000adc <__aeabi_fmul+0xbc>
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d126      	bne.n	8000ba2 <__aeabi_fmul+0x182>
 8000b54:	2304      	movs	r3, #4
 8000b56:	4698      	mov	r8, r3
 8000b58:	3b03      	subs	r3, #3
 8000b5a:	2500      	movs	r5, #0
 8000b5c:	469a      	mov	sl, r3
 8000b5e:	e77a      	b.n	8000a56 <__aeabi_fmul+0x36>
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d118      	bne.n	8000b96 <__aeabi_fmul+0x176>
 8000b64:	2308      	movs	r3, #8
 8000b66:	4698      	mov	r8, r3
 8000b68:	3b06      	subs	r3, #6
 8000b6a:	25ff      	movs	r5, #255	@ 0xff
 8000b6c:	469a      	mov	sl, r3
 8000b6e:	e772      	b.n	8000a56 <__aeabi_fmul+0x36>
 8000b70:	20ff      	movs	r0, #255	@ 0xff
 8000b72:	2200      	movs	r2, #0
 8000b74:	e791      	b.n	8000a9a <__aeabi_fmul+0x7a>
 8000b76:	2280      	movs	r2, #128	@ 0x80
 8000b78:	2600      	movs	r6, #0
 8000b7a:	20ff      	movs	r0, #255	@ 0xff
 8000b7c:	03d2      	lsls	r2, r2, #15
 8000b7e:	e78c      	b.n	8000a9a <__aeabi_fmul+0x7a>
 8000b80:	4641      	mov	r1, r8
 8000b82:	2202      	movs	r2, #2
 8000b84:	3501      	adds	r5, #1
 8000b86:	4311      	orrs	r1, r2
 8000b88:	4688      	mov	r8, r1
 8000b8a:	35ff      	adds	r5, #255	@ 0xff
 8000b8c:	290a      	cmp	r1, #10
 8000b8e:	dca5      	bgt.n	8000adc <__aeabi_fmul+0xbc>
 8000b90:	2102      	movs	r1, #2
 8000b92:	407e      	eors	r6, r7
 8000b94:	e774      	b.n	8000a80 <__aeabi_fmul+0x60>
 8000b96:	230c      	movs	r3, #12
 8000b98:	4698      	mov	r8, r3
 8000b9a:	3b09      	subs	r3, #9
 8000b9c:	25ff      	movs	r5, #255	@ 0xff
 8000b9e:	469a      	mov	sl, r3
 8000ba0:	e759      	b.n	8000a56 <__aeabi_fmul+0x36>
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f002 f9f4 	bl	8002f90 <__clzsi2>
 8000ba8:	464a      	mov	r2, r9
 8000baa:	1f43      	subs	r3, r0, #5
 8000bac:	2576      	movs	r5, #118	@ 0x76
 8000bae:	409a      	lsls	r2, r3
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	426d      	negs	r5, r5
 8000bb4:	4691      	mov	r9, r2
 8000bb6:	4698      	mov	r8, r3
 8000bb8:	469a      	mov	sl, r3
 8000bba:	1a2d      	subs	r5, r5, r0
 8000bbc:	e74b      	b.n	8000a56 <__aeabi_fmul+0x36>
 8000bbe:	0020      	movs	r0, r4
 8000bc0:	f002 f9e6 	bl	8002f90 <__clzsi2>
 8000bc4:	4642      	mov	r2, r8
 8000bc6:	1f43      	subs	r3, r0, #5
 8000bc8:	409c      	lsls	r4, r3
 8000bca:	1a2b      	subs	r3, r5, r0
 8000bcc:	3b76      	subs	r3, #118	@ 0x76
 8000bce:	2100      	movs	r1, #0
 8000bd0:	1c5d      	adds	r5, r3, #1
 8000bd2:	2a0a      	cmp	r2, #10
 8000bd4:	dc00      	bgt.n	8000bd8 <__aeabi_fmul+0x1b8>
 8000bd6:	e752      	b.n	8000a7e <__aeabi_fmul+0x5e>
 8000bd8:	e780      	b.n	8000adc <__aeabi_fmul+0xbc>
 8000bda:	2201      	movs	r2, #1
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b1b      	cmp	r3, #27
 8000be0:	dd00      	ble.n	8000be4 <__aeabi_fmul+0x1c4>
 8000be2:	e758      	b.n	8000a96 <__aeabi_fmul+0x76>
 8000be4:	359e      	adds	r5, #158	@ 0x9e
 8000be6:	0022      	movs	r2, r4
 8000be8:	40ac      	lsls	r4, r5
 8000bea:	40da      	lsrs	r2, r3
 8000bec:	1e63      	subs	r3, r4, #1
 8000bee:	419c      	sbcs	r4, r3
 8000bf0:	4322      	orrs	r2, r4
 8000bf2:	0753      	lsls	r3, r2, #29
 8000bf4:	d004      	beq.n	8000c00 <__aeabi_fmul+0x1e0>
 8000bf6:	230f      	movs	r3, #15
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	d000      	beq.n	8000c00 <__aeabi_fmul+0x1e0>
 8000bfe:	3204      	adds	r2, #4
 8000c00:	0153      	lsls	r3, r2, #5
 8000c02:	d537      	bpl.n	8000c74 <__aeabi_fmul+0x254>
 8000c04:	2001      	movs	r0, #1
 8000c06:	2200      	movs	r2, #0
 8000c08:	e747      	b.n	8000a9a <__aeabi_fmul+0x7a>
 8000c0a:	0c21      	lsrs	r1, r4, #16
 8000c0c:	464a      	mov	r2, r9
 8000c0e:	0424      	lsls	r4, r4, #16
 8000c10:	0c24      	lsrs	r4, r4, #16
 8000c12:	0027      	movs	r7, r4
 8000c14:	0c10      	lsrs	r0, r2, #16
 8000c16:	0412      	lsls	r2, r2, #16
 8000c18:	0c12      	lsrs	r2, r2, #16
 8000c1a:	4344      	muls	r4, r0
 8000c1c:	4357      	muls	r7, r2
 8000c1e:	4348      	muls	r0, r1
 8000c20:	4351      	muls	r1, r2
 8000c22:	0c3a      	lsrs	r2, r7, #16
 8000c24:	1909      	adds	r1, r1, r4
 8000c26:	1852      	adds	r2, r2, r1
 8000c28:	4294      	cmp	r4, r2
 8000c2a:	d903      	bls.n	8000c34 <__aeabi_fmul+0x214>
 8000c2c:	2180      	movs	r1, #128	@ 0x80
 8000c2e:	0249      	lsls	r1, r1, #9
 8000c30:	468c      	mov	ip, r1
 8000c32:	4460      	add	r0, ip
 8000c34:	043f      	lsls	r7, r7, #16
 8000c36:	0411      	lsls	r1, r2, #16
 8000c38:	0c3f      	lsrs	r7, r7, #16
 8000c3a:	19c9      	adds	r1, r1, r7
 8000c3c:	018c      	lsls	r4, r1, #6
 8000c3e:	1e67      	subs	r7, r4, #1
 8000c40:	41bc      	sbcs	r4, r7
 8000c42:	0c12      	lsrs	r2, r2, #16
 8000c44:	0e89      	lsrs	r1, r1, #26
 8000c46:	1812      	adds	r2, r2, r0
 8000c48:	430c      	orrs	r4, r1
 8000c4a:	0192      	lsls	r2, r2, #6
 8000c4c:	4314      	orrs	r4, r2
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	d50e      	bpl.n	8000c70 <__aeabi_fmul+0x250>
 8000c52:	2301      	movs	r3, #1
 8000c54:	0862      	lsrs	r2, r4, #1
 8000c56:	401c      	ands	r4, r3
 8000c58:	4314      	orrs	r4, r2
 8000c5a:	e749      	b.n	8000af0 <__aeabi_fmul+0xd0>
 8000c5c:	003e      	movs	r6, r7
 8000c5e:	46a1      	mov	r9, r4
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	464b      	mov	r3, r9
 8000c64:	03d2      	lsls	r2, r2, #15
 8000c66:	431a      	orrs	r2, r3
 8000c68:	0252      	lsls	r2, r2, #9
 8000c6a:	20ff      	movs	r0, #255	@ 0xff
 8000c6c:	0a52      	lsrs	r2, r2, #9
 8000c6e:	e714      	b.n	8000a9a <__aeabi_fmul+0x7a>
 8000c70:	001d      	movs	r5, r3
 8000c72:	e73d      	b.n	8000af0 <__aeabi_fmul+0xd0>
 8000c74:	0192      	lsls	r2, r2, #6
 8000c76:	2000      	movs	r0, #0
 8000c78:	0a52      	lsrs	r2, r2, #9
 8000c7a:	e70e      	b.n	8000a9a <__aeabi_fmul+0x7a>
 8000c7c:	290f      	cmp	r1, #15
 8000c7e:	d1ed      	bne.n	8000c5c <__aeabi_fmul+0x23c>
 8000c80:	2280      	movs	r2, #128	@ 0x80
 8000c82:	464b      	mov	r3, r9
 8000c84:	03d2      	lsls	r2, r2, #15
 8000c86:	4213      	tst	r3, r2
 8000c88:	d0ea      	beq.n	8000c60 <__aeabi_fmul+0x240>
 8000c8a:	4214      	tst	r4, r2
 8000c8c:	d1e8      	bne.n	8000c60 <__aeabi_fmul+0x240>
 8000c8e:	003e      	movs	r6, r7
 8000c90:	20ff      	movs	r0, #255	@ 0xff
 8000c92:	4322      	orrs	r2, r4
 8000c94:	e701      	b.n	8000a9a <__aeabi_fmul+0x7a>
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	f7ffffff 	.word	0xf7ffffff

08000c9c <__aeabi_fsub>:
 8000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9e:	4647      	mov	r7, r8
 8000ca0:	46ce      	mov	lr, r9
 8000ca2:	024e      	lsls	r6, r1, #9
 8000ca4:	0243      	lsls	r3, r0, #9
 8000ca6:	0045      	lsls	r5, r0, #1
 8000ca8:	0a72      	lsrs	r2, r6, #9
 8000caa:	0fc4      	lsrs	r4, r0, #31
 8000cac:	0048      	lsls	r0, r1, #1
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	4694      	mov	ip, r2
 8000cb2:	0a5f      	lsrs	r7, r3, #9
 8000cb4:	0e2d      	lsrs	r5, r5, #24
 8000cb6:	099b      	lsrs	r3, r3, #6
 8000cb8:	0e00      	lsrs	r0, r0, #24
 8000cba:	0fc9      	lsrs	r1, r1, #31
 8000cbc:	09b6      	lsrs	r6, r6, #6
 8000cbe:	28ff      	cmp	r0, #255	@ 0xff
 8000cc0:	d024      	beq.n	8000d0c <__aeabi_fsub+0x70>
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4051      	eors	r1, r2
 8000cc6:	1a2a      	subs	r2, r5, r0
 8000cc8:	428c      	cmp	r4, r1
 8000cca:	d00f      	beq.n	8000cec <__aeabi_fsub+0x50>
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	dc00      	bgt.n	8000cd2 <__aeabi_fsub+0x36>
 8000cd0:	e16a      	b.n	8000fa8 <__aeabi_fsub+0x30c>
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	d135      	bne.n	8000d42 <__aeabi_fsub+0xa6>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_fsub+0x40>
 8000cda:	e0a2      	b.n	8000e22 <__aeabi_fsub+0x186>
 8000cdc:	1e51      	subs	r1, r2, #1
 8000cde:	2a01      	cmp	r2, #1
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_fsub+0x48>
 8000ce2:	e124      	b.n	8000f2e <__aeabi_fsub+0x292>
 8000ce4:	2aff      	cmp	r2, #255	@ 0xff
 8000ce6:	d021      	beq.n	8000d2c <__aeabi_fsub+0x90>
 8000ce8:	000a      	movs	r2, r1
 8000cea:	e02f      	b.n	8000d4c <__aeabi_fsub+0xb0>
 8000cec:	2a00      	cmp	r2, #0
 8000cee:	dc00      	bgt.n	8000cf2 <__aeabi_fsub+0x56>
 8000cf0:	e167      	b.n	8000fc2 <__aeabi_fsub+0x326>
 8000cf2:	2800      	cmp	r0, #0
 8000cf4:	d05e      	beq.n	8000db4 <__aeabi_fsub+0x118>
 8000cf6:	2dff      	cmp	r5, #255	@ 0xff
 8000cf8:	d018      	beq.n	8000d2c <__aeabi_fsub+0x90>
 8000cfa:	2180      	movs	r1, #128	@ 0x80
 8000cfc:	04c9      	lsls	r1, r1, #19
 8000cfe:	430e      	orrs	r6, r1
 8000d00:	2a1b      	cmp	r2, #27
 8000d02:	dc00      	bgt.n	8000d06 <__aeabi_fsub+0x6a>
 8000d04:	e076      	b.n	8000df4 <__aeabi_fsub+0x158>
 8000d06:	002a      	movs	r2, r5
 8000d08:	3301      	adds	r3, #1
 8000d0a:	e032      	b.n	8000d72 <__aeabi_fsub+0xd6>
 8000d0c:	002a      	movs	r2, r5
 8000d0e:	3aff      	subs	r2, #255	@ 0xff
 8000d10:	4691      	mov	r9, r2
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d042      	beq.n	8000d9c <__aeabi_fsub+0x100>
 8000d16:	428c      	cmp	r4, r1
 8000d18:	d055      	beq.n	8000dc6 <__aeabi_fsub+0x12a>
 8000d1a:	464a      	mov	r2, r9
 8000d1c:	2a00      	cmp	r2, #0
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_fsub+0x86>
 8000d20:	e09c      	b.n	8000e5c <__aeabi_fsub+0x1c0>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d100      	bne.n	8000d28 <__aeabi_fsub+0x8c>
 8000d26:	e077      	b.n	8000e18 <__aeabi_fsub+0x17c>
 8000d28:	000c      	movs	r4, r1
 8000d2a:	0033      	movs	r3, r6
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x98>
 8000d32:	e06e      	b.n	8000e12 <__aeabi_fsub+0x176>
 8000d34:	2280      	movs	r2, #128	@ 0x80
 8000d36:	03d2      	lsls	r2, r2, #15
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	20ff      	movs	r0, #255	@ 0xff
 8000d3e:	0a5b      	lsrs	r3, r3, #9
 8000d40:	e024      	b.n	8000d8c <__aeabi_fsub+0xf0>
 8000d42:	2dff      	cmp	r5, #255	@ 0xff
 8000d44:	d0f2      	beq.n	8000d2c <__aeabi_fsub+0x90>
 8000d46:	2180      	movs	r1, #128	@ 0x80
 8000d48:	04c9      	lsls	r1, r1, #19
 8000d4a:	430e      	orrs	r6, r1
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	2a1b      	cmp	r2, #27
 8000d50:	dc08      	bgt.n	8000d64 <__aeabi_fsub+0xc8>
 8000d52:	0031      	movs	r1, r6
 8000d54:	2020      	movs	r0, #32
 8000d56:	40d1      	lsrs	r1, r2
 8000d58:	1a82      	subs	r2, r0, r2
 8000d5a:	4096      	lsls	r6, r2
 8000d5c:	0032      	movs	r2, r6
 8000d5e:	1e50      	subs	r0, r2, #1
 8000d60:	4182      	sbcs	r2, r0
 8000d62:	4311      	orrs	r1, r2
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	015a      	lsls	r2, r3, #5
 8000d68:	d460      	bmi.n	8000e2c <__aeabi_fsub+0x190>
 8000d6a:	2107      	movs	r1, #7
 8000d6c:	002a      	movs	r2, r5
 8000d6e:	4019      	ands	r1, r3
 8000d70:	d057      	beq.n	8000e22 <__aeabi_fsub+0x186>
 8000d72:	210f      	movs	r1, #15
 8000d74:	4019      	ands	r1, r3
 8000d76:	2904      	cmp	r1, #4
 8000d78:	d000      	beq.n	8000d7c <__aeabi_fsub+0xe0>
 8000d7a:	3304      	adds	r3, #4
 8000d7c:	0159      	lsls	r1, r3, #5
 8000d7e:	d550      	bpl.n	8000e22 <__aeabi_fsub+0x186>
 8000d80:	1c50      	adds	r0, r2, #1
 8000d82:	2afe      	cmp	r2, #254	@ 0xfe
 8000d84:	d045      	beq.n	8000e12 <__aeabi_fsub+0x176>
 8000d86:	019b      	lsls	r3, r3, #6
 8000d88:	b2c0      	uxtb	r0, r0
 8000d8a:	0a5b      	lsrs	r3, r3, #9
 8000d8c:	05c0      	lsls	r0, r0, #23
 8000d8e:	4318      	orrs	r0, r3
 8000d90:	07e4      	lsls	r4, r4, #31
 8000d92:	4320      	orrs	r0, r4
 8000d94:	bcc0      	pop	{r6, r7}
 8000d96:	46b9      	mov	r9, r7
 8000d98:	46b0      	mov	r8, r6
 8000d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4051      	eors	r1, r2
 8000da0:	428c      	cmp	r4, r1
 8000da2:	d1ba      	bne.n	8000d1a <__aeabi_fsub+0x7e>
 8000da4:	464a      	mov	r2, r9
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d010      	beq.n	8000dcc <__aeabi_fsub+0x130>
 8000daa:	2d00      	cmp	r5, #0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_fsub+0x114>
 8000dae:	e098      	b.n	8000ee2 <__aeabi_fsub+0x246>
 8000db0:	2300      	movs	r3, #0
 8000db2:	e7bb      	b.n	8000d2c <__aeabi_fsub+0x90>
 8000db4:	2e00      	cmp	r6, #0
 8000db6:	d034      	beq.n	8000e22 <__aeabi_fsub+0x186>
 8000db8:	1e51      	subs	r1, r2, #1
 8000dba:	2a01      	cmp	r2, #1
 8000dbc:	d06e      	beq.n	8000e9c <__aeabi_fsub+0x200>
 8000dbe:	2aff      	cmp	r2, #255	@ 0xff
 8000dc0:	d0b4      	beq.n	8000d2c <__aeabi_fsub+0x90>
 8000dc2:	000a      	movs	r2, r1
 8000dc4:	e79c      	b.n	8000d00 <__aeabi_fsub+0x64>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	d000      	beq.n	8000dcc <__aeabi_fsub+0x130>
 8000dca:	e088      	b.n	8000ede <__aeabi_fsub+0x242>
 8000dcc:	20fe      	movs	r0, #254	@ 0xfe
 8000dce:	1c6a      	adds	r2, r5, #1
 8000dd0:	4210      	tst	r0, r2
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_fsub+0x13a>
 8000dd4:	e092      	b.n	8000efc <__aeabi_fsub+0x260>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d000      	beq.n	8000ddc <__aeabi_fsub+0x140>
 8000dda:	e0a4      	b.n	8000f26 <__aeabi_fsub+0x28a>
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d100      	bne.n	8000de2 <__aeabi_fsub+0x146>
 8000de0:	e0cb      	b.n	8000f7a <__aeabi_fsub+0x2de>
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fsub+0x14c>
 8000de6:	e0ca      	b.n	8000f7e <__aeabi_fsub+0x2e2>
 8000de8:	2200      	movs	r2, #0
 8000dea:	08db      	lsrs	r3, r3, #3
 8000dec:	025b      	lsls	r3, r3, #9
 8000dee:	0a5b      	lsrs	r3, r3, #9
 8000df0:	b2d0      	uxtb	r0, r2
 8000df2:	e7cb      	b.n	8000d8c <__aeabi_fsub+0xf0>
 8000df4:	0031      	movs	r1, r6
 8000df6:	2020      	movs	r0, #32
 8000df8:	40d1      	lsrs	r1, r2
 8000dfa:	1a82      	subs	r2, r0, r2
 8000dfc:	4096      	lsls	r6, r2
 8000dfe:	0032      	movs	r2, r6
 8000e00:	1e50      	subs	r0, r2, #1
 8000e02:	4182      	sbcs	r2, r0
 8000e04:	430a      	orrs	r2, r1
 8000e06:	189b      	adds	r3, r3, r2
 8000e08:	015a      	lsls	r2, r3, #5
 8000e0a:	d5ae      	bpl.n	8000d6a <__aeabi_fsub+0xce>
 8000e0c:	1c6a      	adds	r2, r5, #1
 8000e0e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000e10:	d14a      	bne.n	8000ea8 <__aeabi_fsub+0x20c>
 8000e12:	20ff      	movs	r0, #255	@ 0xff
 8000e14:	2300      	movs	r3, #0
 8000e16:	e7b9      	b.n	8000d8c <__aeabi_fsub+0xf0>
 8000e18:	22ff      	movs	r2, #255	@ 0xff
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d14b      	bne.n	8000eb6 <__aeabi_fsub+0x21a>
 8000e1e:	000c      	movs	r4, r1
 8000e20:	0033      	movs	r3, r6
 8000e22:	08db      	lsrs	r3, r3, #3
 8000e24:	2aff      	cmp	r2, #255	@ 0xff
 8000e26:	d100      	bne.n	8000e2a <__aeabi_fsub+0x18e>
 8000e28:	e781      	b.n	8000d2e <__aeabi_fsub+0x92>
 8000e2a:	e7df      	b.n	8000dec <__aeabi_fsub+0x150>
 8000e2c:	019f      	lsls	r7, r3, #6
 8000e2e:	09bf      	lsrs	r7, r7, #6
 8000e30:	0038      	movs	r0, r7
 8000e32:	f002 f8ad 	bl	8002f90 <__clzsi2>
 8000e36:	3805      	subs	r0, #5
 8000e38:	4087      	lsls	r7, r0
 8000e3a:	4285      	cmp	r5, r0
 8000e3c:	dc21      	bgt.n	8000e82 <__aeabi_fsub+0x1e6>
 8000e3e:	003b      	movs	r3, r7
 8000e40:	2120      	movs	r1, #32
 8000e42:	1b42      	subs	r2, r0, r5
 8000e44:	3201      	adds	r2, #1
 8000e46:	40d3      	lsrs	r3, r2
 8000e48:	1a8a      	subs	r2, r1, r2
 8000e4a:	4097      	lsls	r7, r2
 8000e4c:	1e7a      	subs	r2, r7, #1
 8000e4e:	4197      	sbcs	r7, r2
 8000e50:	2200      	movs	r2, #0
 8000e52:	433b      	orrs	r3, r7
 8000e54:	0759      	lsls	r1, r3, #29
 8000e56:	d000      	beq.n	8000e5a <__aeabi_fsub+0x1be>
 8000e58:	e78b      	b.n	8000d72 <__aeabi_fsub+0xd6>
 8000e5a:	e78f      	b.n	8000d7c <__aeabi_fsub+0xe0>
 8000e5c:	20fe      	movs	r0, #254	@ 0xfe
 8000e5e:	1c6a      	adds	r2, r5, #1
 8000e60:	4210      	tst	r0, r2
 8000e62:	d112      	bne.n	8000e8a <__aeabi_fsub+0x1ee>
 8000e64:	2d00      	cmp	r5, #0
 8000e66:	d152      	bne.n	8000f0e <__aeabi_fsub+0x272>
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d07c      	beq.n	8000f66 <__aeabi_fsub+0x2ca>
 8000e6c:	2e00      	cmp	r6, #0
 8000e6e:	d0bb      	beq.n	8000de8 <__aeabi_fsub+0x14c>
 8000e70:	1b9a      	subs	r2, r3, r6
 8000e72:	0150      	lsls	r0, r2, #5
 8000e74:	d400      	bmi.n	8000e78 <__aeabi_fsub+0x1dc>
 8000e76:	e08b      	b.n	8000f90 <__aeabi_fsub+0x2f4>
 8000e78:	2401      	movs	r4, #1
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	1af3      	subs	r3, r6, r3
 8000e7e:	400c      	ands	r4, r1
 8000e80:	e7e8      	b.n	8000e54 <__aeabi_fsub+0x1b8>
 8000e82:	4b56      	ldr	r3, [pc, #344]	@ (8000fdc <__aeabi_fsub+0x340>)
 8000e84:	1a2a      	subs	r2, r5, r0
 8000e86:	403b      	ands	r3, r7
 8000e88:	e7e4      	b.n	8000e54 <__aeabi_fsub+0x1b8>
 8000e8a:	1b9f      	subs	r7, r3, r6
 8000e8c:	017a      	lsls	r2, r7, #5
 8000e8e:	d446      	bmi.n	8000f1e <__aeabi_fsub+0x282>
 8000e90:	2f00      	cmp	r7, #0
 8000e92:	d1cd      	bne.n	8000e30 <__aeabi_fsub+0x194>
 8000e94:	2400      	movs	r4, #0
 8000e96:	2000      	movs	r0, #0
 8000e98:	2300      	movs	r3, #0
 8000e9a:	e777      	b.n	8000d8c <__aeabi_fsub+0xf0>
 8000e9c:	199b      	adds	r3, r3, r6
 8000e9e:	2501      	movs	r5, #1
 8000ea0:	3201      	adds	r2, #1
 8000ea2:	0159      	lsls	r1, r3, #5
 8000ea4:	d400      	bmi.n	8000ea8 <__aeabi_fsub+0x20c>
 8000ea6:	e760      	b.n	8000d6a <__aeabi_fsub+0xce>
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	484d      	ldr	r0, [pc, #308]	@ (8000fe0 <__aeabi_fsub+0x344>)
 8000eac:	4019      	ands	r1, r3
 8000eae:	085b      	lsrs	r3, r3, #1
 8000eb0:	4003      	ands	r3, r0
 8000eb2:	430b      	orrs	r3, r1
 8000eb4:	e7ce      	b.n	8000e54 <__aeabi_fsub+0x1b8>
 8000eb6:	1e57      	subs	r7, r2, #1
 8000eb8:	2a01      	cmp	r2, #1
 8000eba:	d05a      	beq.n	8000f72 <__aeabi_fsub+0x2d6>
 8000ebc:	000c      	movs	r4, r1
 8000ebe:	2aff      	cmp	r2, #255	@ 0xff
 8000ec0:	d033      	beq.n	8000f2a <__aeabi_fsub+0x28e>
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2f1b      	cmp	r7, #27
 8000ec6:	dc07      	bgt.n	8000ed8 <__aeabi_fsub+0x23c>
 8000ec8:	2120      	movs	r1, #32
 8000eca:	1bc9      	subs	r1, r1, r7
 8000ecc:	001a      	movs	r2, r3
 8000ece:	408b      	lsls	r3, r1
 8000ed0:	40fa      	lsrs	r2, r7
 8000ed2:	1e59      	subs	r1, r3, #1
 8000ed4:	418b      	sbcs	r3, r1
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	0005      	movs	r5, r0
 8000eda:	1ab3      	subs	r3, r6, r2
 8000edc:	e743      	b.n	8000d66 <__aeabi_fsub+0xca>
 8000ede:	2d00      	cmp	r5, #0
 8000ee0:	d123      	bne.n	8000f2a <__aeabi_fsub+0x28e>
 8000ee2:	22ff      	movs	r2, #255	@ 0xff
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d09b      	beq.n	8000e20 <__aeabi_fsub+0x184>
 8000ee8:	1e51      	subs	r1, r2, #1
 8000eea:	2a01      	cmp	r2, #1
 8000eec:	d0d6      	beq.n	8000e9c <__aeabi_fsub+0x200>
 8000eee:	2aff      	cmp	r2, #255	@ 0xff
 8000ef0:	d01b      	beq.n	8000f2a <__aeabi_fsub+0x28e>
 8000ef2:	291b      	cmp	r1, #27
 8000ef4:	dd2c      	ble.n	8000f50 <__aeabi_fsub+0x2b4>
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	1c73      	adds	r3, r6, #1
 8000efa:	e73a      	b.n	8000d72 <__aeabi_fsub+0xd6>
 8000efc:	2aff      	cmp	r2, #255	@ 0xff
 8000efe:	d088      	beq.n	8000e12 <__aeabi_fsub+0x176>
 8000f00:	199b      	adds	r3, r3, r6
 8000f02:	085b      	lsrs	r3, r3, #1
 8000f04:	0759      	lsls	r1, r3, #29
 8000f06:	d000      	beq.n	8000f0a <__aeabi_fsub+0x26e>
 8000f08:	e733      	b.n	8000d72 <__aeabi_fsub+0xd6>
 8000f0a:	08db      	lsrs	r3, r3, #3
 8000f0c:	e76e      	b.n	8000dec <__aeabi_fsub+0x150>
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d110      	bne.n	8000f34 <__aeabi_fsub+0x298>
 8000f12:	2e00      	cmp	r6, #0
 8000f14:	d043      	beq.n	8000f9e <__aeabi_fsub+0x302>
 8000f16:	2401      	movs	r4, #1
 8000f18:	0033      	movs	r3, r6
 8000f1a:	400c      	ands	r4, r1
 8000f1c:	e706      	b.n	8000d2c <__aeabi_fsub+0x90>
 8000f1e:	2401      	movs	r4, #1
 8000f20:	1af7      	subs	r7, r6, r3
 8000f22:	400c      	ands	r4, r1
 8000f24:	e784      	b.n	8000e30 <__aeabi_fsub+0x194>
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d104      	bne.n	8000f34 <__aeabi_fsub+0x298>
 8000f2a:	0033      	movs	r3, r6
 8000f2c:	e6fe      	b.n	8000d2c <__aeabi_fsub+0x90>
 8000f2e:	2501      	movs	r5, #1
 8000f30:	1b9b      	subs	r3, r3, r6
 8000f32:	e718      	b.n	8000d66 <__aeabi_fsub+0xca>
 8000f34:	2e00      	cmp	r6, #0
 8000f36:	d100      	bne.n	8000f3a <__aeabi_fsub+0x29e>
 8000f38:	e6f8      	b.n	8000d2c <__aeabi_fsub+0x90>
 8000f3a:	2280      	movs	r2, #128	@ 0x80
 8000f3c:	03d2      	lsls	r2, r2, #15
 8000f3e:	4297      	cmp	r7, r2
 8000f40:	d304      	bcc.n	8000f4c <__aeabi_fsub+0x2b0>
 8000f42:	4594      	cmp	ip, r2
 8000f44:	d202      	bcs.n	8000f4c <__aeabi_fsub+0x2b0>
 8000f46:	2401      	movs	r4, #1
 8000f48:	0033      	movs	r3, r6
 8000f4a:	400c      	ands	r4, r1
 8000f4c:	08db      	lsrs	r3, r3, #3
 8000f4e:	e6f1      	b.n	8000d34 <__aeabi_fsub+0x98>
 8000f50:	001a      	movs	r2, r3
 8000f52:	2520      	movs	r5, #32
 8000f54:	40ca      	lsrs	r2, r1
 8000f56:	1a69      	subs	r1, r5, r1
 8000f58:	408b      	lsls	r3, r1
 8000f5a:	1e59      	subs	r1, r3, #1
 8000f5c:	418b      	sbcs	r3, r1
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	0005      	movs	r5, r0
 8000f62:	199b      	adds	r3, r3, r6
 8000f64:	e750      	b.n	8000e08 <__aeabi_fsub+0x16c>
 8000f66:	2e00      	cmp	r6, #0
 8000f68:	d094      	beq.n	8000e94 <__aeabi_fsub+0x1f8>
 8000f6a:	2401      	movs	r4, #1
 8000f6c:	0033      	movs	r3, r6
 8000f6e:	400c      	ands	r4, r1
 8000f70:	e73a      	b.n	8000de8 <__aeabi_fsub+0x14c>
 8000f72:	000c      	movs	r4, r1
 8000f74:	2501      	movs	r5, #1
 8000f76:	1af3      	subs	r3, r6, r3
 8000f78:	e6f5      	b.n	8000d66 <__aeabi_fsub+0xca>
 8000f7a:	0033      	movs	r3, r6
 8000f7c:	e734      	b.n	8000de8 <__aeabi_fsub+0x14c>
 8000f7e:	199b      	adds	r3, r3, r6
 8000f80:	2200      	movs	r2, #0
 8000f82:	0159      	lsls	r1, r3, #5
 8000f84:	d5c1      	bpl.n	8000f0a <__aeabi_fsub+0x26e>
 8000f86:	4a15      	ldr	r2, [pc, #84]	@ (8000fdc <__aeabi_fsub+0x340>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	08db      	lsrs	r3, r3, #3
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	e72d      	b.n	8000dec <__aeabi_fsub+0x150>
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	d100      	bne.n	8000f96 <__aeabi_fsub+0x2fa>
 8000f94:	e77e      	b.n	8000e94 <__aeabi_fsub+0x1f8>
 8000f96:	0013      	movs	r3, r2
 8000f98:	2200      	movs	r2, #0
 8000f9a:	08db      	lsrs	r3, r3, #3
 8000f9c:	e726      	b.n	8000dec <__aeabi_fsub+0x150>
 8000f9e:	2380      	movs	r3, #128	@ 0x80
 8000fa0:	2400      	movs	r4, #0
 8000fa2:	20ff      	movs	r0, #255	@ 0xff
 8000fa4:	03db      	lsls	r3, r3, #15
 8000fa6:	e6f1      	b.n	8000d8c <__aeabi_fsub+0xf0>
 8000fa8:	2a00      	cmp	r2, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_fsub+0x312>
 8000fac:	e756      	b.n	8000e5c <__aeabi_fsub+0x1c0>
 8000fae:	1b47      	subs	r7, r0, r5
 8000fb0:	003a      	movs	r2, r7
 8000fb2:	2d00      	cmp	r5, #0
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_fsub+0x31c>
 8000fb6:	e730      	b.n	8000e1a <__aeabi_fsub+0x17e>
 8000fb8:	2280      	movs	r2, #128	@ 0x80
 8000fba:	04d2      	lsls	r2, r2, #19
 8000fbc:	000c      	movs	r4, r1
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	e77f      	b.n	8000ec2 <__aeabi_fsub+0x226>
 8000fc2:	2a00      	cmp	r2, #0
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_fsub+0x32c>
 8000fc6:	e701      	b.n	8000dcc <__aeabi_fsub+0x130>
 8000fc8:	1b41      	subs	r1, r0, r5
 8000fca:	2d00      	cmp	r5, #0
 8000fcc:	d101      	bne.n	8000fd2 <__aeabi_fsub+0x336>
 8000fce:	000a      	movs	r2, r1
 8000fd0:	e788      	b.n	8000ee4 <__aeabi_fsub+0x248>
 8000fd2:	2280      	movs	r2, #128	@ 0x80
 8000fd4:	04d2      	lsls	r2, r2, #19
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	e78b      	b.n	8000ef2 <__aeabi_fsub+0x256>
 8000fda:	46c0      	nop			@ (mov r8, r8)
 8000fdc:	fbffffff 	.word	0xfbffffff
 8000fe0:	7dffffff 	.word	0x7dffffff

08000fe4 <__aeabi_f2iz>:
 8000fe4:	0241      	lsls	r1, r0, #9
 8000fe6:	0042      	lsls	r2, r0, #1
 8000fe8:	0fc3      	lsrs	r3, r0, #31
 8000fea:	0a49      	lsrs	r1, r1, #9
 8000fec:	2000      	movs	r0, #0
 8000fee:	0e12      	lsrs	r2, r2, #24
 8000ff0:	2a7e      	cmp	r2, #126	@ 0x7e
 8000ff2:	dd03      	ble.n	8000ffc <__aeabi_f2iz+0x18>
 8000ff4:	2a9d      	cmp	r2, #157	@ 0x9d
 8000ff6:	dd02      	ble.n	8000ffe <__aeabi_f2iz+0x1a>
 8000ff8:	4a09      	ldr	r2, [pc, #36]	@ (8001020 <__aeabi_f2iz+0x3c>)
 8000ffa:	1898      	adds	r0, r3, r2
 8000ffc:	4770      	bx	lr
 8000ffe:	2080      	movs	r0, #128	@ 0x80
 8001000:	0400      	lsls	r0, r0, #16
 8001002:	4301      	orrs	r1, r0
 8001004:	2a95      	cmp	r2, #149	@ 0x95
 8001006:	dc07      	bgt.n	8001018 <__aeabi_f2iz+0x34>
 8001008:	2096      	movs	r0, #150	@ 0x96
 800100a:	1a82      	subs	r2, r0, r2
 800100c:	40d1      	lsrs	r1, r2
 800100e:	4248      	negs	r0, r1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f3      	bne.n	8000ffc <__aeabi_f2iz+0x18>
 8001014:	0008      	movs	r0, r1
 8001016:	e7f1      	b.n	8000ffc <__aeabi_f2iz+0x18>
 8001018:	3a96      	subs	r2, #150	@ 0x96
 800101a:	4091      	lsls	r1, r2
 800101c:	e7f7      	b.n	800100e <__aeabi_f2iz+0x2a>
 800101e:	46c0      	nop			@ (mov r8, r8)
 8001020:	7fffffff 	.word	0x7fffffff

08001024 <__aeabi_i2f>:
 8001024:	b570      	push	{r4, r5, r6, lr}
 8001026:	2800      	cmp	r0, #0
 8001028:	d013      	beq.n	8001052 <__aeabi_i2f+0x2e>
 800102a:	17c3      	asrs	r3, r0, #31
 800102c:	18c5      	adds	r5, r0, r3
 800102e:	405d      	eors	r5, r3
 8001030:	0fc4      	lsrs	r4, r0, #31
 8001032:	0028      	movs	r0, r5
 8001034:	f001 ffac 	bl	8002f90 <__clzsi2>
 8001038:	239e      	movs	r3, #158	@ 0x9e
 800103a:	0001      	movs	r1, r0
 800103c:	1a1b      	subs	r3, r3, r0
 800103e:	2b96      	cmp	r3, #150	@ 0x96
 8001040:	dc0f      	bgt.n	8001062 <__aeabi_i2f+0x3e>
 8001042:	2808      	cmp	r0, #8
 8001044:	d034      	beq.n	80010b0 <__aeabi_i2f+0x8c>
 8001046:	3908      	subs	r1, #8
 8001048:	408d      	lsls	r5, r1
 800104a:	026d      	lsls	r5, r5, #9
 800104c:	0a6d      	lsrs	r5, r5, #9
 800104e:	b2d8      	uxtb	r0, r3
 8001050:	e002      	b.n	8001058 <__aeabi_i2f+0x34>
 8001052:	2400      	movs	r4, #0
 8001054:	2000      	movs	r0, #0
 8001056:	2500      	movs	r5, #0
 8001058:	05c0      	lsls	r0, r0, #23
 800105a:	4328      	orrs	r0, r5
 800105c:	07e4      	lsls	r4, r4, #31
 800105e:	4320      	orrs	r0, r4
 8001060:	bd70      	pop	{r4, r5, r6, pc}
 8001062:	2b99      	cmp	r3, #153	@ 0x99
 8001064:	dc16      	bgt.n	8001094 <__aeabi_i2f+0x70>
 8001066:	1f42      	subs	r2, r0, #5
 8001068:	2805      	cmp	r0, #5
 800106a:	d000      	beq.n	800106e <__aeabi_i2f+0x4a>
 800106c:	4095      	lsls	r5, r2
 800106e:	002a      	movs	r2, r5
 8001070:	4811      	ldr	r0, [pc, #68]	@ (80010b8 <__aeabi_i2f+0x94>)
 8001072:	4002      	ands	r2, r0
 8001074:	076e      	lsls	r6, r5, #29
 8001076:	d009      	beq.n	800108c <__aeabi_i2f+0x68>
 8001078:	260f      	movs	r6, #15
 800107a:	4035      	ands	r5, r6
 800107c:	2d04      	cmp	r5, #4
 800107e:	d005      	beq.n	800108c <__aeabi_i2f+0x68>
 8001080:	3204      	adds	r2, #4
 8001082:	0155      	lsls	r5, r2, #5
 8001084:	d502      	bpl.n	800108c <__aeabi_i2f+0x68>
 8001086:	239f      	movs	r3, #159	@ 0x9f
 8001088:	4002      	ands	r2, r0
 800108a:	1a5b      	subs	r3, r3, r1
 800108c:	0192      	lsls	r2, r2, #6
 800108e:	0a55      	lsrs	r5, r2, #9
 8001090:	b2d8      	uxtb	r0, r3
 8001092:	e7e1      	b.n	8001058 <__aeabi_i2f+0x34>
 8001094:	2205      	movs	r2, #5
 8001096:	1a12      	subs	r2, r2, r0
 8001098:	0028      	movs	r0, r5
 800109a:	40d0      	lsrs	r0, r2
 800109c:	0002      	movs	r2, r0
 800109e:	0008      	movs	r0, r1
 80010a0:	301b      	adds	r0, #27
 80010a2:	4085      	lsls	r5, r0
 80010a4:	0028      	movs	r0, r5
 80010a6:	1e45      	subs	r5, r0, #1
 80010a8:	41a8      	sbcs	r0, r5
 80010aa:	4302      	orrs	r2, r0
 80010ac:	0015      	movs	r5, r2
 80010ae:	e7de      	b.n	800106e <__aeabi_i2f+0x4a>
 80010b0:	026d      	lsls	r5, r5, #9
 80010b2:	2096      	movs	r0, #150	@ 0x96
 80010b4:	0a6d      	lsrs	r5, r5, #9
 80010b6:	e7cf      	b.n	8001058 <__aeabi_i2f+0x34>
 80010b8:	fbffffff 	.word	0xfbffffff

080010bc <__aeabi_ui2f>:
 80010bc:	b570      	push	{r4, r5, r6, lr}
 80010be:	1e04      	subs	r4, r0, #0
 80010c0:	d00e      	beq.n	80010e0 <__aeabi_ui2f+0x24>
 80010c2:	f001 ff65 	bl	8002f90 <__clzsi2>
 80010c6:	239e      	movs	r3, #158	@ 0x9e
 80010c8:	0001      	movs	r1, r0
 80010ca:	1a1b      	subs	r3, r3, r0
 80010cc:	2b96      	cmp	r3, #150	@ 0x96
 80010ce:	dc0c      	bgt.n	80010ea <__aeabi_ui2f+0x2e>
 80010d0:	2808      	cmp	r0, #8
 80010d2:	d02f      	beq.n	8001134 <__aeabi_ui2f+0x78>
 80010d4:	3908      	subs	r1, #8
 80010d6:	408c      	lsls	r4, r1
 80010d8:	0264      	lsls	r4, r4, #9
 80010da:	0a64      	lsrs	r4, r4, #9
 80010dc:	b2d8      	uxtb	r0, r3
 80010de:	e001      	b.n	80010e4 <__aeabi_ui2f+0x28>
 80010e0:	2000      	movs	r0, #0
 80010e2:	2400      	movs	r4, #0
 80010e4:	05c0      	lsls	r0, r0, #23
 80010e6:	4320      	orrs	r0, r4
 80010e8:	bd70      	pop	{r4, r5, r6, pc}
 80010ea:	2b99      	cmp	r3, #153	@ 0x99
 80010ec:	dc16      	bgt.n	800111c <__aeabi_ui2f+0x60>
 80010ee:	1f42      	subs	r2, r0, #5
 80010f0:	2805      	cmp	r0, #5
 80010f2:	d000      	beq.n	80010f6 <__aeabi_ui2f+0x3a>
 80010f4:	4094      	lsls	r4, r2
 80010f6:	0022      	movs	r2, r4
 80010f8:	4810      	ldr	r0, [pc, #64]	@ (800113c <__aeabi_ui2f+0x80>)
 80010fa:	4002      	ands	r2, r0
 80010fc:	0765      	lsls	r5, r4, #29
 80010fe:	d009      	beq.n	8001114 <__aeabi_ui2f+0x58>
 8001100:	250f      	movs	r5, #15
 8001102:	402c      	ands	r4, r5
 8001104:	2c04      	cmp	r4, #4
 8001106:	d005      	beq.n	8001114 <__aeabi_ui2f+0x58>
 8001108:	3204      	adds	r2, #4
 800110a:	0154      	lsls	r4, r2, #5
 800110c:	d502      	bpl.n	8001114 <__aeabi_ui2f+0x58>
 800110e:	239f      	movs	r3, #159	@ 0x9f
 8001110:	4002      	ands	r2, r0
 8001112:	1a5b      	subs	r3, r3, r1
 8001114:	0192      	lsls	r2, r2, #6
 8001116:	0a54      	lsrs	r4, r2, #9
 8001118:	b2d8      	uxtb	r0, r3
 800111a:	e7e3      	b.n	80010e4 <__aeabi_ui2f+0x28>
 800111c:	0002      	movs	r2, r0
 800111e:	0020      	movs	r0, r4
 8001120:	321b      	adds	r2, #27
 8001122:	4090      	lsls	r0, r2
 8001124:	0002      	movs	r2, r0
 8001126:	1e50      	subs	r0, r2, #1
 8001128:	4182      	sbcs	r2, r0
 800112a:	2005      	movs	r0, #5
 800112c:	1a40      	subs	r0, r0, r1
 800112e:	40c4      	lsrs	r4, r0
 8001130:	4314      	orrs	r4, r2
 8001132:	e7e0      	b.n	80010f6 <__aeabi_ui2f+0x3a>
 8001134:	0264      	lsls	r4, r4, #9
 8001136:	2096      	movs	r0, #150	@ 0x96
 8001138:	0a64      	lsrs	r4, r4, #9
 800113a:	e7d3      	b.n	80010e4 <__aeabi_ui2f+0x28>
 800113c:	fbffffff 	.word	0xfbffffff

08001140 <__aeabi_dadd>:
 8001140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001142:	4657      	mov	r7, sl
 8001144:	464e      	mov	r6, r9
 8001146:	4645      	mov	r5, r8
 8001148:	46de      	mov	lr, fp
 800114a:	b5e0      	push	{r5, r6, r7, lr}
 800114c:	b083      	sub	sp, #12
 800114e:	9000      	str	r0, [sp, #0]
 8001150:	9101      	str	r1, [sp, #4]
 8001152:	030c      	lsls	r4, r1, #12
 8001154:	004f      	lsls	r7, r1, #1
 8001156:	0fce      	lsrs	r6, r1, #31
 8001158:	0a61      	lsrs	r1, r4, #9
 800115a:	9c00      	ldr	r4, [sp, #0]
 800115c:	031d      	lsls	r5, r3, #12
 800115e:	0f64      	lsrs	r4, r4, #29
 8001160:	430c      	orrs	r4, r1
 8001162:	9900      	ldr	r1, [sp, #0]
 8001164:	9200      	str	r2, [sp, #0]
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	00c8      	lsls	r0, r1, #3
 800116a:	0059      	lsls	r1, r3, #1
 800116c:	0d4b      	lsrs	r3, r1, #21
 800116e:	4699      	mov	r9, r3
 8001170:	9a00      	ldr	r2, [sp, #0]
 8001172:	9b01      	ldr	r3, [sp, #4]
 8001174:	0a6d      	lsrs	r5, r5, #9
 8001176:	0fd9      	lsrs	r1, r3, #31
 8001178:	0f53      	lsrs	r3, r2, #29
 800117a:	432b      	orrs	r3, r5
 800117c:	469a      	mov	sl, r3
 800117e:	9b00      	ldr	r3, [sp, #0]
 8001180:	0d7f      	lsrs	r7, r7, #21
 8001182:	00da      	lsls	r2, r3, #3
 8001184:	4694      	mov	ip, r2
 8001186:	464a      	mov	r2, r9
 8001188:	46b0      	mov	r8, r6
 800118a:	1aba      	subs	r2, r7, r2
 800118c:	428e      	cmp	r6, r1
 800118e:	d100      	bne.n	8001192 <__aeabi_dadd+0x52>
 8001190:	e0b0      	b.n	80012f4 <__aeabi_dadd+0x1b4>
 8001192:	2a00      	cmp	r2, #0
 8001194:	dc00      	bgt.n	8001198 <__aeabi_dadd+0x58>
 8001196:	e078      	b.n	800128a <__aeabi_dadd+0x14a>
 8001198:	4649      	mov	r1, r9
 800119a:	2900      	cmp	r1, #0
 800119c:	d100      	bne.n	80011a0 <__aeabi_dadd+0x60>
 800119e:	e0e9      	b.n	8001374 <__aeabi_dadd+0x234>
 80011a0:	49c9      	ldr	r1, [pc, #804]	@ (80014c8 <__aeabi_dadd+0x388>)
 80011a2:	428f      	cmp	r7, r1
 80011a4:	d100      	bne.n	80011a8 <__aeabi_dadd+0x68>
 80011a6:	e195      	b.n	80014d4 <__aeabi_dadd+0x394>
 80011a8:	2501      	movs	r5, #1
 80011aa:	2a38      	cmp	r2, #56	@ 0x38
 80011ac:	dc16      	bgt.n	80011dc <__aeabi_dadd+0x9c>
 80011ae:	2180      	movs	r1, #128	@ 0x80
 80011b0:	4653      	mov	r3, sl
 80011b2:	0409      	lsls	r1, r1, #16
 80011b4:	430b      	orrs	r3, r1
 80011b6:	469a      	mov	sl, r3
 80011b8:	2a1f      	cmp	r2, #31
 80011ba:	dd00      	ble.n	80011be <__aeabi_dadd+0x7e>
 80011bc:	e1e7      	b.n	800158e <__aeabi_dadd+0x44e>
 80011be:	2120      	movs	r1, #32
 80011c0:	4655      	mov	r5, sl
 80011c2:	1a8b      	subs	r3, r1, r2
 80011c4:	4661      	mov	r1, ip
 80011c6:	409d      	lsls	r5, r3
 80011c8:	40d1      	lsrs	r1, r2
 80011ca:	430d      	orrs	r5, r1
 80011cc:	4661      	mov	r1, ip
 80011ce:	4099      	lsls	r1, r3
 80011d0:	1e4b      	subs	r3, r1, #1
 80011d2:	4199      	sbcs	r1, r3
 80011d4:	4653      	mov	r3, sl
 80011d6:	40d3      	lsrs	r3, r2
 80011d8:	430d      	orrs	r5, r1
 80011da:	1ae4      	subs	r4, r4, r3
 80011dc:	1b45      	subs	r5, r0, r5
 80011de:	42a8      	cmp	r0, r5
 80011e0:	4180      	sbcs	r0, r0
 80011e2:	4240      	negs	r0, r0
 80011e4:	1a24      	subs	r4, r4, r0
 80011e6:	0223      	lsls	r3, r4, #8
 80011e8:	d400      	bmi.n	80011ec <__aeabi_dadd+0xac>
 80011ea:	e10f      	b.n	800140c <__aeabi_dadd+0x2cc>
 80011ec:	0264      	lsls	r4, r4, #9
 80011ee:	0a64      	lsrs	r4, r4, #9
 80011f0:	2c00      	cmp	r4, #0
 80011f2:	d100      	bne.n	80011f6 <__aeabi_dadd+0xb6>
 80011f4:	e139      	b.n	800146a <__aeabi_dadd+0x32a>
 80011f6:	0020      	movs	r0, r4
 80011f8:	f001 feca 	bl	8002f90 <__clzsi2>
 80011fc:	0003      	movs	r3, r0
 80011fe:	3b08      	subs	r3, #8
 8001200:	2120      	movs	r1, #32
 8001202:	0028      	movs	r0, r5
 8001204:	1aca      	subs	r2, r1, r3
 8001206:	40d0      	lsrs	r0, r2
 8001208:	409c      	lsls	r4, r3
 800120a:	0002      	movs	r2, r0
 800120c:	409d      	lsls	r5, r3
 800120e:	4322      	orrs	r2, r4
 8001210:	429f      	cmp	r7, r3
 8001212:	dd00      	ble.n	8001216 <__aeabi_dadd+0xd6>
 8001214:	e173      	b.n	80014fe <__aeabi_dadd+0x3be>
 8001216:	1bd8      	subs	r0, r3, r7
 8001218:	3001      	adds	r0, #1
 800121a:	1a09      	subs	r1, r1, r0
 800121c:	002c      	movs	r4, r5
 800121e:	408d      	lsls	r5, r1
 8001220:	40c4      	lsrs	r4, r0
 8001222:	1e6b      	subs	r3, r5, #1
 8001224:	419d      	sbcs	r5, r3
 8001226:	0013      	movs	r3, r2
 8001228:	40c2      	lsrs	r2, r0
 800122a:	408b      	lsls	r3, r1
 800122c:	4325      	orrs	r5, r4
 800122e:	2700      	movs	r7, #0
 8001230:	0014      	movs	r4, r2
 8001232:	431d      	orrs	r5, r3
 8001234:	076b      	lsls	r3, r5, #29
 8001236:	d009      	beq.n	800124c <__aeabi_dadd+0x10c>
 8001238:	230f      	movs	r3, #15
 800123a:	402b      	ands	r3, r5
 800123c:	2b04      	cmp	r3, #4
 800123e:	d005      	beq.n	800124c <__aeabi_dadd+0x10c>
 8001240:	1d2b      	adds	r3, r5, #4
 8001242:	42ab      	cmp	r3, r5
 8001244:	41ad      	sbcs	r5, r5
 8001246:	426d      	negs	r5, r5
 8001248:	1964      	adds	r4, r4, r5
 800124a:	001d      	movs	r5, r3
 800124c:	0223      	lsls	r3, r4, #8
 800124e:	d400      	bmi.n	8001252 <__aeabi_dadd+0x112>
 8001250:	e12d      	b.n	80014ae <__aeabi_dadd+0x36e>
 8001252:	4a9d      	ldr	r2, [pc, #628]	@ (80014c8 <__aeabi_dadd+0x388>)
 8001254:	3701      	adds	r7, #1
 8001256:	4297      	cmp	r7, r2
 8001258:	d100      	bne.n	800125c <__aeabi_dadd+0x11c>
 800125a:	e0d3      	b.n	8001404 <__aeabi_dadd+0x2c4>
 800125c:	4646      	mov	r6, r8
 800125e:	499b      	ldr	r1, [pc, #620]	@ (80014cc <__aeabi_dadd+0x38c>)
 8001260:	08ed      	lsrs	r5, r5, #3
 8001262:	4021      	ands	r1, r4
 8001264:	074a      	lsls	r2, r1, #29
 8001266:	432a      	orrs	r2, r5
 8001268:	057c      	lsls	r4, r7, #21
 800126a:	024d      	lsls	r5, r1, #9
 800126c:	0b2d      	lsrs	r5, r5, #12
 800126e:	0d64      	lsrs	r4, r4, #21
 8001270:	0524      	lsls	r4, r4, #20
 8001272:	432c      	orrs	r4, r5
 8001274:	07f6      	lsls	r6, r6, #31
 8001276:	4334      	orrs	r4, r6
 8001278:	0010      	movs	r0, r2
 800127a:	0021      	movs	r1, r4
 800127c:	b003      	add	sp, #12
 800127e:	bcf0      	pop	{r4, r5, r6, r7}
 8001280:	46bb      	mov	fp, r7
 8001282:	46b2      	mov	sl, r6
 8001284:	46a9      	mov	r9, r5
 8001286:	46a0      	mov	r8, r4
 8001288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800128a:	2a00      	cmp	r2, #0
 800128c:	d100      	bne.n	8001290 <__aeabi_dadd+0x150>
 800128e:	e084      	b.n	800139a <__aeabi_dadd+0x25a>
 8001290:	464a      	mov	r2, r9
 8001292:	1bd2      	subs	r2, r2, r7
 8001294:	2f00      	cmp	r7, #0
 8001296:	d000      	beq.n	800129a <__aeabi_dadd+0x15a>
 8001298:	e16d      	b.n	8001576 <__aeabi_dadd+0x436>
 800129a:	0025      	movs	r5, r4
 800129c:	4305      	orrs	r5, r0
 800129e:	d100      	bne.n	80012a2 <__aeabi_dadd+0x162>
 80012a0:	e127      	b.n	80014f2 <__aeabi_dadd+0x3b2>
 80012a2:	1e56      	subs	r6, r2, #1
 80012a4:	2a01      	cmp	r2, #1
 80012a6:	d100      	bne.n	80012aa <__aeabi_dadd+0x16a>
 80012a8:	e23b      	b.n	8001722 <__aeabi_dadd+0x5e2>
 80012aa:	4d87      	ldr	r5, [pc, #540]	@ (80014c8 <__aeabi_dadd+0x388>)
 80012ac:	42aa      	cmp	r2, r5
 80012ae:	d100      	bne.n	80012b2 <__aeabi_dadd+0x172>
 80012b0:	e26a      	b.n	8001788 <__aeabi_dadd+0x648>
 80012b2:	2501      	movs	r5, #1
 80012b4:	2e38      	cmp	r6, #56	@ 0x38
 80012b6:	dc12      	bgt.n	80012de <__aeabi_dadd+0x19e>
 80012b8:	0032      	movs	r2, r6
 80012ba:	2a1f      	cmp	r2, #31
 80012bc:	dd00      	ble.n	80012c0 <__aeabi_dadd+0x180>
 80012be:	e1f8      	b.n	80016b2 <__aeabi_dadd+0x572>
 80012c0:	2620      	movs	r6, #32
 80012c2:	0025      	movs	r5, r4
 80012c4:	1ab6      	subs	r6, r6, r2
 80012c6:	0007      	movs	r7, r0
 80012c8:	4653      	mov	r3, sl
 80012ca:	40b0      	lsls	r0, r6
 80012cc:	40d4      	lsrs	r4, r2
 80012ce:	40b5      	lsls	r5, r6
 80012d0:	40d7      	lsrs	r7, r2
 80012d2:	1e46      	subs	r6, r0, #1
 80012d4:	41b0      	sbcs	r0, r6
 80012d6:	1b1b      	subs	r3, r3, r4
 80012d8:	469a      	mov	sl, r3
 80012da:	433d      	orrs	r5, r7
 80012dc:	4305      	orrs	r5, r0
 80012de:	4662      	mov	r2, ip
 80012e0:	1b55      	subs	r5, r2, r5
 80012e2:	45ac      	cmp	ip, r5
 80012e4:	4192      	sbcs	r2, r2
 80012e6:	4653      	mov	r3, sl
 80012e8:	4252      	negs	r2, r2
 80012ea:	000e      	movs	r6, r1
 80012ec:	464f      	mov	r7, r9
 80012ee:	4688      	mov	r8, r1
 80012f0:	1a9c      	subs	r4, r3, r2
 80012f2:	e778      	b.n	80011e6 <__aeabi_dadd+0xa6>
 80012f4:	2a00      	cmp	r2, #0
 80012f6:	dc00      	bgt.n	80012fa <__aeabi_dadd+0x1ba>
 80012f8:	e08e      	b.n	8001418 <__aeabi_dadd+0x2d8>
 80012fa:	4649      	mov	r1, r9
 80012fc:	2900      	cmp	r1, #0
 80012fe:	d175      	bne.n	80013ec <__aeabi_dadd+0x2ac>
 8001300:	4661      	mov	r1, ip
 8001302:	4653      	mov	r3, sl
 8001304:	4319      	orrs	r1, r3
 8001306:	d100      	bne.n	800130a <__aeabi_dadd+0x1ca>
 8001308:	e0f6      	b.n	80014f8 <__aeabi_dadd+0x3b8>
 800130a:	1e51      	subs	r1, r2, #1
 800130c:	2a01      	cmp	r2, #1
 800130e:	d100      	bne.n	8001312 <__aeabi_dadd+0x1d2>
 8001310:	e191      	b.n	8001636 <__aeabi_dadd+0x4f6>
 8001312:	4d6d      	ldr	r5, [pc, #436]	@ (80014c8 <__aeabi_dadd+0x388>)
 8001314:	42aa      	cmp	r2, r5
 8001316:	d100      	bne.n	800131a <__aeabi_dadd+0x1da>
 8001318:	e0dc      	b.n	80014d4 <__aeabi_dadd+0x394>
 800131a:	2501      	movs	r5, #1
 800131c:	2938      	cmp	r1, #56	@ 0x38
 800131e:	dc14      	bgt.n	800134a <__aeabi_dadd+0x20a>
 8001320:	000a      	movs	r2, r1
 8001322:	2a1f      	cmp	r2, #31
 8001324:	dd00      	ble.n	8001328 <__aeabi_dadd+0x1e8>
 8001326:	e1a2      	b.n	800166e <__aeabi_dadd+0x52e>
 8001328:	2120      	movs	r1, #32
 800132a:	4653      	mov	r3, sl
 800132c:	1a89      	subs	r1, r1, r2
 800132e:	408b      	lsls	r3, r1
 8001330:	001d      	movs	r5, r3
 8001332:	4663      	mov	r3, ip
 8001334:	40d3      	lsrs	r3, r2
 8001336:	431d      	orrs	r5, r3
 8001338:	4663      	mov	r3, ip
 800133a:	408b      	lsls	r3, r1
 800133c:	0019      	movs	r1, r3
 800133e:	1e4b      	subs	r3, r1, #1
 8001340:	4199      	sbcs	r1, r3
 8001342:	4653      	mov	r3, sl
 8001344:	40d3      	lsrs	r3, r2
 8001346:	430d      	orrs	r5, r1
 8001348:	18e4      	adds	r4, r4, r3
 800134a:	182d      	adds	r5, r5, r0
 800134c:	4285      	cmp	r5, r0
 800134e:	4180      	sbcs	r0, r0
 8001350:	4240      	negs	r0, r0
 8001352:	1824      	adds	r4, r4, r0
 8001354:	0223      	lsls	r3, r4, #8
 8001356:	d559      	bpl.n	800140c <__aeabi_dadd+0x2cc>
 8001358:	4b5b      	ldr	r3, [pc, #364]	@ (80014c8 <__aeabi_dadd+0x388>)
 800135a:	3701      	adds	r7, #1
 800135c:	429f      	cmp	r7, r3
 800135e:	d051      	beq.n	8001404 <__aeabi_dadd+0x2c4>
 8001360:	2101      	movs	r1, #1
 8001362:	4b5a      	ldr	r3, [pc, #360]	@ (80014cc <__aeabi_dadd+0x38c>)
 8001364:	086a      	lsrs	r2, r5, #1
 8001366:	401c      	ands	r4, r3
 8001368:	4029      	ands	r1, r5
 800136a:	430a      	orrs	r2, r1
 800136c:	07e5      	lsls	r5, r4, #31
 800136e:	4315      	orrs	r5, r2
 8001370:	0864      	lsrs	r4, r4, #1
 8001372:	e75f      	b.n	8001234 <__aeabi_dadd+0xf4>
 8001374:	4661      	mov	r1, ip
 8001376:	4653      	mov	r3, sl
 8001378:	4319      	orrs	r1, r3
 800137a:	d100      	bne.n	800137e <__aeabi_dadd+0x23e>
 800137c:	e0bc      	b.n	80014f8 <__aeabi_dadd+0x3b8>
 800137e:	1e51      	subs	r1, r2, #1
 8001380:	2a01      	cmp	r2, #1
 8001382:	d100      	bne.n	8001386 <__aeabi_dadd+0x246>
 8001384:	e164      	b.n	8001650 <__aeabi_dadd+0x510>
 8001386:	4d50      	ldr	r5, [pc, #320]	@ (80014c8 <__aeabi_dadd+0x388>)
 8001388:	42aa      	cmp	r2, r5
 800138a:	d100      	bne.n	800138e <__aeabi_dadd+0x24e>
 800138c:	e16a      	b.n	8001664 <__aeabi_dadd+0x524>
 800138e:	2501      	movs	r5, #1
 8001390:	2938      	cmp	r1, #56	@ 0x38
 8001392:	dd00      	ble.n	8001396 <__aeabi_dadd+0x256>
 8001394:	e722      	b.n	80011dc <__aeabi_dadd+0x9c>
 8001396:	000a      	movs	r2, r1
 8001398:	e70e      	b.n	80011b8 <__aeabi_dadd+0x78>
 800139a:	4a4d      	ldr	r2, [pc, #308]	@ (80014d0 <__aeabi_dadd+0x390>)
 800139c:	1c7d      	adds	r5, r7, #1
 800139e:	4215      	tst	r5, r2
 80013a0:	d000      	beq.n	80013a4 <__aeabi_dadd+0x264>
 80013a2:	e0d0      	b.n	8001546 <__aeabi_dadd+0x406>
 80013a4:	0025      	movs	r5, r4
 80013a6:	4662      	mov	r2, ip
 80013a8:	4653      	mov	r3, sl
 80013aa:	4305      	orrs	r5, r0
 80013ac:	431a      	orrs	r2, r3
 80013ae:	2f00      	cmp	r7, #0
 80013b0:	d000      	beq.n	80013b4 <__aeabi_dadd+0x274>
 80013b2:	e137      	b.n	8001624 <__aeabi_dadd+0x4e4>
 80013b4:	2d00      	cmp	r5, #0
 80013b6:	d100      	bne.n	80013ba <__aeabi_dadd+0x27a>
 80013b8:	e1a8      	b.n	800170c <__aeabi_dadd+0x5cc>
 80013ba:	2a00      	cmp	r2, #0
 80013bc:	d100      	bne.n	80013c0 <__aeabi_dadd+0x280>
 80013be:	e16a      	b.n	8001696 <__aeabi_dadd+0x556>
 80013c0:	4663      	mov	r3, ip
 80013c2:	1ac5      	subs	r5, r0, r3
 80013c4:	4653      	mov	r3, sl
 80013c6:	1ae2      	subs	r2, r4, r3
 80013c8:	42a8      	cmp	r0, r5
 80013ca:	419b      	sbcs	r3, r3
 80013cc:	425b      	negs	r3, r3
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	021a      	lsls	r2, r3, #8
 80013d2:	d400      	bmi.n	80013d6 <__aeabi_dadd+0x296>
 80013d4:	e203      	b.n	80017de <__aeabi_dadd+0x69e>
 80013d6:	4663      	mov	r3, ip
 80013d8:	1a1d      	subs	r5, r3, r0
 80013da:	45ac      	cmp	ip, r5
 80013dc:	4192      	sbcs	r2, r2
 80013de:	4653      	mov	r3, sl
 80013e0:	4252      	negs	r2, r2
 80013e2:	1b1c      	subs	r4, r3, r4
 80013e4:	000e      	movs	r6, r1
 80013e6:	4688      	mov	r8, r1
 80013e8:	1aa4      	subs	r4, r4, r2
 80013ea:	e723      	b.n	8001234 <__aeabi_dadd+0xf4>
 80013ec:	4936      	ldr	r1, [pc, #216]	@ (80014c8 <__aeabi_dadd+0x388>)
 80013ee:	428f      	cmp	r7, r1
 80013f0:	d070      	beq.n	80014d4 <__aeabi_dadd+0x394>
 80013f2:	2501      	movs	r5, #1
 80013f4:	2a38      	cmp	r2, #56	@ 0x38
 80013f6:	dca8      	bgt.n	800134a <__aeabi_dadd+0x20a>
 80013f8:	2180      	movs	r1, #128	@ 0x80
 80013fa:	4653      	mov	r3, sl
 80013fc:	0409      	lsls	r1, r1, #16
 80013fe:	430b      	orrs	r3, r1
 8001400:	469a      	mov	sl, r3
 8001402:	e78e      	b.n	8001322 <__aeabi_dadd+0x1e2>
 8001404:	003c      	movs	r4, r7
 8001406:	2500      	movs	r5, #0
 8001408:	2200      	movs	r2, #0
 800140a:	e731      	b.n	8001270 <__aeabi_dadd+0x130>
 800140c:	2307      	movs	r3, #7
 800140e:	402b      	ands	r3, r5
 8001410:	2b00      	cmp	r3, #0
 8001412:	d000      	beq.n	8001416 <__aeabi_dadd+0x2d6>
 8001414:	e710      	b.n	8001238 <__aeabi_dadd+0xf8>
 8001416:	e093      	b.n	8001540 <__aeabi_dadd+0x400>
 8001418:	2a00      	cmp	r2, #0
 800141a:	d074      	beq.n	8001506 <__aeabi_dadd+0x3c6>
 800141c:	464a      	mov	r2, r9
 800141e:	1bd2      	subs	r2, r2, r7
 8001420:	2f00      	cmp	r7, #0
 8001422:	d100      	bne.n	8001426 <__aeabi_dadd+0x2e6>
 8001424:	e0c7      	b.n	80015b6 <__aeabi_dadd+0x476>
 8001426:	4928      	ldr	r1, [pc, #160]	@ (80014c8 <__aeabi_dadd+0x388>)
 8001428:	4589      	cmp	r9, r1
 800142a:	d100      	bne.n	800142e <__aeabi_dadd+0x2ee>
 800142c:	e185      	b.n	800173a <__aeabi_dadd+0x5fa>
 800142e:	2501      	movs	r5, #1
 8001430:	2a38      	cmp	r2, #56	@ 0x38
 8001432:	dc12      	bgt.n	800145a <__aeabi_dadd+0x31a>
 8001434:	2180      	movs	r1, #128	@ 0x80
 8001436:	0409      	lsls	r1, r1, #16
 8001438:	430c      	orrs	r4, r1
 800143a:	2a1f      	cmp	r2, #31
 800143c:	dd00      	ble.n	8001440 <__aeabi_dadd+0x300>
 800143e:	e1ab      	b.n	8001798 <__aeabi_dadd+0x658>
 8001440:	2120      	movs	r1, #32
 8001442:	0025      	movs	r5, r4
 8001444:	1a89      	subs	r1, r1, r2
 8001446:	0007      	movs	r7, r0
 8001448:	4088      	lsls	r0, r1
 800144a:	408d      	lsls	r5, r1
 800144c:	40d7      	lsrs	r7, r2
 800144e:	1e41      	subs	r1, r0, #1
 8001450:	4188      	sbcs	r0, r1
 8001452:	40d4      	lsrs	r4, r2
 8001454:	433d      	orrs	r5, r7
 8001456:	4305      	orrs	r5, r0
 8001458:	44a2      	add	sl, r4
 800145a:	4465      	add	r5, ip
 800145c:	4565      	cmp	r5, ip
 800145e:	4192      	sbcs	r2, r2
 8001460:	4252      	negs	r2, r2
 8001462:	4452      	add	r2, sl
 8001464:	0014      	movs	r4, r2
 8001466:	464f      	mov	r7, r9
 8001468:	e774      	b.n	8001354 <__aeabi_dadd+0x214>
 800146a:	0028      	movs	r0, r5
 800146c:	f001 fd90 	bl	8002f90 <__clzsi2>
 8001470:	0003      	movs	r3, r0
 8001472:	3318      	adds	r3, #24
 8001474:	2b1f      	cmp	r3, #31
 8001476:	dc00      	bgt.n	800147a <__aeabi_dadd+0x33a>
 8001478:	e6c2      	b.n	8001200 <__aeabi_dadd+0xc0>
 800147a:	002a      	movs	r2, r5
 800147c:	3808      	subs	r0, #8
 800147e:	4082      	lsls	r2, r0
 8001480:	429f      	cmp	r7, r3
 8001482:	dd00      	ble.n	8001486 <__aeabi_dadd+0x346>
 8001484:	e0a9      	b.n	80015da <__aeabi_dadd+0x49a>
 8001486:	1bdb      	subs	r3, r3, r7
 8001488:	1c58      	adds	r0, r3, #1
 800148a:	281f      	cmp	r0, #31
 800148c:	dc00      	bgt.n	8001490 <__aeabi_dadd+0x350>
 800148e:	e1ac      	b.n	80017ea <__aeabi_dadd+0x6aa>
 8001490:	0015      	movs	r5, r2
 8001492:	3b1f      	subs	r3, #31
 8001494:	40dd      	lsrs	r5, r3
 8001496:	2820      	cmp	r0, #32
 8001498:	d005      	beq.n	80014a6 <__aeabi_dadd+0x366>
 800149a:	2340      	movs	r3, #64	@ 0x40
 800149c:	1a1b      	subs	r3, r3, r0
 800149e:	409a      	lsls	r2, r3
 80014a0:	1e53      	subs	r3, r2, #1
 80014a2:	419a      	sbcs	r2, r3
 80014a4:	4315      	orrs	r5, r2
 80014a6:	2307      	movs	r3, #7
 80014a8:	2700      	movs	r7, #0
 80014aa:	402b      	ands	r3, r5
 80014ac:	e7b0      	b.n	8001410 <__aeabi_dadd+0x2d0>
 80014ae:	08ed      	lsrs	r5, r5, #3
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <__aeabi_dadd+0x388>)
 80014b2:	0762      	lsls	r2, r4, #29
 80014b4:	432a      	orrs	r2, r5
 80014b6:	08e4      	lsrs	r4, r4, #3
 80014b8:	429f      	cmp	r7, r3
 80014ba:	d00f      	beq.n	80014dc <__aeabi_dadd+0x39c>
 80014bc:	0324      	lsls	r4, r4, #12
 80014be:	0b25      	lsrs	r5, r4, #12
 80014c0:	057c      	lsls	r4, r7, #21
 80014c2:	0d64      	lsrs	r4, r4, #21
 80014c4:	e6d4      	b.n	8001270 <__aeabi_dadd+0x130>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	000007ff 	.word	0x000007ff
 80014cc:	ff7fffff 	.word	0xff7fffff
 80014d0:	000007fe 	.word	0x000007fe
 80014d4:	08c0      	lsrs	r0, r0, #3
 80014d6:	0762      	lsls	r2, r4, #29
 80014d8:	4302      	orrs	r2, r0
 80014da:	08e4      	lsrs	r4, r4, #3
 80014dc:	0013      	movs	r3, r2
 80014de:	4323      	orrs	r3, r4
 80014e0:	d100      	bne.n	80014e4 <__aeabi_dadd+0x3a4>
 80014e2:	e186      	b.n	80017f2 <__aeabi_dadd+0x6b2>
 80014e4:	2580      	movs	r5, #128	@ 0x80
 80014e6:	032d      	lsls	r5, r5, #12
 80014e8:	4325      	orrs	r5, r4
 80014ea:	032d      	lsls	r5, r5, #12
 80014ec:	4cc3      	ldr	r4, [pc, #780]	@ (80017fc <__aeabi_dadd+0x6bc>)
 80014ee:	0b2d      	lsrs	r5, r5, #12
 80014f0:	e6be      	b.n	8001270 <__aeabi_dadd+0x130>
 80014f2:	4660      	mov	r0, ip
 80014f4:	4654      	mov	r4, sl
 80014f6:	000e      	movs	r6, r1
 80014f8:	0017      	movs	r7, r2
 80014fa:	08c5      	lsrs	r5, r0, #3
 80014fc:	e7d8      	b.n	80014b0 <__aeabi_dadd+0x370>
 80014fe:	4cc0      	ldr	r4, [pc, #768]	@ (8001800 <__aeabi_dadd+0x6c0>)
 8001500:	1aff      	subs	r7, r7, r3
 8001502:	4014      	ands	r4, r2
 8001504:	e696      	b.n	8001234 <__aeabi_dadd+0xf4>
 8001506:	4abf      	ldr	r2, [pc, #764]	@ (8001804 <__aeabi_dadd+0x6c4>)
 8001508:	1c79      	adds	r1, r7, #1
 800150a:	4211      	tst	r1, r2
 800150c:	d16b      	bne.n	80015e6 <__aeabi_dadd+0x4a6>
 800150e:	0022      	movs	r2, r4
 8001510:	4302      	orrs	r2, r0
 8001512:	2f00      	cmp	r7, #0
 8001514:	d000      	beq.n	8001518 <__aeabi_dadd+0x3d8>
 8001516:	e0db      	b.n	80016d0 <__aeabi_dadd+0x590>
 8001518:	2a00      	cmp	r2, #0
 800151a:	d100      	bne.n	800151e <__aeabi_dadd+0x3de>
 800151c:	e12d      	b.n	800177a <__aeabi_dadd+0x63a>
 800151e:	4662      	mov	r2, ip
 8001520:	4653      	mov	r3, sl
 8001522:	431a      	orrs	r2, r3
 8001524:	d100      	bne.n	8001528 <__aeabi_dadd+0x3e8>
 8001526:	e0b6      	b.n	8001696 <__aeabi_dadd+0x556>
 8001528:	4663      	mov	r3, ip
 800152a:	18c5      	adds	r5, r0, r3
 800152c:	4285      	cmp	r5, r0
 800152e:	4180      	sbcs	r0, r0
 8001530:	4454      	add	r4, sl
 8001532:	4240      	negs	r0, r0
 8001534:	1824      	adds	r4, r4, r0
 8001536:	0223      	lsls	r3, r4, #8
 8001538:	d502      	bpl.n	8001540 <__aeabi_dadd+0x400>
 800153a:	000f      	movs	r7, r1
 800153c:	4bb0      	ldr	r3, [pc, #704]	@ (8001800 <__aeabi_dadd+0x6c0>)
 800153e:	401c      	ands	r4, r3
 8001540:	003a      	movs	r2, r7
 8001542:	0028      	movs	r0, r5
 8001544:	e7d8      	b.n	80014f8 <__aeabi_dadd+0x3b8>
 8001546:	4662      	mov	r2, ip
 8001548:	1a85      	subs	r5, r0, r2
 800154a:	42a8      	cmp	r0, r5
 800154c:	4192      	sbcs	r2, r2
 800154e:	4653      	mov	r3, sl
 8001550:	4252      	negs	r2, r2
 8001552:	4691      	mov	r9, r2
 8001554:	1ae3      	subs	r3, r4, r3
 8001556:	001a      	movs	r2, r3
 8001558:	464b      	mov	r3, r9
 800155a:	1ad2      	subs	r2, r2, r3
 800155c:	0013      	movs	r3, r2
 800155e:	4691      	mov	r9, r2
 8001560:	021a      	lsls	r2, r3, #8
 8001562:	d454      	bmi.n	800160e <__aeabi_dadd+0x4ce>
 8001564:	464a      	mov	r2, r9
 8001566:	464c      	mov	r4, r9
 8001568:	432a      	orrs	r2, r5
 800156a:	d000      	beq.n	800156e <__aeabi_dadd+0x42e>
 800156c:	e640      	b.n	80011f0 <__aeabi_dadd+0xb0>
 800156e:	2600      	movs	r6, #0
 8001570:	2400      	movs	r4, #0
 8001572:	2500      	movs	r5, #0
 8001574:	e67c      	b.n	8001270 <__aeabi_dadd+0x130>
 8001576:	4da1      	ldr	r5, [pc, #644]	@ (80017fc <__aeabi_dadd+0x6bc>)
 8001578:	45a9      	cmp	r9, r5
 800157a:	d100      	bne.n	800157e <__aeabi_dadd+0x43e>
 800157c:	e090      	b.n	80016a0 <__aeabi_dadd+0x560>
 800157e:	2501      	movs	r5, #1
 8001580:	2a38      	cmp	r2, #56	@ 0x38
 8001582:	dd00      	ble.n	8001586 <__aeabi_dadd+0x446>
 8001584:	e6ab      	b.n	80012de <__aeabi_dadd+0x19e>
 8001586:	2580      	movs	r5, #128	@ 0x80
 8001588:	042d      	lsls	r5, r5, #16
 800158a:	432c      	orrs	r4, r5
 800158c:	e695      	b.n	80012ba <__aeabi_dadd+0x17a>
 800158e:	0011      	movs	r1, r2
 8001590:	4655      	mov	r5, sl
 8001592:	3920      	subs	r1, #32
 8001594:	40cd      	lsrs	r5, r1
 8001596:	46a9      	mov	r9, r5
 8001598:	2a20      	cmp	r2, #32
 800159a:	d006      	beq.n	80015aa <__aeabi_dadd+0x46a>
 800159c:	2140      	movs	r1, #64	@ 0x40
 800159e:	4653      	mov	r3, sl
 80015a0:	1a8a      	subs	r2, r1, r2
 80015a2:	4093      	lsls	r3, r2
 80015a4:	4662      	mov	r2, ip
 80015a6:	431a      	orrs	r2, r3
 80015a8:	4694      	mov	ip, r2
 80015aa:	4665      	mov	r5, ip
 80015ac:	1e6b      	subs	r3, r5, #1
 80015ae:	419d      	sbcs	r5, r3
 80015b0:	464b      	mov	r3, r9
 80015b2:	431d      	orrs	r5, r3
 80015b4:	e612      	b.n	80011dc <__aeabi_dadd+0x9c>
 80015b6:	0021      	movs	r1, r4
 80015b8:	4301      	orrs	r1, r0
 80015ba:	d100      	bne.n	80015be <__aeabi_dadd+0x47e>
 80015bc:	e0c4      	b.n	8001748 <__aeabi_dadd+0x608>
 80015be:	1e51      	subs	r1, r2, #1
 80015c0:	2a01      	cmp	r2, #1
 80015c2:	d100      	bne.n	80015c6 <__aeabi_dadd+0x486>
 80015c4:	e0fb      	b.n	80017be <__aeabi_dadd+0x67e>
 80015c6:	4d8d      	ldr	r5, [pc, #564]	@ (80017fc <__aeabi_dadd+0x6bc>)
 80015c8:	42aa      	cmp	r2, r5
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0x48e>
 80015cc:	e0b5      	b.n	800173a <__aeabi_dadd+0x5fa>
 80015ce:	2501      	movs	r5, #1
 80015d0:	2938      	cmp	r1, #56	@ 0x38
 80015d2:	dd00      	ble.n	80015d6 <__aeabi_dadd+0x496>
 80015d4:	e741      	b.n	800145a <__aeabi_dadd+0x31a>
 80015d6:	000a      	movs	r2, r1
 80015d8:	e72f      	b.n	800143a <__aeabi_dadd+0x2fa>
 80015da:	4c89      	ldr	r4, [pc, #548]	@ (8001800 <__aeabi_dadd+0x6c0>)
 80015dc:	1aff      	subs	r7, r7, r3
 80015de:	4014      	ands	r4, r2
 80015e0:	0762      	lsls	r2, r4, #29
 80015e2:	08e4      	lsrs	r4, r4, #3
 80015e4:	e76a      	b.n	80014bc <__aeabi_dadd+0x37c>
 80015e6:	4a85      	ldr	r2, [pc, #532]	@ (80017fc <__aeabi_dadd+0x6bc>)
 80015e8:	4291      	cmp	r1, r2
 80015ea:	d100      	bne.n	80015ee <__aeabi_dadd+0x4ae>
 80015ec:	e0e3      	b.n	80017b6 <__aeabi_dadd+0x676>
 80015ee:	4663      	mov	r3, ip
 80015f0:	18c2      	adds	r2, r0, r3
 80015f2:	4282      	cmp	r2, r0
 80015f4:	4180      	sbcs	r0, r0
 80015f6:	0023      	movs	r3, r4
 80015f8:	4240      	negs	r0, r0
 80015fa:	4453      	add	r3, sl
 80015fc:	181b      	adds	r3, r3, r0
 80015fe:	07dd      	lsls	r5, r3, #31
 8001600:	085c      	lsrs	r4, r3, #1
 8001602:	2307      	movs	r3, #7
 8001604:	0852      	lsrs	r2, r2, #1
 8001606:	4315      	orrs	r5, r2
 8001608:	000f      	movs	r7, r1
 800160a:	402b      	ands	r3, r5
 800160c:	e700      	b.n	8001410 <__aeabi_dadd+0x2d0>
 800160e:	4663      	mov	r3, ip
 8001610:	1a1d      	subs	r5, r3, r0
 8001612:	45ac      	cmp	ip, r5
 8001614:	4192      	sbcs	r2, r2
 8001616:	4653      	mov	r3, sl
 8001618:	4252      	negs	r2, r2
 800161a:	1b1c      	subs	r4, r3, r4
 800161c:	000e      	movs	r6, r1
 800161e:	4688      	mov	r8, r1
 8001620:	1aa4      	subs	r4, r4, r2
 8001622:	e5e5      	b.n	80011f0 <__aeabi_dadd+0xb0>
 8001624:	2d00      	cmp	r5, #0
 8001626:	d000      	beq.n	800162a <__aeabi_dadd+0x4ea>
 8001628:	e091      	b.n	800174e <__aeabi_dadd+0x60e>
 800162a:	2a00      	cmp	r2, #0
 800162c:	d138      	bne.n	80016a0 <__aeabi_dadd+0x560>
 800162e:	2480      	movs	r4, #128	@ 0x80
 8001630:	2600      	movs	r6, #0
 8001632:	0324      	lsls	r4, r4, #12
 8001634:	e756      	b.n	80014e4 <__aeabi_dadd+0x3a4>
 8001636:	4663      	mov	r3, ip
 8001638:	18c5      	adds	r5, r0, r3
 800163a:	4285      	cmp	r5, r0
 800163c:	4180      	sbcs	r0, r0
 800163e:	4454      	add	r4, sl
 8001640:	4240      	negs	r0, r0
 8001642:	1824      	adds	r4, r4, r0
 8001644:	2701      	movs	r7, #1
 8001646:	0223      	lsls	r3, r4, #8
 8001648:	d400      	bmi.n	800164c <__aeabi_dadd+0x50c>
 800164a:	e6df      	b.n	800140c <__aeabi_dadd+0x2cc>
 800164c:	2702      	movs	r7, #2
 800164e:	e687      	b.n	8001360 <__aeabi_dadd+0x220>
 8001650:	4663      	mov	r3, ip
 8001652:	1ac5      	subs	r5, r0, r3
 8001654:	42a8      	cmp	r0, r5
 8001656:	4180      	sbcs	r0, r0
 8001658:	4653      	mov	r3, sl
 800165a:	4240      	negs	r0, r0
 800165c:	1ae4      	subs	r4, r4, r3
 800165e:	2701      	movs	r7, #1
 8001660:	1a24      	subs	r4, r4, r0
 8001662:	e5c0      	b.n	80011e6 <__aeabi_dadd+0xa6>
 8001664:	0762      	lsls	r2, r4, #29
 8001666:	08c0      	lsrs	r0, r0, #3
 8001668:	4302      	orrs	r2, r0
 800166a:	08e4      	lsrs	r4, r4, #3
 800166c:	e736      	b.n	80014dc <__aeabi_dadd+0x39c>
 800166e:	0011      	movs	r1, r2
 8001670:	4653      	mov	r3, sl
 8001672:	3920      	subs	r1, #32
 8001674:	40cb      	lsrs	r3, r1
 8001676:	4699      	mov	r9, r3
 8001678:	2a20      	cmp	r2, #32
 800167a:	d006      	beq.n	800168a <__aeabi_dadd+0x54a>
 800167c:	2140      	movs	r1, #64	@ 0x40
 800167e:	4653      	mov	r3, sl
 8001680:	1a8a      	subs	r2, r1, r2
 8001682:	4093      	lsls	r3, r2
 8001684:	4662      	mov	r2, ip
 8001686:	431a      	orrs	r2, r3
 8001688:	4694      	mov	ip, r2
 800168a:	4665      	mov	r5, ip
 800168c:	1e6b      	subs	r3, r5, #1
 800168e:	419d      	sbcs	r5, r3
 8001690:	464b      	mov	r3, r9
 8001692:	431d      	orrs	r5, r3
 8001694:	e659      	b.n	800134a <__aeabi_dadd+0x20a>
 8001696:	0762      	lsls	r2, r4, #29
 8001698:	08c0      	lsrs	r0, r0, #3
 800169a:	4302      	orrs	r2, r0
 800169c:	08e4      	lsrs	r4, r4, #3
 800169e:	e70d      	b.n	80014bc <__aeabi_dadd+0x37c>
 80016a0:	4653      	mov	r3, sl
 80016a2:	075a      	lsls	r2, r3, #29
 80016a4:	4663      	mov	r3, ip
 80016a6:	08d8      	lsrs	r0, r3, #3
 80016a8:	4653      	mov	r3, sl
 80016aa:	000e      	movs	r6, r1
 80016ac:	4302      	orrs	r2, r0
 80016ae:	08dc      	lsrs	r4, r3, #3
 80016b0:	e714      	b.n	80014dc <__aeabi_dadd+0x39c>
 80016b2:	0015      	movs	r5, r2
 80016b4:	0026      	movs	r6, r4
 80016b6:	3d20      	subs	r5, #32
 80016b8:	40ee      	lsrs	r6, r5
 80016ba:	2a20      	cmp	r2, #32
 80016bc:	d003      	beq.n	80016c6 <__aeabi_dadd+0x586>
 80016be:	2540      	movs	r5, #64	@ 0x40
 80016c0:	1aaa      	subs	r2, r5, r2
 80016c2:	4094      	lsls	r4, r2
 80016c4:	4320      	orrs	r0, r4
 80016c6:	1e42      	subs	r2, r0, #1
 80016c8:	4190      	sbcs	r0, r2
 80016ca:	0005      	movs	r5, r0
 80016cc:	4335      	orrs	r5, r6
 80016ce:	e606      	b.n	80012de <__aeabi_dadd+0x19e>
 80016d0:	2a00      	cmp	r2, #0
 80016d2:	d07c      	beq.n	80017ce <__aeabi_dadd+0x68e>
 80016d4:	4662      	mov	r2, ip
 80016d6:	4653      	mov	r3, sl
 80016d8:	08c0      	lsrs	r0, r0, #3
 80016da:	431a      	orrs	r2, r3
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dadd+0x5a0>
 80016de:	e6fa      	b.n	80014d6 <__aeabi_dadd+0x396>
 80016e0:	0762      	lsls	r2, r4, #29
 80016e2:	4310      	orrs	r0, r2
 80016e4:	2280      	movs	r2, #128	@ 0x80
 80016e6:	08e4      	lsrs	r4, r4, #3
 80016e8:	0312      	lsls	r2, r2, #12
 80016ea:	4214      	tst	r4, r2
 80016ec:	d008      	beq.n	8001700 <__aeabi_dadd+0x5c0>
 80016ee:	08d9      	lsrs	r1, r3, #3
 80016f0:	4211      	tst	r1, r2
 80016f2:	d105      	bne.n	8001700 <__aeabi_dadd+0x5c0>
 80016f4:	4663      	mov	r3, ip
 80016f6:	08d8      	lsrs	r0, r3, #3
 80016f8:	4653      	mov	r3, sl
 80016fa:	000c      	movs	r4, r1
 80016fc:	075b      	lsls	r3, r3, #29
 80016fe:	4318      	orrs	r0, r3
 8001700:	0f42      	lsrs	r2, r0, #29
 8001702:	00c0      	lsls	r0, r0, #3
 8001704:	08c0      	lsrs	r0, r0, #3
 8001706:	0752      	lsls	r2, r2, #29
 8001708:	4302      	orrs	r2, r0
 800170a:	e6e7      	b.n	80014dc <__aeabi_dadd+0x39c>
 800170c:	2a00      	cmp	r2, #0
 800170e:	d100      	bne.n	8001712 <__aeabi_dadd+0x5d2>
 8001710:	e72d      	b.n	800156e <__aeabi_dadd+0x42e>
 8001712:	4663      	mov	r3, ip
 8001714:	08d8      	lsrs	r0, r3, #3
 8001716:	4653      	mov	r3, sl
 8001718:	075a      	lsls	r2, r3, #29
 800171a:	000e      	movs	r6, r1
 800171c:	4302      	orrs	r2, r0
 800171e:	08dc      	lsrs	r4, r3, #3
 8001720:	e6cc      	b.n	80014bc <__aeabi_dadd+0x37c>
 8001722:	4663      	mov	r3, ip
 8001724:	1a1d      	subs	r5, r3, r0
 8001726:	45ac      	cmp	ip, r5
 8001728:	4192      	sbcs	r2, r2
 800172a:	4653      	mov	r3, sl
 800172c:	4252      	negs	r2, r2
 800172e:	1b1c      	subs	r4, r3, r4
 8001730:	000e      	movs	r6, r1
 8001732:	4688      	mov	r8, r1
 8001734:	1aa4      	subs	r4, r4, r2
 8001736:	3701      	adds	r7, #1
 8001738:	e555      	b.n	80011e6 <__aeabi_dadd+0xa6>
 800173a:	4663      	mov	r3, ip
 800173c:	08d9      	lsrs	r1, r3, #3
 800173e:	4653      	mov	r3, sl
 8001740:	075a      	lsls	r2, r3, #29
 8001742:	430a      	orrs	r2, r1
 8001744:	08dc      	lsrs	r4, r3, #3
 8001746:	e6c9      	b.n	80014dc <__aeabi_dadd+0x39c>
 8001748:	4660      	mov	r0, ip
 800174a:	4654      	mov	r4, sl
 800174c:	e6d4      	b.n	80014f8 <__aeabi_dadd+0x3b8>
 800174e:	08c0      	lsrs	r0, r0, #3
 8001750:	2a00      	cmp	r2, #0
 8001752:	d100      	bne.n	8001756 <__aeabi_dadd+0x616>
 8001754:	e6bf      	b.n	80014d6 <__aeabi_dadd+0x396>
 8001756:	0762      	lsls	r2, r4, #29
 8001758:	4310      	orrs	r0, r2
 800175a:	2280      	movs	r2, #128	@ 0x80
 800175c:	08e4      	lsrs	r4, r4, #3
 800175e:	0312      	lsls	r2, r2, #12
 8001760:	4214      	tst	r4, r2
 8001762:	d0cd      	beq.n	8001700 <__aeabi_dadd+0x5c0>
 8001764:	08dd      	lsrs	r5, r3, #3
 8001766:	4215      	tst	r5, r2
 8001768:	d1ca      	bne.n	8001700 <__aeabi_dadd+0x5c0>
 800176a:	4663      	mov	r3, ip
 800176c:	08d8      	lsrs	r0, r3, #3
 800176e:	4653      	mov	r3, sl
 8001770:	075b      	lsls	r3, r3, #29
 8001772:	000e      	movs	r6, r1
 8001774:	002c      	movs	r4, r5
 8001776:	4318      	orrs	r0, r3
 8001778:	e7c2      	b.n	8001700 <__aeabi_dadd+0x5c0>
 800177a:	4663      	mov	r3, ip
 800177c:	08d9      	lsrs	r1, r3, #3
 800177e:	4653      	mov	r3, sl
 8001780:	075a      	lsls	r2, r3, #29
 8001782:	430a      	orrs	r2, r1
 8001784:	08dc      	lsrs	r4, r3, #3
 8001786:	e699      	b.n	80014bc <__aeabi_dadd+0x37c>
 8001788:	4663      	mov	r3, ip
 800178a:	08d8      	lsrs	r0, r3, #3
 800178c:	4653      	mov	r3, sl
 800178e:	075a      	lsls	r2, r3, #29
 8001790:	000e      	movs	r6, r1
 8001792:	4302      	orrs	r2, r0
 8001794:	08dc      	lsrs	r4, r3, #3
 8001796:	e6a1      	b.n	80014dc <__aeabi_dadd+0x39c>
 8001798:	0011      	movs	r1, r2
 800179a:	0027      	movs	r7, r4
 800179c:	3920      	subs	r1, #32
 800179e:	40cf      	lsrs	r7, r1
 80017a0:	2a20      	cmp	r2, #32
 80017a2:	d003      	beq.n	80017ac <__aeabi_dadd+0x66c>
 80017a4:	2140      	movs	r1, #64	@ 0x40
 80017a6:	1a8a      	subs	r2, r1, r2
 80017a8:	4094      	lsls	r4, r2
 80017aa:	4320      	orrs	r0, r4
 80017ac:	1e42      	subs	r2, r0, #1
 80017ae:	4190      	sbcs	r0, r2
 80017b0:	0005      	movs	r5, r0
 80017b2:	433d      	orrs	r5, r7
 80017b4:	e651      	b.n	800145a <__aeabi_dadd+0x31a>
 80017b6:	000c      	movs	r4, r1
 80017b8:	2500      	movs	r5, #0
 80017ba:	2200      	movs	r2, #0
 80017bc:	e558      	b.n	8001270 <__aeabi_dadd+0x130>
 80017be:	4460      	add	r0, ip
 80017c0:	4560      	cmp	r0, ip
 80017c2:	4192      	sbcs	r2, r2
 80017c4:	4454      	add	r4, sl
 80017c6:	4252      	negs	r2, r2
 80017c8:	0005      	movs	r5, r0
 80017ca:	18a4      	adds	r4, r4, r2
 80017cc:	e73a      	b.n	8001644 <__aeabi_dadd+0x504>
 80017ce:	4653      	mov	r3, sl
 80017d0:	075a      	lsls	r2, r3, #29
 80017d2:	4663      	mov	r3, ip
 80017d4:	08d9      	lsrs	r1, r3, #3
 80017d6:	4653      	mov	r3, sl
 80017d8:	430a      	orrs	r2, r1
 80017da:	08dc      	lsrs	r4, r3, #3
 80017dc:	e67e      	b.n	80014dc <__aeabi_dadd+0x39c>
 80017de:	001a      	movs	r2, r3
 80017e0:	001c      	movs	r4, r3
 80017e2:	432a      	orrs	r2, r5
 80017e4:	d000      	beq.n	80017e8 <__aeabi_dadd+0x6a8>
 80017e6:	e6ab      	b.n	8001540 <__aeabi_dadd+0x400>
 80017e8:	e6c1      	b.n	800156e <__aeabi_dadd+0x42e>
 80017ea:	2120      	movs	r1, #32
 80017ec:	2500      	movs	r5, #0
 80017ee:	1a09      	subs	r1, r1, r0
 80017f0:	e519      	b.n	8001226 <__aeabi_dadd+0xe6>
 80017f2:	2200      	movs	r2, #0
 80017f4:	2500      	movs	r5, #0
 80017f6:	4c01      	ldr	r4, [pc, #4]	@ (80017fc <__aeabi_dadd+0x6bc>)
 80017f8:	e53a      	b.n	8001270 <__aeabi_dadd+0x130>
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	000007ff 	.word	0x000007ff
 8001800:	ff7fffff 	.word	0xff7fffff
 8001804:	000007fe 	.word	0x000007fe

08001808 <__aeabi_ddiv>:
 8001808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180a:	46de      	mov	lr, fp
 800180c:	4645      	mov	r5, r8
 800180e:	4657      	mov	r7, sl
 8001810:	464e      	mov	r6, r9
 8001812:	b5e0      	push	{r5, r6, r7, lr}
 8001814:	b087      	sub	sp, #28
 8001816:	9200      	str	r2, [sp, #0]
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	030b      	lsls	r3, r1, #12
 800181c:	0b1b      	lsrs	r3, r3, #12
 800181e:	469b      	mov	fp, r3
 8001820:	0fca      	lsrs	r2, r1, #31
 8001822:	004b      	lsls	r3, r1, #1
 8001824:	0004      	movs	r4, r0
 8001826:	4680      	mov	r8, r0
 8001828:	0d5b      	lsrs	r3, r3, #21
 800182a:	9202      	str	r2, [sp, #8]
 800182c:	d100      	bne.n	8001830 <__aeabi_ddiv+0x28>
 800182e:	e16a      	b.n	8001b06 <__aeabi_ddiv+0x2fe>
 8001830:	4ad4      	ldr	r2, [pc, #848]	@ (8001b84 <__aeabi_ddiv+0x37c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d100      	bne.n	8001838 <__aeabi_ddiv+0x30>
 8001836:	e18c      	b.n	8001b52 <__aeabi_ddiv+0x34a>
 8001838:	4659      	mov	r1, fp
 800183a:	0f42      	lsrs	r2, r0, #29
 800183c:	00c9      	lsls	r1, r1, #3
 800183e:	430a      	orrs	r2, r1
 8001840:	2180      	movs	r1, #128	@ 0x80
 8001842:	0409      	lsls	r1, r1, #16
 8001844:	4311      	orrs	r1, r2
 8001846:	00c2      	lsls	r2, r0, #3
 8001848:	4690      	mov	r8, r2
 800184a:	4acf      	ldr	r2, [pc, #828]	@ (8001b88 <__aeabi_ddiv+0x380>)
 800184c:	4689      	mov	r9, r1
 800184e:	4692      	mov	sl, r2
 8001850:	449a      	add	sl, r3
 8001852:	2300      	movs	r3, #0
 8001854:	2400      	movs	r4, #0
 8001856:	9303      	str	r3, [sp, #12]
 8001858:	9e00      	ldr	r6, [sp, #0]
 800185a:	9f01      	ldr	r7, [sp, #4]
 800185c:	033b      	lsls	r3, r7, #12
 800185e:	0b1b      	lsrs	r3, r3, #12
 8001860:	469b      	mov	fp, r3
 8001862:	007b      	lsls	r3, r7, #1
 8001864:	0030      	movs	r0, r6
 8001866:	0d5b      	lsrs	r3, r3, #21
 8001868:	0ffd      	lsrs	r5, r7, #31
 800186a:	2b00      	cmp	r3, #0
 800186c:	d100      	bne.n	8001870 <__aeabi_ddiv+0x68>
 800186e:	e128      	b.n	8001ac2 <__aeabi_ddiv+0x2ba>
 8001870:	4ac4      	ldr	r2, [pc, #784]	@ (8001b84 <__aeabi_ddiv+0x37c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d100      	bne.n	8001878 <__aeabi_ddiv+0x70>
 8001876:	e177      	b.n	8001b68 <__aeabi_ddiv+0x360>
 8001878:	4659      	mov	r1, fp
 800187a:	0f72      	lsrs	r2, r6, #29
 800187c:	00c9      	lsls	r1, r1, #3
 800187e:	430a      	orrs	r2, r1
 8001880:	2180      	movs	r1, #128	@ 0x80
 8001882:	0409      	lsls	r1, r1, #16
 8001884:	4311      	orrs	r1, r2
 8001886:	468b      	mov	fp, r1
 8001888:	49bf      	ldr	r1, [pc, #764]	@ (8001b88 <__aeabi_ddiv+0x380>)
 800188a:	00f2      	lsls	r2, r6, #3
 800188c:	468c      	mov	ip, r1
 800188e:	4651      	mov	r1, sl
 8001890:	4463      	add	r3, ip
 8001892:	1acb      	subs	r3, r1, r3
 8001894:	469a      	mov	sl, r3
 8001896:	2300      	movs	r3, #0
 8001898:	9e02      	ldr	r6, [sp, #8]
 800189a:	406e      	eors	r6, r5
 800189c:	2c0f      	cmp	r4, #15
 800189e:	d827      	bhi.n	80018f0 <__aeabi_ddiv+0xe8>
 80018a0:	49ba      	ldr	r1, [pc, #744]	@ (8001b8c <__aeabi_ddiv+0x384>)
 80018a2:	00a4      	lsls	r4, r4, #2
 80018a4:	5909      	ldr	r1, [r1, r4]
 80018a6:	468f      	mov	pc, r1
 80018a8:	46cb      	mov	fp, r9
 80018aa:	4642      	mov	r2, r8
 80018ac:	9e02      	ldr	r6, [sp, #8]
 80018ae:	9b03      	ldr	r3, [sp, #12]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d016      	beq.n	80018e2 <__aeabi_ddiv+0xda>
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d100      	bne.n	80018ba <__aeabi_ddiv+0xb2>
 80018b8:	e2a6      	b.n	8001e08 <__aeabi_ddiv+0x600>
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d000      	beq.n	80018c0 <__aeabi_ddiv+0xb8>
 80018be:	e0df      	b.n	8001a80 <__aeabi_ddiv+0x278>
 80018c0:	2200      	movs	r2, #0
 80018c2:	2300      	movs	r3, #0
 80018c4:	2400      	movs	r4, #0
 80018c6:	4690      	mov	r8, r2
 80018c8:	051b      	lsls	r3, r3, #20
 80018ca:	4323      	orrs	r3, r4
 80018cc:	07f6      	lsls	r6, r6, #31
 80018ce:	4333      	orrs	r3, r6
 80018d0:	4640      	mov	r0, r8
 80018d2:	0019      	movs	r1, r3
 80018d4:	b007      	add	sp, #28
 80018d6:	bcf0      	pop	{r4, r5, r6, r7}
 80018d8:	46bb      	mov	fp, r7
 80018da:	46b2      	mov	sl, r6
 80018dc:	46a9      	mov	r9, r5
 80018de:	46a0      	mov	r8, r4
 80018e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e2:	2200      	movs	r2, #0
 80018e4:	2400      	movs	r4, #0
 80018e6:	4690      	mov	r8, r2
 80018e8:	4ba6      	ldr	r3, [pc, #664]	@ (8001b84 <__aeabi_ddiv+0x37c>)
 80018ea:	e7ed      	b.n	80018c8 <__aeabi_ddiv+0xc0>
 80018ec:	002e      	movs	r6, r5
 80018ee:	e7df      	b.n	80018b0 <__aeabi_ddiv+0xa8>
 80018f0:	45cb      	cmp	fp, r9
 80018f2:	d200      	bcs.n	80018f6 <__aeabi_ddiv+0xee>
 80018f4:	e1d4      	b.n	8001ca0 <__aeabi_ddiv+0x498>
 80018f6:	d100      	bne.n	80018fa <__aeabi_ddiv+0xf2>
 80018f8:	e1cf      	b.n	8001c9a <__aeabi_ddiv+0x492>
 80018fa:	2301      	movs	r3, #1
 80018fc:	425b      	negs	r3, r3
 80018fe:	469c      	mov	ip, r3
 8001900:	4644      	mov	r4, r8
 8001902:	4648      	mov	r0, r9
 8001904:	2700      	movs	r7, #0
 8001906:	44e2      	add	sl, ip
 8001908:	465b      	mov	r3, fp
 800190a:	0e15      	lsrs	r5, r2, #24
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	431d      	orrs	r5, r3
 8001910:	0c19      	lsrs	r1, r3, #16
 8001912:	042b      	lsls	r3, r5, #16
 8001914:	0212      	lsls	r2, r2, #8
 8001916:	9500      	str	r5, [sp, #0]
 8001918:	0c1d      	lsrs	r5, r3, #16
 800191a:	4691      	mov	r9, r2
 800191c:	9102      	str	r1, [sp, #8]
 800191e:	9503      	str	r5, [sp, #12]
 8001920:	f7fe fc78 	bl	8000214 <__aeabi_uidivmod>
 8001924:	0002      	movs	r2, r0
 8001926:	436a      	muls	r2, r5
 8001928:	040b      	lsls	r3, r1, #16
 800192a:	0c21      	lsrs	r1, r4, #16
 800192c:	4680      	mov	r8, r0
 800192e:	4319      	orrs	r1, r3
 8001930:	428a      	cmp	r2, r1
 8001932:	d909      	bls.n	8001948 <__aeabi_ddiv+0x140>
 8001934:	9d00      	ldr	r5, [sp, #0]
 8001936:	2301      	movs	r3, #1
 8001938:	46ac      	mov	ip, r5
 800193a:	425b      	negs	r3, r3
 800193c:	4461      	add	r1, ip
 800193e:	469c      	mov	ip, r3
 8001940:	44e0      	add	r8, ip
 8001942:	428d      	cmp	r5, r1
 8001944:	d800      	bhi.n	8001948 <__aeabi_ddiv+0x140>
 8001946:	e1fb      	b.n	8001d40 <__aeabi_ddiv+0x538>
 8001948:	1a88      	subs	r0, r1, r2
 800194a:	9902      	ldr	r1, [sp, #8]
 800194c:	f7fe fc62 	bl	8000214 <__aeabi_uidivmod>
 8001950:	9a03      	ldr	r2, [sp, #12]
 8001952:	0424      	lsls	r4, r4, #16
 8001954:	4342      	muls	r2, r0
 8001956:	0409      	lsls	r1, r1, #16
 8001958:	0c24      	lsrs	r4, r4, #16
 800195a:	0003      	movs	r3, r0
 800195c:	430c      	orrs	r4, r1
 800195e:	42a2      	cmp	r2, r4
 8001960:	d906      	bls.n	8001970 <__aeabi_ddiv+0x168>
 8001962:	9900      	ldr	r1, [sp, #0]
 8001964:	3b01      	subs	r3, #1
 8001966:	468c      	mov	ip, r1
 8001968:	4464      	add	r4, ip
 800196a:	42a1      	cmp	r1, r4
 800196c:	d800      	bhi.n	8001970 <__aeabi_ddiv+0x168>
 800196e:	e1e1      	b.n	8001d34 <__aeabi_ddiv+0x52c>
 8001970:	1aa0      	subs	r0, r4, r2
 8001972:	4642      	mov	r2, r8
 8001974:	0412      	lsls	r2, r2, #16
 8001976:	431a      	orrs	r2, r3
 8001978:	4693      	mov	fp, r2
 800197a:	464b      	mov	r3, r9
 800197c:	4659      	mov	r1, fp
 800197e:	0c1b      	lsrs	r3, r3, #16
 8001980:	001d      	movs	r5, r3
 8001982:	9304      	str	r3, [sp, #16]
 8001984:	040b      	lsls	r3, r1, #16
 8001986:	4649      	mov	r1, r9
 8001988:	0409      	lsls	r1, r1, #16
 800198a:	0c09      	lsrs	r1, r1, #16
 800198c:	000c      	movs	r4, r1
 800198e:	0c1b      	lsrs	r3, r3, #16
 8001990:	435c      	muls	r4, r3
 8001992:	0c12      	lsrs	r2, r2, #16
 8001994:	436b      	muls	r3, r5
 8001996:	4688      	mov	r8, r1
 8001998:	4351      	muls	r1, r2
 800199a:	436a      	muls	r2, r5
 800199c:	0c25      	lsrs	r5, r4, #16
 800199e:	46ac      	mov	ip, r5
 80019a0:	185b      	adds	r3, r3, r1
 80019a2:	4463      	add	r3, ip
 80019a4:	4299      	cmp	r1, r3
 80019a6:	d903      	bls.n	80019b0 <__aeabi_ddiv+0x1a8>
 80019a8:	2180      	movs	r1, #128	@ 0x80
 80019aa:	0249      	lsls	r1, r1, #9
 80019ac:	468c      	mov	ip, r1
 80019ae:	4462      	add	r2, ip
 80019b0:	0c19      	lsrs	r1, r3, #16
 80019b2:	0424      	lsls	r4, r4, #16
 80019b4:	041b      	lsls	r3, r3, #16
 80019b6:	0c24      	lsrs	r4, r4, #16
 80019b8:	188a      	adds	r2, r1, r2
 80019ba:	191c      	adds	r4, r3, r4
 80019bc:	4290      	cmp	r0, r2
 80019be:	d302      	bcc.n	80019c6 <__aeabi_ddiv+0x1be>
 80019c0:	d116      	bne.n	80019f0 <__aeabi_ddiv+0x1e8>
 80019c2:	42a7      	cmp	r7, r4
 80019c4:	d214      	bcs.n	80019f0 <__aeabi_ddiv+0x1e8>
 80019c6:	465b      	mov	r3, fp
 80019c8:	9d00      	ldr	r5, [sp, #0]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	444f      	add	r7, r9
 80019ce:	9305      	str	r3, [sp, #20]
 80019d0:	454f      	cmp	r7, r9
 80019d2:	419b      	sbcs	r3, r3
 80019d4:	46ac      	mov	ip, r5
 80019d6:	425b      	negs	r3, r3
 80019d8:	4463      	add	r3, ip
 80019da:	18c0      	adds	r0, r0, r3
 80019dc:	4285      	cmp	r5, r0
 80019de:	d300      	bcc.n	80019e2 <__aeabi_ddiv+0x1da>
 80019e0:	e1a1      	b.n	8001d26 <__aeabi_ddiv+0x51e>
 80019e2:	4282      	cmp	r2, r0
 80019e4:	d900      	bls.n	80019e8 <__aeabi_ddiv+0x1e0>
 80019e6:	e1f6      	b.n	8001dd6 <__aeabi_ddiv+0x5ce>
 80019e8:	d100      	bne.n	80019ec <__aeabi_ddiv+0x1e4>
 80019ea:	e1f1      	b.n	8001dd0 <__aeabi_ddiv+0x5c8>
 80019ec:	9b05      	ldr	r3, [sp, #20]
 80019ee:	469b      	mov	fp, r3
 80019f0:	1b3c      	subs	r4, r7, r4
 80019f2:	42a7      	cmp	r7, r4
 80019f4:	41bf      	sbcs	r7, r7
 80019f6:	9d00      	ldr	r5, [sp, #0]
 80019f8:	1a80      	subs	r0, r0, r2
 80019fa:	427f      	negs	r7, r7
 80019fc:	1bc0      	subs	r0, r0, r7
 80019fe:	4285      	cmp	r5, r0
 8001a00:	d100      	bne.n	8001a04 <__aeabi_ddiv+0x1fc>
 8001a02:	e1d0      	b.n	8001da6 <__aeabi_ddiv+0x59e>
 8001a04:	9902      	ldr	r1, [sp, #8]
 8001a06:	f7fe fc05 	bl	8000214 <__aeabi_uidivmod>
 8001a0a:	9a03      	ldr	r2, [sp, #12]
 8001a0c:	040b      	lsls	r3, r1, #16
 8001a0e:	4342      	muls	r2, r0
 8001a10:	0c21      	lsrs	r1, r4, #16
 8001a12:	0007      	movs	r7, r0
 8001a14:	4319      	orrs	r1, r3
 8001a16:	428a      	cmp	r2, r1
 8001a18:	d900      	bls.n	8001a1c <__aeabi_ddiv+0x214>
 8001a1a:	e178      	b.n	8001d0e <__aeabi_ddiv+0x506>
 8001a1c:	1a88      	subs	r0, r1, r2
 8001a1e:	9902      	ldr	r1, [sp, #8]
 8001a20:	f7fe fbf8 	bl	8000214 <__aeabi_uidivmod>
 8001a24:	9a03      	ldr	r2, [sp, #12]
 8001a26:	0424      	lsls	r4, r4, #16
 8001a28:	4342      	muls	r2, r0
 8001a2a:	0409      	lsls	r1, r1, #16
 8001a2c:	0c24      	lsrs	r4, r4, #16
 8001a2e:	0003      	movs	r3, r0
 8001a30:	430c      	orrs	r4, r1
 8001a32:	42a2      	cmp	r2, r4
 8001a34:	d900      	bls.n	8001a38 <__aeabi_ddiv+0x230>
 8001a36:	e15d      	b.n	8001cf4 <__aeabi_ddiv+0x4ec>
 8001a38:	4641      	mov	r1, r8
 8001a3a:	1aa4      	subs	r4, r4, r2
 8001a3c:	043a      	lsls	r2, r7, #16
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	9d04      	ldr	r5, [sp, #16]
 8001a42:	0413      	lsls	r3, r2, #16
 8001a44:	0c1b      	lsrs	r3, r3, #16
 8001a46:	4359      	muls	r1, r3
 8001a48:	4647      	mov	r7, r8
 8001a4a:	436b      	muls	r3, r5
 8001a4c:	469c      	mov	ip, r3
 8001a4e:	0c10      	lsrs	r0, r2, #16
 8001a50:	4347      	muls	r7, r0
 8001a52:	0c0b      	lsrs	r3, r1, #16
 8001a54:	44bc      	add	ip, r7
 8001a56:	4463      	add	r3, ip
 8001a58:	4368      	muls	r0, r5
 8001a5a:	429f      	cmp	r7, r3
 8001a5c:	d903      	bls.n	8001a66 <__aeabi_ddiv+0x25e>
 8001a5e:	2580      	movs	r5, #128	@ 0x80
 8001a60:	026d      	lsls	r5, r5, #9
 8001a62:	46ac      	mov	ip, r5
 8001a64:	4460      	add	r0, ip
 8001a66:	0c1f      	lsrs	r7, r3, #16
 8001a68:	0409      	lsls	r1, r1, #16
 8001a6a:	041b      	lsls	r3, r3, #16
 8001a6c:	0c09      	lsrs	r1, r1, #16
 8001a6e:	183f      	adds	r7, r7, r0
 8001a70:	185b      	adds	r3, r3, r1
 8001a72:	42bc      	cmp	r4, r7
 8001a74:	d200      	bcs.n	8001a78 <__aeabi_ddiv+0x270>
 8001a76:	e102      	b.n	8001c7e <__aeabi_ddiv+0x476>
 8001a78:	d100      	bne.n	8001a7c <__aeabi_ddiv+0x274>
 8001a7a:	e0fd      	b.n	8001c78 <__aeabi_ddiv+0x470>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	4b43      	ldr	r3, [pc, #268]	@ (8001b90 <__aeabi_ddiv+0x388>)
 8001a82:	4453      	add	r3, sl
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	dc00      	bgt.n	8001a8a <__aeabi_ddiv+0x282>
 8001a88:	e0ae      	b.n	8001be8 <__aeabi_ddiv+0x3e0>
 8001a8a:	0751      	lsls	r1, r2, #29
 8001a8c:	d000      	beq.n	8001a90 <__aeabi_ddiv+0x288>
 8001a8e:	e198      	b.n	8001dc2 <__aeabi_ddiv+0x5ba>
 8001a90:	4659      	mov	r1, fp
 8001a92:	01c9      	lsls	r1, r1, #7
 8001a94:	d506      	bpl.n	8001aa4 <__aeabi_ddiv+0x29c>
 8001a96:	4659      	mov	r1, fp
 8001a98:	4b3e      	ldr	r3, [pc, #248]	@ (8001b94 <__aeabi_ddiv+0x38c>)
 8001a9a:	4019      	ands	r1, r3
 8001a9c:	2380      	movs	r3, #128	@ 0x80
 8001a9e:	468b      	mov	fp, r1
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4453      	add	r3, sl
 8001aa4:	493c      	ldr	r1, [pc, #240]	@ (8001b98 <__aeabi_ddiv+0x390>)
 8001aa6:	428b      	cmp	r3, r1
 8001aa8:	dd00      	ble.n	8001aac <__aeabi_ddiv+0x2a4>
 8001aaa:	e71a      	b.n	80018e2 <__aeabi_ddiv+0xda>
 8001aac:	4659      	mov	r1, fp
 8001aae:	08d2      	lsrs	r2, r2, #3
 8001ab0:	0749      	lsls	r1, r1, #29
 8001ab2:	4311      	orrs	r1, r2
 8001ab4:	465a      	mov	r2, fp
 8001ab6:	055b      	lsls	r3, r3, #21
 8001ab8:	0254      	lsls	r4, r2, #9
 8001aba:	4688      	mov	r8, r1
 8001abc:	0b24      	lsrs	r4, r4, #12
 8001abe:	0d5b      	lsrs	r3, r3, #21
 8001ac0:	e702      	b.n	80018c8 <__aeabi_ddiv+0xc0>
 8001ac2:	465a      	mov	r2, fp
 8001ac4:	9b00      	ldr	r3, [sp, #0]
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	d100      	bne.n	8001acc <__aeabi_ddiv+0x2c4>
 8001aca:	e07e      	b.n	8001bca <__aeabi_ddiv+0x3c2>
 8001acc:	465b      	mov	r3, fp
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_ddiv+0x2cc>
 8001ad2:	e100      	b.n	8001cd6 <__aeabi_ddiv+0x4ce>
 8001ad4:	4658      	mov	r0, fp
 8001ad6:	f001 fa5b 	bl	8002f90 <__clzsi2>
 8001ada:	0002      	movs	r2, r0
 8001adc:	0003      	movs	r3, r0
 8001ade:	3a0b      	subs	r2, #11
 8001ae0:	271d      	movs	r7, #29
 8001ae2:	9e00      	ldr	r6, [sp, #0]
 8001ae4:	1aba      	subs	r2, r7, r2
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	4658      	mov	r0, fp
 8001aea:	40d6      	lsrs	r6, r2
 8001aec:	3908      	subs	r1, #8
 8001aee:	4088      	lsls	r0, r1
 8001af0:	0032      	movs	r2, r6
 8001af2:	4302      	orrs	r2, r0
 8001af4:	4693      	mov	fp, r2
 8001af6:	9a00      	ldr	r2, [sp, #0]
 8001af8:	408a      	lsls	r2, r1
 8001afa:	4928      	ldr	r1, [pc, #160]	@ (8001b9c <__aeabi_ddiv+0x394>)
 8001afc:	4453      	add	r3, sl
 8001afe:	468a      	mov	sl, r1
 8001b00:	449a      	add	sl, r3
 8001b02:	2300      	movs	r3, #0
 8001b04:	e6c8      	b.n	8001898 <__aeabi_ddiv+0x90>
 8001b06:	465b      	mov	r3, fp
 8001b08:	4303      	orrs	r3, r0
 8001b0a:	4699      	mov	r9, r3
 8001b0c:	d056      	beq.n	8001bbc <__aeabi_ddiv+0x3b4>
 8001b0e:	465b      	mov	r3, fp
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d100      	bne.n	8001b16 <__aeabi_ddiv+0x30e>
 8001b14:	e0cd      	b.n	8001cb2 <__aeabi_ddiv+0x4aa>
 8001b16:	4658      	mov	r0, fp
 8001b18:	f001 fa3a 	bl	8002f90 <__clzsi2>
 8001b1c:	230b      	movs	r3, #11
 8001b1e:	425b      	negs	r3, r3
 8001b20:	469c      	mov	ip, r3
 8001b22:	0002      	movs	r2, r0
 8001b24:	4484      	add	ip, r0
 8001b26:	4666      	mov	r6, ip
 8001b28:	231d      	movs	r3, #29
 8001b2a:	1b9b      	subs	r3, r3, r6
 8001b2c:	0026      	movs	r6, r4
 8001b2e:	0011      	movs	r1, r2
 8001b30:	4658      	mov	r0, fp
 8001b32:	40de      	lsrs	r6, r3
 8001b34:	3908      	subs	r1, #8
 8001b36:	4088      	lsls	r0, r1
 8001b38:	0033      	movs	r3, r6
 8001b3a:	4303      	orrs	r3, r0
 8001b3c:	4699      	mov	r9, r3
 8001b3e:	0023      	movs	r3, r4
 8001b40:	408b      	lsls	r3, r1
 8001b42:	4698      	mov	r8, r3
 8001b44:	4b16      	ldr	r3, [pc, #88]	@ (8001ba0 <__aeabi_ddiv+0x398>)
 8001b46:	2400      	movs	r4, #0
 8001b48:	1a9b      	subs	r3, r3, r2
 8001b4a:	469a      	mov	sl, r3
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9303      	str	r3, [sp, #12]
 8001b50:	e682      	b.n	8001858 <__aeabi_ddiv+0x50>
 8001b52:	465a      	mov	r2, fp
 8001b54:	4302      	orrs	r2, r0
 8001b56:	4691      	mov	r9, r2
 8001b58:	d12a      	bne.n	8001bb0 <__aeabi_ddiv+0x3a8>
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	469a      	mov	sl, r3
 8001b5e:	2302      	movs	r3, #2
 8001b60:	4690      	mov	r8, r2
 8001b62:	2408      	movs	r4, #8
 8001b64:	9303      	str	r3, [sp, #12]
 8001b66:	e677      	b.n	8001858 <__aeabi_ddiv+0x50>
 8001b68:	465a      	mov	r2, fp
 8001b6a:	9b00      	ldr	r3, [sp, #0]
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba4 <__aeabi_ddiv+0x39c>)
 8001b70:	469c      	mov	ip, r3
 8001b72:	44e2      	add	sl, ip
 8001b74:	2a00      	cmp	r2, #0
 8001b76:	d117      	bne.n	8001ba8 <__aeabi_ddiv+0x3a0>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	431c      	orrs	r4, r3
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	469b      	mov	fp, r3
 8001b80:	3302      	adds	r3, #2
 8001b82:	e689      	b.n	8001898 <__aeabi_ddiv+0x90>
 8001b84:	000007ff 	.word	0x000007ff
 8001b88:	fffffc01 	.word	0xfffffc01
 8001b8c:	080077ac 	.word	0x080077ac
 8001b90:	000003ff 	.word	0x000003ff
 8001b94:	feffffff 	.word	0xfeffffff
 8001b98:	000007fe 	.word	0x000007fe
 8001b9c:	000003f3 	.word	0x000003f3
 8001ba0:	fffffc0d 	.word	0xfffffc0d
 8001ba4:	fffff801 	.word	0xfffff801
 8001ba8:	2303      	movs	r3, #3
 8001baa:	0032      	movs	r2, r6
 8001bac:	431c      	orrs	r4, r3
 8001bae:	e673      	b.n	8001898 <__aeabi_ddiv+0x90>
 8001bb0:	469a      	mov	sl, r3
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	46d9      	mov	r9, fp
 8001bb6:	240c      	movs	r4, #12
 8001bb8:	9303      	str	r3, [sp, #12]
 8001bba:	e64d      	b.n	8001858 <__aeabi_ddiv+0x50>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	4698      	mov	r8, r3
 8001bc0:	469a      	mov	sl, r3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	2404      	movs	r4, #4
 8001bc6:	9303      	str	r3, [sp, #12]
 8001bc8:	e646      	b.n	8001858 <__aeabi_ddiv+0x50>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	431c      	orrs	r4, r3
 8001bce:	2300      	movs	r3, #0
 8001bd0:	469b      	mov	fp, r3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	e660      	b.n	8001898 <__aeabi_ddiv+0x90>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	2480      	movs	r4, #128	@ 0x80
 8001bda:	4698      	mov	r8, r3
 8001bdc:	2600      	movs	r6, #0
 8001bde:	4b92      	ldr	r3, [pc, #584]	@ (8001e28 <__aeabi_ddiv+0x620>)
 8001be0:	0324      	lsls	r4, r4, #12
 8001be2:	e671      	b.n	80018c8 <__aeabi_ddiv+0xc0>
 8001be4:	2201      	movs	r2, #1
 8001be6:	4252      	negs	r2, r2
 8001be8:	2101      	movs	r1, #1
 8001bea:	1ac9      	subs	r1, r1, r3
 8001bec:	2938      	cmp	r1, #56	@ 0x38
 8001bee:	dd00      	ble.n	8001bf2 <__aeabi_ddiv+0x3ea>
 8001bf0:	e666      	b.n	80018c0 <__aeabi_ddiv+0xb8>
 8001bf2:	291f      	cmp	r1, #31
 8001bf4:	dc00      	bgt.n	8001bf8 <__aeabi_ddiv+0x3f0>
 8001bf6:	e0ab      	b.n	8001d50 <__aeabi_ddiv+0x548>
 8001bf8:	201f      	movs	r0, #31
 8001bfa:	4240      	negs	r0, r0
 8001bfc:	1ac3      	subs	r3, r0, r3
 8001bfe:	4658      	mov	r0, fp
 8001c00:	40d8      	lsrs	r0, r3
 8001c02:	0003      	movs	r3, r0
 8001c04:	2920      	cmp	r1, #32
 8001c06:	d004      	beq.n	8001c12 <__aeabi_ddiv+0x40a>
 8001c08:	4658      	mov	r0, fp
 8001c0a:	4988      	ldr	r1, [pc, #544]	@ (8001e2c <__aeabi_ddiv+0x624>)
 8001c0c:	4451      	add	r1, sl
 8001c0e:	4088      	lsls	r0, r1
 8001c10:	4302      	orrs	r2, r0
 8001c12:	1e51      	subs	r1, r2, #1
 8001c14:	418a      	sbcs	r2, r1
 8001c16:	431a      	orrs	r2, r3
 8001c18:	2307      	movs	r3, #7
 8001c1a:	0019      	movs	r1, r3
 8001c1c:	2400      	movs	r4, #0
 8001c1e:	4011      	ands	r1, r2
 8001c20:	4213      	tst	r3, r2
 8001c22:	d00c      	beq.n	8001c3e <__aeabi_ddiv+0x436>
 8001c24:	230f      	movs	r3, #15
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d100      	bne.n	8001c2e <__aeabi_ddiv+0x426>
 8001c2c:	e0f9      	b.n	8001e22 <__aeabi_ddiv+0x61a>
 8001c2e:	1d11      	adds	r1, r2, #4
 8001c30:	4291      	cmp	r1, r2
 8001c32:	419b      	sbcs	r3, r3
 8001c34:	000a      	movs	r2, r1
 8001c36:	425b      	negs	r3, r3
 8001c38:	0759      	lsls	r1, r3, #29
 8001c3a:	025b      	lsls	r3, r3, #9
 8001c3c:	0b1c      	lsrs	r4, r3, #12
 8001c3e:	08d2      	lsrs	r2, r2, #3
 8001c40:	430a      	orrs	r2, r1
 8001c42:	4690      	mov	r8, r2
 8001c44:	2300      	movs	r3, #0
 8001c46:	e63f      	b.n	80018c8 <__aeabi_ddiv+0xc0>
 8001c48:	2480      	movs	r4, #128	@ 0x80
 8001c4a:	464b      	mov	r3, r9
 8001c4c:	0324      	lsls	r4, r4, #12
 8001c4e:	4223      	tst	r3, r4
 8001c50:	d009      	beq.n	8001c66 <__aeabi_ddiv+0x45e>
 8001c52:	465b      	mov	r3, fp
 8001c54:	4223      	tst	r3, r4
 8001c56:	d106      	bne.n	8001c66 <__aeabi_ddiv+0x45e>
 8001c58:	431c      	orrs	r4, r3
 8001c5a:	0324      	lsls	r4, r4, #12
 8001c5c:	002e      	movs	r6, r5
 8001c5e:	4690      	mov	r8, r2
 8001c60:	4b71      	ldr	r3, [pc, #452]	@ (8001e28 <__aeabi_ddiv+0x620>)
 8001c62:	0b24      	lsrs	r4, r4, #12
 8001c64:	e630      	b.n	80018c8 <__aeabi_ddiv+0xc0>
 8001c66:	2480      	movs	r4, #128	@ 0x80
 8001c68:	464b      	mov	r3, r9
 8001c6a:	0324      	lsls	r4, r4, #12
 8001c6c:	431c      	orrs	r4, r3
 8001c6e:	0324      	lsls	r4, r4, #12
 8001c70:	9e02      	ldr	r6, [sp, #8]
 8001c72:	4b6d      	ldr	r3, [pc, #436]	@ (8001e28 <__aeabi_ddiv+0x620>)
 8001c74:	0b24      	lsrs	r4, r4, #12
 8001c76:	e627      	b.n	80018c8 <__aeabi_ddiv+0xc0>
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d100      	bne.n	8001c7e <__aeabi_ddiv+0x476>
 8001c7c:	e700      	b.n	8001a80 <__aeabi_ddiv+0x278>
 8001c7e:	9800      	ldr	r0, [sp, #0]
 8001c80:	1e51      	subs	r1, r2, #1
 8001c82:	4684      	mov	ip, r0
 8001c84:	4464      	add	r4, ip
 8001c86:	4284      	cmp	r4, r0
 8001c88:	d200      	bcs.n	8001c8c <__aeabi_ddiv+0x484>
 8001c8a:	e084      	b.n	8001d96 <__aeabi_ddiv+0x58e>
 8001c8c:	42bc      	cmp	r4, r7
 8001c8e:	d200      	bcs.n	8001c92 <__aeabi_ddiv+0x48a>
 8001c90:	e0ae      	b.n	8001df0 <__aeabi_ddiv+0x5e8>
 8001c92:	d100      	bne.n	8001c96 <__aeabi_ddiv+0x48e>
 8001c94:	e0c1      	b.n	8001e1a <__aeabi_ddiv+0x612>
 8001c96:	000a      	movs	r2, r1
 8001c98:	e6f0      	b.n	8001a7c <__aeabi_ddiv+0x274>
 8001c9a:	4542      	cmp	r2, r8
 8001c9c:	d900      	bls.n	8001ca0 <__aeabi_ddiv+0x498>
 8001c9e:	e62c      	b.n	80018fa <__aeabi_ddiv+0xf2>
 8001ca0:	464b      	mov	r3, r9
 8001ca2:	07dc      	lsls	r4, r3, #31
 8001ca4:	0858      	lsrs	r0, r3, #1
 8001ca6:	4643      	mov	r3, r8
 8001ca8:	085b      	lsrs	r3, r3, #1
 8001caa:	431c      	orrs	r4, r3
 8001cac:	4643      	mov	r3, r8
 8001cae:	07df      	lsls	r7, r3, #31
 8001cb0:	e62a      	b.n	8001908 <__aeabi_ddiv+0x100>
 8001cb2:	f001 f96d 	bl	8002f90 <__clzsi2>
 8001cb6:	2315      	movs	r3, #21
 8001cb8:	469c      	mov	ip, r3
 8001cba:	4484      	add	ip, r0
 8001cbc:	0002      	movs	r2, r0
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	3220      	adds	r2, #32
 8001cc2:	2b1c      	cmp	r3, #28
 8001cc4:	dc00      	bgt.n	8001cc8 <__aeabi_ddiv+0x4c0>
 8001cc6:	e72e      	b.n	8001b26 <__aeabi_ddiv+0x31e>
 8001cc8:	0023      	movs	r3, r4
 8001cca:	3808      	subs	r0, #8
 8001ccc:	4083      	lsls	r3, r0
 8001cce:	4699      	mov	r9, r3
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	4698      	mov	r8, r3
 8001cd4:	e736      	b.n	8001b44 <__aeabi_ddiv+0x33c>
 8001cd6:	f001 f95b 	bl	8002f90 <__clzsi2>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	0003      	movs	r3, r0
 8001cde:	3215      	adds	r2, #21
 8001ce0:	3320      	adds	r3, #32
 8001ce2:	2a1c      	cmp	r2, #28
 8001ce4:	dc00      	bgt.n	8001ce8 <__aeabi_ddiv+0x4e0>
 8001ce6:	e6fb      	b.n	8001ae0 <__aeabi_ddiv+0x2d8>
 8001ce8:	9900      	ldr	r1, [sp, #0]
 8001cea:	3808      	subs	r0, #8
 8001cec:	4081      	lsls	r1, r0
 8001cee:	2200      	movs	r2, #0
 8001cf0:	468b      	mov	fp, r1
 8001cf2:	e702      	b.n	8001afa <__aeabi_ddiv+0x2f2>
 8001cf4:	9900      	ldr	r1, [sp, #0]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	468c      	mov	ip, r1
 8001cfa:	4464      	add	r4, ip
 8001cfc:	42a1      	cmp	r1, r4
 8001cfe:	d900      	bls.n	8001d02 <__aeabi_ddiv+0x4fa>
 8001d00:	e69a      	b.n	8001a38 <__aeabi_ddiv+0x230>
 8001d02:	42a2      	cmp	r2, r4
 8001d04:	d800      	bhi.n	8001d08 <__aeabi_ddiv+0x500>
 8001d06:	e697      	b.n	8001a38 <__aeabi_ddiv+0x230>
 8001d08:	1e83      	subs	r3, r0, #2
 8001d0a:	4464      	add	r4, ip
 8001d0c:	e694      	b.n	8001a38 <__aeabi_ddiv+0x230>
 8001d0e:	46ac      	mov	ip, r5
 8001d10:	4461      	add	r1, ip
 8001d12:	3f01      	subs	r7, #1
 8001d14:	428d      	cmp	r5, r1
 8001d16:	d900      	bls.n	8001d1a <__aeabi_ddiv+0x512>
 8001d18:	e680      	b.n	8001a1c <__aeabi_ddiv+0x214>
 8001d1a:	428a      	cmp	r2, r1
 8001d1c:	d800      	bhi.n	8001d20 <__aeabi_ddiv+0x518>
 8001d1e:	e67d      	b.n	8001a1c <__aeabi_ddiv+0x214>
 8001d20:	1e87      	subs	r7, r0, #2
 8001d22:	4461      	add	r1, ip
 8001d24:	e67a      	b.n	8001a1c <__aeabi_ddiv+0x214>
 8001d26:	4285      	cmp	r5, r0
 8001d28:	d000      	beq.n	8001d2c <__aeabi_ddiv+0x524>
 8001d2a:	e65f      	b.n	80019ec <__aeabi_ddiv+0x1e4>
 8001d2c:	45b9      	cmp	r9, r7
 8001d2e:	d900      	bls.n	8001d32 <__aeabi_ddiv+0x52a>
 8001d30:	e65c      	b.n	80019ec <__aeabi_ddiv+0x1e4>
 8001d32:	e656      	b.n	80019e2 <__aeabi_ddiv+0x1da>
 8001d34:	42a2      	cmp	r2, r4
 8001d36:	d800      	bhi.n	8001d3a <__aeabi_ddiv+0x532>
 8001d38:	e61a      	b.n	8001970 <__aeabi_ddiv+0x168>
 8001d3a:	1e83      	subs	r3, r0, #2
 8001d3c:	4464      	add	r4, ip
 8001d3e:	e617      	b.n	8001970 <__aeabi_ddiv+0x168>
 8001d40:	428a      	cmp	r2, r1
 8001d42:	d800      	bhi.n	8001d46 <__aeabi_ddiv+0x53e>
 8001d44:	e600      	b.n	8001948 <__aeabi_ddiv+0x140>
 8001d46:	46ac      	mov	ip, r5
 8001d48:	1e83      	subs	r3, r0, #2
 8001d4a:	4698      	mov	r8, r3
 8001d4c:	4461      	add	r1, ip
 8001d4e:	e5fb      	b.n	8001948 <__aeabi_ddiv+0x140>
 8001d50:	4837      	ldr	r0, [pc, #220]	@ (8001e30 <__aeabi_ddiv+0x628>)
 8001d52:	0014      	movs	r4, r2
 8001d54:	4450      	add	r0, sl
 8001d56:	4082      	lsls	r2, r0
 8001d58:	465b      	mov	r3, fp
 8001d5a:	0017      	movs	r7, r2
 8001d5c:	4083      	lsls	r3, r0
 8001d5e:	40cc      	lsrs	r4, r1
 8001d60:	1e7a      	subs	r2, r7, #1
 8001d62:	4197      	sbcs	r7, r2
 8001d64:	4323      	orrs	r3, r4
 8001d66:	433b      	orrs	r3, r7
 8001d68:	001a      	movs	r2, r3
 8001d6a:	465b      	mov	r3, fp
 8001d6c:	40cb      	lsrs	r3, r1
 8001d6e:	0751      	lsls	r1, r2, #29
 8001d70:	d009      	beq.n	8001d86 <__aeabi_ddiv+0x57e>
 8001d72:	210f      	movs	r1, #15
 8001d74:	4011      	ands	r1, r2
 8001d76:	2904      	cmp	r1, #4
 8001d78:	d005      	beq.n	8001d86 <__aeabi_ddiv+0x57e>
 8001d7a:	1d11      	adds	r1, r2, #4
 8001d7c:	4291      	cmp	r1, r2
 8001d7e:	4192      	sbcs	r2, r2
 8001d80:	4252      	negs	r2, r2
 8001d82:	189b      	adds	r3, r3, r2
 8001d84:	000a      	movs	r2, r1
 8001d86:	0219      	lsls	r1, r3, #8
 8001d88:	d400      	bmi.n	8001d8c <__aeabi_ddiv+0x584>
 8001d8a:	e755      	b.n	8001c38 <__aeabi_ddiv+0x430>
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2301      	movs	r3, #1
 8001d90:	2400      	movs	r4, #0
 8001d92:	4690      	mov	r8, r2
 8001d94:	e598      	b.n	80018c8 <__aeabi_ddiv+0xc0>
 8001d96:	000a      	movs	r2, r1
 8001d98:	42bc      	cmp	r4, r7
 8001d9a:	d000      	beq.n	8001d9e <__aeabi_ddiv+0x596>
 8001d9c:	e66e      	b.n	8001a7c <__aeabi_ddiv+0x274>
 8001d9e:	454b      	cmp	r3, r9
 8001da0:	d000      	beq.n	8001da4 <__aeabi_ddiv+0x59c>
 8001da2:	e66b      	b.n	8001a7c <__aeabi_ddiv+0x274>
 8001da4:	e66c      	b.n	8001a80 <__aeabi_ddiv+0x278>
 8001da6:	4b23      	ldr	r3, [pc, #140]	@ (8001e34 <__aeabi_ddiv+0x62c>)
 8001da8:	4a23      	ldr	r2, [pc, #140]	@ (8001e38 <__aeabi_ddiv+0x630>)
 8001daa:	4453      	add	r3, sl
 8001dac:	4592      	cmp	sl, r2
 8001dae:	da00      	bge.n	8001db2 <__aeabi_ddiv+0x5aa>
 8001db0:	e718      	b.n	8001be4 <__aeabi_ddiv+0x3dc>
 8001db2:	2101      	movs	r1, #1
 8001db4:	4249      	negs	r1, r1
 8001db6:	1d0a      	adds	r2, r1, #4
 8001db8:	428a      	cmp	r2, r1
 8001dba:	4189      	sbcs	r1, r1
 8001dbc:	4249      	negs	r1, r1
 8001dbe:	448b      	add	fp, r1
 8001dc0:	e666      	b.n	8001a90 <__aeabi_ddiv+0x288>
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	4011      	ands	r1, r2
 8001dc6:	2904      	cmp	r1, #4
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_ddiv+0x5c4>
 8001dca:	e661      	b.n	8001a90 <__aeabi_ddiv+0x288>
 8001dcc:	0011      	movs	r1, r2
 8001dce:	e7f2      	b.n	8001db6 <__aeabi_ddiv+0x5ae>
 8001dd0:	42bc      	cmp	r4, r7
 8001dd2:	d800      	bhi.n	8001dd6 <__aeabi_ddiv+0x5ce>
 8001dd4:	e60a      	b.n	80019ec <__aeabi_ddiv+0x1e4>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	425b      	negs	r3, r3
 8001dda:	469c      	mov	ip, r3
 8001ddc:	9900      	ldr	r1, [sp, #0]
 8001dde:	444f      	add	r7, r9
 8001de0:	454f      	cmp	r7, r9
 8001de2:	419b      	sbcs	r3, r3
 8001de4:	44e3      	add	fp, ip
 8001de6:	468c      	mov	ip, r1
 8001de8:	425b      	negs	r3, r3
 8001dea:	4463      	add	r3, ip
 8001dec:	18c0      	adds	r0, r0, r3
 8001dee:	e5ff      	b.n	80019f0 <__aeabi_ddiv+0x1e8>
 8001df0:	4649      	mov	r1, r9
 8001df2:	9d00      	ldr	r5, [sp, #0]
 8001df4:	0048      	lsls	r0, r1, #1
 8001df6:	4548      	cmp	r0, r9
 8001df8:	4189      	sbcs	r1, r1
 8001dfa:	46ac      	mov	ip, r5
 8001dfc:	4249      	negs	r1, r1
 8001dfe:	4461      	add	r1, ip
 8001e00:	4681      	mov	r9, r0
 8001e02:	3a02      	subs	r2, #2
 8001e04:	1864      	adds	r4, r4, r1
 8001e06:	e7c7      	b.n	8001d98 <__aeabi_ddiv+0x590>
 8001e08:	2480      	movs	r4, #128	@ 0x80
 8001e0a:	465b      	mov	r3, fp
 8001e0c:	0324      	lsls	r4, r4, #12
 8001e0e:	431c      	orrs	r4, r3
 8001e10:	0324      	lsls	r4, r4, #12
 8001e12:	4690      	mov	r8, r2
 8001e14:	4b04      	ldr	r3, [pc, #16]	@ (8001e28 <__aeabi_ddiv+0x620>)
 8001e16:	0b24      	lsrs	r4, r4, #12
 8001e18:	e556      	b.n	80018c8 <__aeabi_ddiv+0xc0>
 8001e1a:	4599      	cmp	r9, r3
 8001e1c:	d3e8      	bcc.n	8001df0 <__aeabi_ddiv+0x5e8>
 8001e1e:	000a      	movs	r2, r1
 8001e20:	e7bd      	b.n	8001d9e <__aeabi_ddiv+0x596>
 8001e22:	2300      	movs	r3, #0
 8001e24:	e708      	b.n	8001c38 <__aeabi_ddiv+0x430>
 8001e26:	46c0      	nop			@ (mov r8, r8)
 8001e28:	000007ff 	.word	0x000007ff
 8001e2c:	0000043e 	.word	0x0000043e
 8001e30:	0000041e 	.word	0x0000041e
 8001e34:	000003ff 	.word	0x000003ff
 8001e38:	fffffc02 	.word	0xfffffc02

08001e3c <__eqdf2>:
 8001e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e3e:	4657      	mov	r7, sl
 8001e40:	46de      	mov	lr, fp
 8001e42:	464e      	mov	r6, r9
 8001e44:	4645      	mov	r5, r8
 8001e46:	b5e0      	push	{r5, r6, r7, lr}
 8001e48:	000d      	movs	r5, r1
 8001e4a:	0004      	movs	r4, r0
 8001e4c:	0fe8      	lsrs	r0, r5, #31
 8001e4e:	4683      	mov	fp, r0
 8001e50:	0309      	lsls	r1, r1, #12
 8001e52:	0fd8      	lsrs	r0, r3, #31
 8001e54:	0b09      	lsrs	r1, r1, #12
 8001e56:	4682      	mov	sl, r0
 8001e58:	4819      	ldr	r0, [pc, #100]	@ (8001ec0 <__eqdf2+0x84>)
 8001e5a:	468c      	mov	ip, r1
 8001e5c:	031f      	lsls	r7, r3, #12
 8001e5e:	0069      	lsls	r1, r5, #1
 8001e60:	005e      	lsls	r6, r3, #1
 8001e62:	0d49      	lsrs	r1, r1, #21
 8001e64:	0b3f      	lsrs	r7, r7, #12
 8001e66:	0d76      	lsrs	r6, r6, #21
 8001e68:	4281      	cmp	r1, r0
 8001e6a:	d018      	beq.n	8001e9e <__eqdf2+0x62>
 8001e6c:	4286      	cmp	r6, r0
 8001e6e:	d00f      	beq.n	8001e90 <__eqdf2+0x54>
 8001e70:	2001      	movs	r0, #1
 8001e72:	42b1      	cmp	r1, r6
 8001e74:	d10d      	bne.n	8001e92 <__eqdf2+0x56>
 8001e76:	45bc      	cmp	ip, r7
 8001e78:	d10b      	bne.n	8001e92 <__eqdf2+0x56>
 8001e7a:	4294      	cmp	r4, r2
 8001e7c:	d109      	bne.n	8001e92 <__eqdf2+0x56>
 8001e7e:	45d3      	cmp	fp, sl
 8001e80:	d01c      	beq.n	8001ebc <__eqdf2+0x80>
 8001e82:	2900      	cmp	r1, #0
 8001e84:	d105      	bne.n	8001e92 <__eqdf2+0x56>
 8001e86:	4660      	mov	r0, ip
 8001e88:	4320      	orrs	r0, r4
 8001e8a:	1e43      	subs	r3, r0, #1
 8001e8c:	4198      	sbcs	r0, r3
 8001e8e:	e000      	b.n	8001e92 <__eqdf2+0x56>
 8001e90:	2001      	movs	r0, #1
 8001e92:	bcf0      	pop	{r4, r5, r6, r7}
 8001e94:	46bb      	mov	fp, r7
 8001e96:	46b2      	mov	sl, r6
 8001e98:	46a9      	mov	r9, r5
 8001e9a:	46a0      	mov	r8, r4
 8001e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	428e      	cmp	r6, r1
 8001ea2:	d1f6      	bne.n	8001e92 <__eqdf2+0x56>
 8001ea4:	4661      	mov	r1, ip
 8001ea6:	4339      	orrs	r1, r7
 8001ea8:	000f      	movs	r7, r1
 8001eaa:	4317      	orrs	r7, r2
 8001eac:	4327      	orrs	r7, r4
 8001eae:	d1f0      	bne.n	8001e92 <__eqdf2+0x56>
 8001eb0:	465b      	mov	r3, fp
 8001eb2:	4652      	mov	r2, sl
 8001eb4:	1a98      	subs	r0, r3, r2
 8001eb6:	1e43      	subs	r3, r0, #1
 8001eb8:	4198      	sbcs	r0, r3
 8001eba:	e7ea      	b.n	8001e92 <__eqdf2+0x56>
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	e7e8      	b.n	8001e92 <__eqdf2+0x56>
 8001ec0:	000007ff 	.word	0x000007ff

08001ec4 <__gedf2>:
 8001ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec6:	4657      	mov	r7, sl
 8001ec8:	464e      	mov	r6, r9
 8001eca:	4645      	mov	r5, r8
 8001ecc:	46de      	mov	lr, fp
 8001ece:	b5e0      	push	{r5, r6, r7, lr}
 8001ed0:	000d      	movs	r5, r1
 8001ed2:	030f      	lsls	r7, r1, #12
 8001ed4:	0b39      	lsrs	r1, r7, #12
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	0004      	movs	r4, r0
 8001eda:	4680      	mov	r8, r0
 8001edc:	9101      	str	r1, [sp, #4]
 8001ede:	0058      	lsls	r0, r3, #1
 8001ee0:	0fe9      	lsrs	r1, r5, #31
 8001ee2:	4f31      	ldr	r7, [pc, #196]	@ (8001fa8 <__gedf2+0xe4>)
 8001ee4:	0d40      	lsrs	r0, r0, #21
 8001ee6:	468c      	mov	ip, r1
 8001ee8:	006e      	lsls	r6, r5, #1
 8001eea:	0319      	lsls	r1, r3, #12
 8001eec:	4682      	mov	sl, r0
 8001eee:	4691      	mov	r9, r2
 8001ef0:	0d76      	lsrs	r6, r6, #21
 8001ef2:	0b09      	lsrs	r1, r1, #12
 8001ef4:	0fd8      	lsrs	r0, r3, #31
 8001ef6:	42be      	cmp	r6, r7
 8001ef8:	d01f      	beq.n	8001f3a <__gedf2+0x76>
 8001efa:	45ba      	cmp	sl, r7
 8001efc:	d00f      	beq.n	8001f1e <__gedf2+0x5a>
 8001efe:	2e00      	cmp	r6, #0
 8001f00:	d12f      	bne.n	8001f62 <__gedf2+0x9e>
 8001f02:	4655      	mov	r5, sl
 8001f04:	9e01      	ldr	r6, [sp, #4]
 8001f06:	4334      	orrs	r4, r6
 8001f08:	2d00      	cmp	r5, #0
 8001f0a:	d127      	bne.n	8001f5c <__gedf2+0x98>
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	d03a      	beq.n	8001f86 <__gedf2+0xc2>
 8001f10:	2c00      	cmp	r4, #0
 8001f12:	d145      	bne.n	8001fa0 <__gedf2+0xdc>
 8001f14:	2800      	cmp	r0, #0
 8001f16:	d11a      	bne.n	8001f4e <__gedf2+0x8a>
 8001f18:	2001      	movs	r0, #1
 8001f1a:	4240      	negs	r0, r0
 8001f1c:	e017      	b.n	8001f4e <__gedf2+0x8a>
 8001f1e:	4311      	orrs	r1, r2
 8001f20:	d13b      	bne.n	8001f9a <__gedf2+0xd6>
 8001f22:	2e00      	cmp	r6, #0
 8001f24:	d102      	bne.n	8001f2c <__gedf2+0x68>
 8001f26:	9f01      	ldr	r7, [sp, #4]
 8001f28:	4327      	orrs	r7, r4
 8001f2a:	d0f3      	beq.n	8001f14 <__gedf2+0x50>
 8001f2c:	4584      	cmp	ip, r0
 8001f2e:	d109      	bne.n	8001f44 <__gedf2+0x80>
 8001f30:	4663      	mov	r3, ip
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <__gedf2+0x54>
 8001f36:	4660      	mov	r0, ip
 8001f38:	e009      	b.n	8001f4e <__gedf2+0x8a>
 8001f3a:	9f01      	ldr	r7, [sp, #4]
 8001f3c:	4327      	orrs	r7, r4
 8001f3e:	d12c      	bne.n	8001f9a <__gedf2+0xd6>
 8001f40:	45b2      	cmp	sl, r6
 8001f42:	d024      	beq.n	8001f8e <__gedf2+0xca>
 8001f44:	4663      	mov	r3, ip
 8001f46:	2002      	movs	r0, #2
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	4018      	ands	r0, r3
 8001f4c:	3801      	subs	r0, #1
 8001f4e:	b003      	add	sp, #12
 8001f50:	bcf0      	pop	{r4, r5, r6, r7}
 8001f52:	46bb      	mov	fp, r7
 8001f54:	46b2      	mov	sl, r6
 8001f56:	46a9      	mov	r9, r5
 8001f58:	46a0      	mov	r8, r4
 8001f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f5c:	2c00      	cmp	r4, #0
 8001f5e:	d0d9      	beq.n	8001f14 <__gedf2+0x50>
 8001f60:	e7e4      	b.n	8001f2c <__gedf2+0x68>
 8001f62:	4654      	mov	r4, sl
 8001f64:	2c00      	cmp	r4, #0
 8001f66:	d0ed      	beq.n	8001f44 <__gedf2+0x80>
 8001f68:	4584      	cmp	ip, r0
 8001f6a:	d1eb      	bne.n	8001f44 <__gedf2+0x80>
 8001f6c:	4556      	cmp	r6, sl
 8001f6e:	dce9      	bgt.n	8001f44 <__gedf2+0x80>
 8001f70:	dbde      	blt.n	8001f30 <__gedf2+0x6c>
 8001f72:	9b01      	ldr	r3, [sp, #4]
 8001f74:	428b      	cmp	r3, r1
 8001f76:	d8e5      	bhi.n	8001f44 <__gedf2+0x80>
 8001f78:	d1da      	bne.n	8001f30 <__gedf2+0x6c>
 8001f7a:	45c8      	cmp	r8, r9
 8001f7c:	d8e2      	bhi.n	8001f44 <__gedf2+0x80>
 8001f7e:	2000      	movs	r0, #0
 8001f80:	45c8      	cmp	r8, r9
 8001f82:	d2e4      	bcs.n	8001f4e <__gedf2+0x8a>
 8001f84:	e7d4      	b.n	8001f30 <__gedf2+0x6c>
 8001f86:	2000      	movs	r0, #0
 8001f88:	2c00      	cmp	r4, #0
 8001f8a:	d0e0      	beq.n	8001f4e <__gedf2+0x8a>
 8001f8c:	e7da      	b.n	8001f44 <__gedf2+0x80>
 8001f8e:	4311      	orrs	r1, r2
 8001f90:	d103      	bne.n	8001f9a <__gedf2+0xd6>
 8001f92:	4584      	cmp	ip, r0
 8001f94:	d1d6      	bne.n	8001f44 <__gedf2+0x80>
 8001f96:	2000      	movs	r0, #0
 8001f98:	e7d9      	b.n	8001f4e <__gedf2+0x8a>
 8001f9a:	2002      	movs	r0, #2
 8001f9c:	4240      	negs	r0, r0
 8001f9e:	e7d6      	b.n	8001f4e <__gedf2+0x8a>
 8001fa0:	4584      	cmp	ip, r0
 8001fa2:	d0e6      	beq.n	8001f72 <__gedf2+0xae>
 8001fa4:	e7ce      	b.n	8001f44 <__gedf2+0x80>
 8001fa6:	46c0      	nop			@ (mov r8, r8)
 8001fa8:	000007ff 	.word	0x000007ff

08001fac <__ledf2>:
 8001fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fae:	4657      	mov	r7, sl
 8001fb0:	464e      	mov	r6, r9
 8001fb2:	4645      	mov	r5, r8
 8001fb4:	46de      	mov	lr, fp
 8001fb6:	b5e0      	push	{r5, r6, r7, lr}
 8001fb8:	000d      	movs	r5, r1
 8001fba:	030f      	lsls	r7, r1, #12
 8001fbc:	0004      	movs	r4, r0
 8001fbe:	4680      	mov	r8, r0
 8001fc0:	0fe8      	lsrs	r0, r5, #31
 8001fc2:	0b39      	lsrs	r1, r7, #12
 8001fc4:	4684      	mov	ip, r0
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	0058      	lsls	r0, r3, #1
 8001fca:	4f30      	ldr	r7, [pc, #192]	@ (800208c <__ledf2+0xe0>)
 8001fcc:	0d40      	lsrs	r0, r0, #21
 8001fce:	9101      	str	r1, [sp, #4]
 8001fd0:	031e      	lsls	r6, r3, #12
 8001fd2:	0069      	lsls	r1, r5, #1
 8001fd4:	4682      	mov	sl, r0
 8001fd6:	4691      	mov	r9, r2
 8001fd8:	0d49      	lsrs	r1, r1, #21
 8001fda:	0b36      	lsrs	r6, r6, #12
 8001fdc:	0fd8      	lsrs	r0, r3, #31
 8001fde:	42b9      	cmp	r1, r7
 8001fe0:	d020      	beq.n	8002024 <__ledf2+0x78>
 8001fe2:	45ba      	cmp	sl, r7
 8001fe4:	d00f      	beq.n	8002006 <__ledf2+0x5a>
 8001fe6:	2900      	cmp	r1, #0
 8001fe8:	d12b      	bne.n	8002042 <__ledf2+0x96>
 8001fea:	9901      	ldr	r1, [sp, #4]
 8001fec:	430c      	orrs	r4, r1
 8001fee:	4651      	mov	r1, sl
 8001ff0:	2900      	cmp	r1, #0
 8001ff2:	d137      	bne.n	8002064 <__ledf2+0xb8>
 8001ff4:	4332      	orrs	r2, r6
 8001ff6:	d038      	beq.n	800206a <__ledf2+0xbe>
 8001ff8:	2c00      	cmp	r4, #0
 8001ffa:	d144      	bne.n	8002086 <__ledf2+0xda>
 8001ffc:	2800      	cmp	r0, #0
 8001ffe:	d119      	bne.n	8002034 <__ledf2+0x88>
 8002000:	2001      	movs	r0, #1
 8002002:	4240      	negs	r0, r0
 8002004:	e016      	b.n	8002034 <__ledf2+0x88>
 8002006:	4316      	orrs	r6, r2
 8002008:	d113      	bne.n	8002032 <__ledf2+0x86>
 800200a:	2900      	cmp	r1, #0
 800200c:	d102      	bne.n	8002014 <__ledf2+0x68>
 800200e:	9f01      	ldr	r7, [sp, #4]
 8002010:	4327      	orrs	r7, r4
 8002012:	d0f3      	beq.n	8001ffc <__ledf2+0x50>
 8002014:	4584      	cmp	ip, r0
 8002016:	d020      	beq.n	800205a <__ledf2+0xae>
 8002018:	4663      	mov	r3, ip
 800201a:	2002      	movs	r0, #2
 800201c:	3b01      	subs	r3, #1
 800201e:	4018      	ands	r0, r3
 8002020:	3801      	subs	r0, #1
 8002022:	e007      	b.n	8002034 <__ledf2+0x88>
 8002024:	9f01      	ldr	r7, [sp, #4]
 8002026:	4327      	orrs	r7, r4
 8002028:	d103      	bne.n	8002032 <__ledf2+0x86>
 800202a:	458a      	cmp	sl, r1
 800202c:	d1f4      	bne.n	8002018 <__ledf2+0x6c>
 800202e:	4316      	orrs	r6, r2
 8002030:	d01f      	beq.n	8002072 <__ledf2+0xc6>
 8002032:	2002      	movs	r0, #2
 8002034:	b003      	add	sp, #12
 8002036:	bcf0      	pop	{r4, r5, r6, r7}
 8002038:	46bb      	mov	fp, r7
 800203a:	46b2      	mov	sl, r6
 800203c:	46a9      	mov	r9, r5
 800203e:	46a0      	mov	r8, r4
 8002040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002042:	4654      	mov	r4, sl
 8002044:	2c00      	cmp	r4, #0
 8002046:	d0e7      	beq.n	8002018 <__ledf2+0x6c>
 8002048:	4584      	cmp	ip, r0
 800204a:	d1e5      	bne.n	8002018 <__ledf2+0x6c>
 800204c:	4551      	cmp	r1, sl
 800204e:	dce3      	bgt.n	8002018 <__ledf2+0x6c>
 8002050:	db03      	blt.n	800205a <__ledf2+0xae>
 8002052:	9b01      	ldr	r3, [sp, #4]
 8002054:	42b3      	cmp	r3, r6
 8002056:	d8df      	bhi.n	8002018 <__ledf2+0x6c>
 8002058:	d00f      	beq.n	800207a <__ledf2+0xce>
 800205a:	4663      	mov	r3, ip
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0cf      	beq.n	8002000 <__ledf2+0x54>
 8002060:	4660      	mov	r0, ip
 8002062:	e7e7      	b.n	8002034 <__ledf2+0x88>
 8002064:	2c00      	cmp	r4, #0
 8002066:	d0c9      	beq.n	8001ffc <__ledf2+0x50>
 8002068:	e7d4      	b.n	8002014 <__ledf2+0x68>
 800206a:	2000      	movs	r0, #0
 800206c:	2c00      	cmp	r4, #0
 800206e:	d0e1      	beq.n	8002034 <__ledf2+0x88>
 8002070:	e7d2      	b.n	8002018 <__ledf2+0x6c>
 8002072:	4584      	cmp	ip, r0
 8002074:	d1d0      	bne.n	8002018 <__ledf2+0x6c>
 8002076:	2000      	movs	r0, #0
 8002078:	e7dc      	b.n	8002034 <__ledf2+0x88>
 800207a:	45c8      	cmp	r8, r9
 800207c:	d8cc      	bhi.n	8002018 <__ledf2+0x6c>
 800207e:	2000      	movs	r0, #0
 8002080:	45c8      	cmp	r8, r9
 8002082:	d2d7      	bcs.n	8002034 <__ledf2+0x88>
 8002084:	e7e9      	b.n	800205a <__ledf2+0xae>
 8002086:	4584      	cmp	ip, r0
 8002088:	d0e3      	beq.n	8002052 <__ledf2+0xa6>
 800208a:	e7c5      	b.n	8002018 <__ledf2+0x6c>
 800208c:	000007ff 	.word	0x000007ff

08002090 <__aeabi_dmul>:
 8002090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002092:	4657      	mov	r7, sl
 8002094:	46de      	mov	lr, fp
 8002096:	464e      	mov	r6, r9
 8002098:	4645      	mov	r5, r8
 800209a:	b5e0      	push	{r5, r6, r7, lr}
 800209c:	001f      	movs	r7, r3
 800209e:	030b      	lsls	r3, r1, #12
 80020a0:	0b1b      	lsrs	r3, r3, #12
 80020a2:	0016      	movs	r6, r2
 80020a4:	469a      	mov	sl, r3
 80020a6:	0fca      	lsrs	r2, r1, #31
 80020a8:	004b      	lsls	r3, r1, #1
 80020aa:	0004      	movs	r4, r0
 80020ac:	4693      	mov	fp, r2
 80020ae:	b087      	sub	sp, #28
 80020b0:	0d5b      	lsrs	r3, r3, #21
 80020b2:	d100      	bne.n	80020b6 <__aeabi_dmul+0x26>
 80020b4:	e0d5      	b.n	8002262 <__aeabi_dmul+0x1d2>
 80020b6:	4abb      	ldr	r2, [pc, #748]	@ (80023a4 <__aeabi_dmul+0x314>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d100      	bne.n	80020be <__aeabi_dmul+0x2e>
 80020bc:	e0f8      	b.n	80022b0 <__aeabi_dmul+0x220>
 80020be:	4651      	mov	r1, sl
 80020c0:	0f42      	lsrs	r2, r0, #29
 80020c2:	00c9      	lsls	r1, r1, #3
 80020c4:	430a      	orrs	r2, r1
 80020c6:	2180      	movs	r1, #128	@ 0x80
 80020c8:	0409      	lsls	r1, r1, #16
 80020ca:	4311      	orrs	r1, r2
 80020cc:	00c2      	lsls	r2, r0, #3
 80020ce:	4691      	mov	r9, r2
 80020d0:	4ab5      	ldr	r2, [pc, #724]	@ (80023a8 <__aeabi_dmul+0x318>)
 80020d2:	468a      	mov	sl, r1
 80020d4:	189d      	adds	r5, r3, r2
 80020d6:	2300      	movs	r3, #0
 80020d8:	4698      	mov	r8, r3
 80020da:	9302      	str	r3, [sp, #8]
 80020dc:	033c      	lsls	r4, r7, #12
 80020de:	007b      	lsls	r3, r7, #1
 80020e0:	0ffa      	lsrs	r2, r7, #31
 80020e2:	0030      	movs	r0, r6
 80020e4:	0b24      	lsrs	r4, r4, #12
 80020e6:	0d5b      	lsrs	r3, r3, #21
 80020e8:	9200      	str	r2, [sp, #0]
 80020ea:	d100      	bne.n	80020ee <__aeabi_dmul+0x5e>
 80020ec:	e096      	b.n	800221c <__aeabi_dmul+0x18c>
 80020ee:	4aad      	ldr	r2, [pc, #692]	@ (80023a4 <__aeabi_dmul+0x314>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d031      	beq.n	8002158 <__aeabi_dmul+0xc8>
 80020f4:	0f72      	lsrs	r2, r6, #29
 80020f6:	00e4      	lsls	r4, r4, #3
 80020f8:	4322      	orrs	r2, r4
 80020fa:	2480      	movs	r4, #128	@ 0x80
 80020fc:	0424      	lsls	r4, r4, #16
 80020fe:	4314      	orrs	r4, r2
 8002100:	4aa9      	ldr	r2, [pc, #676]	@ (80023a8 <__aeabi_dmul+0x318>)
 8002102:	00f0      	lsls	r0, r6, #3
 8002104:	4694      	mov	ip, r2
 8002106:	4463      	add	r3, ip
 8002108:	195b      	adds	r3, r3, r5
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	9201      	str	r2, [sp, #4]
 800210e:	4642      	mov	r2, r8
 8002110:	2600      	movs	r6, #0
 8002112:	2a0a      	cmp	r2, #10
 8002114:	dc42      	bgt.n	800219c <__aeabi_dmul+0x10c>
 8002116:	465a      	mov	r2, fp
 8002118:	9900      	ldr	r1, [sp, #0]
 800211a:	404a      	eors	r2, r1
 800211c:	4693      	mov	fp, r2
 800211e:	4642      	mov	r2, r8
 8002120:	2a02      	cmp	r2, #2
 8002122:	dc32      	bgt.n	800218a <__aeabi_dmul+0xfa>
 8002124:	3a01      	subs	r2, #1
 8002126:	2a01      	cmp	r2, #1
 8002128:	d900      	bls.n	800212c <__aeabi_dmul+0x9c>
 800212a:	e149      	b.n	80023c0 <__aeabi_dmul+0x330>
 800212c:	2e02      	cmp	r6, #2
 800212e:	d100      	bne.n	8002132 <__aeabi_dmul+0xa2>
 8002130:	e0ca      	b.n	80022c8 <__aeabi_dmul+0x238>
 8002132:	2e01      	cmp	r6, #1
 8002134:	d13d      	bne.n	80021b2 <__aeabi_dmul+0x122>
 8002136:	2300      	movs	r3, #0
 8002138:	2400      	movs	r4, #0
 800213a:	2200      	movs	r2, #0
 800213c:	0010      	movs	r0, r2
 800213e:	465a      	mov	r2, fp
 8002140:	051b      	lsls	r3, r3, #20
 8002142:	4323      	orrs	r3, r4
 8002144:	07d2      	lsls	r2, r2, #31
 8002146:	4313      	orrs	r3, r2
 8002148:	0019      	movs	r1, r3
 800214a:	b007      	add	sp, #28
 800214c:	bcf0      	pop	{r4, r5, r6, r7}
 800214e:	46bb      	mov	fp, r7
 8002150:	46b2      	mov	sl, r6
 8002152:	46a9      	mov	r9, r5
 8002154:	46a0      	mov	r8, r4
 8002156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002158:	4b92      	ldr	r3, [pc, #584]	@ (80023a4 <__aeabi_dmul+0x314>)
 800215a:	4326      	orrs	r6, r4
 800215c:	18eb      	adds	r3, r5, r3
 800215e:	2e00      	cmp	r6, #0
 8002160:	d100      	bne.n	8002164 <__aeabi_dmul+0xd4>
 8002162:	e0bb      	b.n	80022dc <__aeabi_dmul+0x24c>
 8002164:	2203      	movs	r2, #3
 8002166:	4641      	mov	r1, r8
 8002168:	4311      	orrs	r1, r2
 800216a:	465a      	mov	r2, fp
 800216c:	4688      	mov	r8, r1
 800216e:	9900      	ldr	r1, [sp, #0]
 8002170:	404a      	eors	r2, r1
 8002172:	2180      	movs	r1, #128	@ 0x80
 8002174:	0109      	lsls	r1, r1, #4
 8002176:	468c      	mov	ip, r1
 8002178:	0029      	movs	r1, r5
 800217a:	4461      	add	r1, ip
 800217c:	9101      	str	r1, [sp, #4]
 800217e:	4641      	mov	r1, r8
 8002180:	290a      	cmp	r1, #10
 8002182:	dd00      	ble.n	8002186 <__aeabi_dmul+0xf6>
 8002184:	e233      	b.n	80025ee <__aeabi_dmul+0x55e>
 8002186:	4693      	mov	fp, r2
 8002188:	2603      	movs	r6, #3
 800218a:	4642      	mov	r2, r8
 800218c:	2701      	movs	r7, #1
 800218e:	4097      	lsls	r7, r2
 8002190:	21a6      	movs	r1, #166	@ 0xa6
 8002192:	003a      	movs	r2, r7
 8002194:	00c9      	lsls	r1, r1, #3
 8002196:	400a      	ands	r2, r1
 8002198:	420f      	tst	r7, r1
 800219a:	d031      	beq.n	8002200 <__aeabi_dmul+0x170>
 800219c:	9e02      	ldr	r6, [sp, #8]
 800219e:	2e02      	cmp	r6, #2
 80021a0:	d100      	bne.n	80021a4 <__aeabi_dmul+0x114>
 80021a2:	e235      	b.n	8002610 <__aeabi_dmul+0x580>
 80021a4:	2e03      	cmp	r6, #3
 80021a6:	d100      	bne.n	80021aa <__aeabi_dmul+0x11a>
 80021a8:	e1d2      	b.n	8002550 <__aeabi_dmul+0x4c0>
 80021aa:	4654      	mov	r4, sl
 80021ac:	4648      	mov	r0, r9
 80021ae:	2e01      	cmp	r6, #1
 80021b0:	d0c1      	beq.n	8002136 <__aeabi_dmul+0xa6>
 80021b2:	9a01      	ldr	r2, [sp, #4]
 80021b4:	4b7d      	ldr	r3, [pc, #500]	@ (80023ac <__aeabi_dmul+0x31c>)
 80021b6:	4694      	mov	ip, r2
 80021b8:	4463      	add	r3, ip
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	dc00      	bgt.n	80021c0 <__aeabi_dmul+0x130>
 80021be:	e0c0      	b.n	8002342 <__aeabi_dmul+0x2b2>
 80021c0:	0742      	lsls	r2, r0, #29
 80021c2:	d009      	beq.n	80021d8 <__aeabi_dmul+0x148>
 80021c4:	220f      	movs	r2, #15
 80021c6:	4002      	ands	r2, r0
 80021c8:	2a04      	cmp	r2, #4
 80021ca:	d005      	beq.n	80021d8 <__aeabi_dmul+0x148>
 80021cc:	1d02      	adds	r2, r0, #4
 80021ce:	4282      	cmp	r2, r0
 80021d0:	4180      	sbcs	r0, r0
 80021d2:	4240      	negs	r0, r0
 80021d4:	1824      	adds	r4, r4, r0
 80021d6:	0010      	movs	r0, r2
 80021d8:	01e2      	lsls	r2, r4, #7
 80021da:	d506      	bpl.n	80021ea <__aeabi_dmul+0x15a>
 80021dc:	4b74      	ldr	r3, [pc, #464]	@ (80023b0 <__aeabi_dmul+0x320>)
 80021de:	9a01      	ldr	r2, [sp, #4]
 80021e0:	401c      	ands	r4, r3
 80021e2:	2380      	movs	r3, #128	@ 0x80
 80021e4:	4694      	mov	ip, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4463      	add	r3, ip
 80021ea:	4a72      	ldr	r2, [pc, #456]	@ (80023b4 <__aeabi_dmul+0x324>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	dc6b      	bgt.n	80022c8 <__aeabi_dmul+0x238>
 80021f0:	0762      	lsls	r2, r4, #29
 80021f2:	08c0      	lsrs	r0, r0, #3
 80021f4:	0264      	lsls	r4, r4, #9
 80021f6:	055b      	lsls	r3, r3, #21
 80021f8:	4302      	orrs	r2, r0
 80021fa:	0b24      	lsrs	r4, r4, #12
 80021fc:	0d5b      	lsrs	r3, r3, #21
 80021fe:	e79d      	b.n	800213c <__aeabi_dmul+0xac>
 8002200:	2190      	movs	r1, #144	@ 0x90
 8002202:	0089      	lsls	r1, r1, #2
 8002204:	420f      	tst	r7, r1
 8002206:	d163      	bne.n	80022d0 <__aeabi_dmul+0x240>
 8002208:	2288      	movs	r2, #136	@ 0x88
 800220a:	423a      	tst	r2, r7
 800220c:	d100      	bne.n	8002210 <__aeabi_dmul+0x180>
 800220e:	e0d7      	b.n	80023c0 <__aeabi_dmul+0x330>
 8002210:	9b00      	ldr	r3, [sp, #0]
 8002212:	46a2      	mov	sl, r4
 8002214:	469b      	mov	fp, r3
 8002216:	4681      	mov	r9, r0
 8002218:	9602      	str	r6, [sp, #8]
 800221a:	e7bf      	b.n	800219c <__aeabi_dmul+0x10c>
 800221c:	0023      	movs	r3, r4
 800221e:	4333      	orrs	r3, r6
 8002220:	d100      	bne.n	8002224 <__aeabi_dmul+0x194>
 8002222:	e07f      	b.n	8002324 <__aeabi_dmul+0x294>
 8002224:	2c00      	cmp	r4, #0
 8002226:	d100      	bne.n	800222a <__aeabi_dmul+0x19a>
 8002228:	e1ad      	b.n	8002586 <__aeabi_dmul+0x4f6>
 800222a:	0020      	movs	r0, r4
 800222c:	f000 feb0 	bl	8002f90 <__clzsi2>
 8002230:	0002      	movs	r2, r0
 8002232:	0003      	movs	r3, r0
 8002234:	3a0b      	subs	r2, #11
 8002236:	201d      	movs	r0, #29
 8002238:	0019      	movs	r1, r3
 800223a:	1a82      	subs	r2, r0, r2
 800223c:	0030      	movs	r0, r6
 800223e:	3908      	subs	r1, #8
 8002240:	40d0      	lsrs	r0, r2
 8002242:	408c      	lsls	r4, r1
 8002244:	4304      	orrs	r4, r0
 8002246:	0030      	movs	r0, r6
 8002248:	4088      	lsls	r0, r1
 800224a:	4a5b      	ldr	r2, [pc, #364]	@ (80023b8 <__aeabi_dmul+0x328>)
 800224c:	1aeb      	subs	r3, r5, r3
 800224e:	4694      	mov	ip, r2
 8002250:	4463      	add	r3, ip
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	9201      	str	r2, [sp, #4]
 8002256:	4642      	mov	r2, r8
 8002258:	2600      	movs	r6, #0
 800225a:	2a0a      	cmp	r2, #10
 800225c:	dc00      	bgt.n	8002260 <__aeabi_dmul+0x1d0>
 800225e:	e75a      	b.n	8002116 <__aeabi_dmul+0x86>
 8002260:	e79c      	b.n	800219c <__aeabi_dmul+0x10c>
 8002262:	4653      	mov	r3, sl
 8002264:	4303      	orrs	r3, r0
 8002266:	4699      	mov	r9, r3
 8002268:	d054      	beq.n	8002314 <__aeabi_dmul+0x284>
 800226a:	4653      	mov	r3, sl
 800226c:	2b00      	cmp	r3, #0
 800226e:	d100      	bne.n	8002272 <__aeabi_dmul+0x1e2>
 8002270:	e177      	b.n	8002562 <__aeabi_dmul+0x4d2>
 8002272:	4650      	mov	r0, sl
 8002274:	f000 fe8c 	bl	8002f90 <__clzsi2>
 8002278:	230b      	movs	r3, #11
 800227a:	425b      	negs	r3, r3
 800227c:	469c      	mov	ip, r3
 800227e:	0002      	movs	r2, r0
 8002280:	4484      	add	ip, r0
 8002282:	0011      	movs	r1, r2
 8002284:	4650      	mov	r0, sl
 8002286:	3908      	subs	r1, #8
 8002288:	4088      	lsls	r0, r1
 800228a:	231d      	movs	r3, #29
 800228c:	4680      	mov	r8, r0
 800228e:	4660      	mov	r0, ip
 8002290:	1a1b      	subs	r3, r3, r0
 8002292:	0020      	movs	r0, r4
 8002294:	40d8      	lsrs	r0, r3
 8002296:	0003      	movs	r3, r0
 8002298:	4640      	mov	r0, r8
 800229a:	4303      	orrs	r3, r0
 800229c:	469a      	mov	sl, r3
 800229e:	0023      	movs	r3, r4
 80022a0:	408b      	lsls	r3, r1
 80022a2:	4699      	mov	r9, r3
 80022a4:	2300      	movs	r3, #0
 80022a6:	4d44      	ldr	r5, [pc, #272]	@ (80023b8 <__aeabi_dmul+0x328>)
 80022a8:	4698      	mov	r8, r3
 80022aa:	1aad      	subs	r5, r5, r2
 80022ac:	9302      	str	r3, [sp, #8]
 80022ae:	e715      	b.n	80020dc <__aeabi_dmul+0x4c>
 80022b0:	4652      	mov	r2, sl
 80022b2:	4302      	orrs	r2, r0
 80022b4:	4691      	mov	r9, r2
 80022b6:	d126      	bne.n	8002306 <__aeabi_dmul+0x276>
 80022b8:	2200      	movs	r2, #0
 80022ba:	001d      	movs	r5, r3
 80022bc:	2302      	movs	r3, #2
 80022be:	4692      	mov	sl, r2
 80022c0:	3208      	adds	r2, #8
 80022c2:	4690      	mov	r8, r2
 80022c4:	9302      	str	r3, [sp, #8]
 80022c6:	e709      	b.n	80020dc <__aeabi_dmul+0x4c>
 80022c8:	2400      	movs	r4, #0
 80022ca:	2200      	movs	r2, #0
 80022cc:	4b35      	ldr	r3, [pc, #212]	@ (80023a4 <__aeabi_dmul+0x314>)
 80022ce:	e735      	b.n	800213c <__aeabi_dmul+0xac>
 80022d0:	2300      	movs	r3, #0
 80022d2:	2480      	movs	r4, #128	@ 0x80
 80022d4:	469b      	mov	fp, r3
 80022d6:	0324      	lsls	r4, r4, #12
 80022d8:	4b32      	ldr	r3, [pc, #200]	@ (80023a4 <__aeabi_dmul+0x314>)
 80022da:	e72f      	b.n	800213c <__aeabi_dmul+0xac>
 80022dc:	2202      	movs	r2, #2
 80022de:	4641      	mov	r1, r8
 80022e0:	4311      	orrs	r1, r2
 80022e2:	2280      	movs	r2, #128	@ 0x80
 80022e4:	0112      	lsls	r2, r2, #4
 80022e6:	4694      	mov	ip, r2
 80022e8:	002a      	movs	r2, r5
 80022ea:	4462      	add	r2, ip
 80022ec:	4688      	mov	r8, r1
 80022ee:	9201      	str	r2, [sp, #4]
 80022f0:	290a      	cmp	r1, #10
 80022f2:	dd00      	ble.n	80022f6 <__aeabi_dmul+0x266>
 80022f4:	e752      	b.n	800219c <__aeabi_dmul+0x10c>
 80022f6:	465a      	mov	r2, fp
 80022f8:	2000      	movs	r0, #0
 80022fa:	9900      	ldr	r1, [sp, #0]
 80022fc:	0004      	movs	r4, r0
 80022fe:	404a      	eors	r2, r1
 8002300:	4693      	mov	fp, r2
 8002302:	2602      	movs	r6, #2
 8002304:	e70b      	b.n	800211e <__aeabi_dmul+0x8e>
 8002306:	220c      	movs	r2, #12
 8002308:	001d      	movs	r5, r3
 800230a:	2303      	movs	r3, #3
 800230c:	4681      	mov	r9, r0
 800230e:	4690      	mov	r8, r2
 8002310:	9302      	str	r3, [sp, #8]
 8002312:	e6e3      	b.n	80020dc <__aeabi_dmul+0x4c>
 8002314:	2300      	movs	r3, #0
 8002316:	469a      	mov	sl, r3
 8002318:	3304      	adds	r3, #4
 800231a:	4698      	mov	r8, r3
 800231c:	3b03      	subs	r3, #3
 800231e:	2500      	movs	r5, #0
 8002320:	9302      	str	r3, [sp, #8]
 8002322:	e6db      	b.n	80020dc <__aeabi_dmul+0x4c>
 8002324:	4642      	mov	r2, r8
 8002326:	3301      	adds	r3, #1
 8002328:	431a      	orrs	r2, r3
 800232a:	002b      	movs	r3, r5
 800232c:	4690      	mov	r8, r2
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	9201      	str	r2, [sp, #4]
 8002332:	4642      	mov	r2, r8
 8002334:	2400      	movs	r4, #0
 8002336:	2000      	movs	r0, #0
 8002338:	2601      	movs	r6, #1
 800233a:	2a0a      	cmp	r2, #10
 800233c:	dc00      	bgt.n	8002340 <__aeabi_dmul+0x2b0>
 800233e:	e6ea      	b.n	8002116 <__aeabi_dmul+0x86>
 8002340:	e72c      	b.n	800219c <__aeabi_dmul+0x10c>
 8002342:	2201      	movs	r2, #1
 8002344:	1ad2      	subs	r2, r2, r3
 8002346:	2a38      	cmp	r2, #56	@ 0x38
 8002348:	dd00      	ble.n	800234c <__aeabi_dmul+0x2bc>
 800234a:	e6f4      	b.n	8002136 <__aeabi_dmul+0xa6>
 800234c:	2a1f      	cmp	r2, #31
 800234e:	dc00      	bgt.n	8002352 <__aeabi_dmul+0x2c2>
 8002350:	e12a      	b.n	80025a8 <__aeabi_dmul+0x518>
 8002352:	211f      	movs	r1, #31
 8002354:	4249      	negs	r1, r1
 8002356:	1acb      	subs	r3, r1, r3
 8002358:	0021      	movs	r1, r4
 800235a:	40d9      	lsrs	r1, r3
 800235c:	000b      	movs	r3, r1
 800235e:	2a20      	cmp	r2, #32
 8002360:	d005      	beq.n	800236e <__aeabi_dmul+0x2de>
 8002362:	4a16      	ldr	r2, [pc, #88]	@ (80023bc <__aeabi_dmul+0x32c>)
 8002364:	9d01      	ldr	r5, [sp, #4]
 8002366:	4694      	mov	ip, r2
 8002368:	4465      	add	r5, ip
 800236a:	40ac      	lsls	r4, r5
 800236c:	4320      	orrs	r0, r4
 800236e:	1e42      	subs	r2, r0, #1
 8002370:	4190      	sbcs	r0, r2
 8002372:	4318      	orrs	r0, r3
 8002374:	2307      	movs	r3, #7
 8002376:	0019      	movs	r1, r3
 8002378:	2400      	movs	r4, #0
 800237a:	4001      	ands	r1, r0
 800237c:	4203      	tst	r3, r0
 800237e:	d00c      	beq.n	800239a <__aeabi_dmul+0x30a>
 8002380:	230f      	movs	r3, #15
 8002382:	4003      	ands	r3, r0
 8002384:	2b04      	cmp	r3, #4
 8002386:	d100      	bne.n	800238a <__aeabi_dmul+0x2fa>
 8002388:	e140      	b.n	800260c <__aeabi_dmul+0x57c>
 800238a:	1d03      	adds	r3, r0, #4
 800238c:	4283      	cmp	r3, r0
 800238e:	41a4      	sbcs	r4, r4
 8002390:	0018      	movs	r0, r3
 8002392:	4264      	negs	r4, r4
 8002394:	0761      	lsls	r1, r4, #29
 8002396:	0264      	lsls	r4, r4, #9
 8002398:	0b24      	lsrs	r4, r4, #12
 800239a:	08c2      	lsrs	r2, r0, #3
 800239c:	2300      	movs	r3, #0
 800239e:	430a      	orrs	r2, r1
 80023a0:	e6cc      	b.n	800213c <__aeabi_dmul+0xac>
 80023a2:	46c0      	nop			@ (mov r8, r8)
 80023a4:	000007ff 	.word	0x000007ff
 80023a8:	fffffc01 	.word	0xfffffc01
 80023ac:	000003ff 	.word	0x000003ff
 80023b0:	feffffff 	.word	0xfeffffff
 80023b4:	000007fe 	.word	0x000007fe
 80023b8:	fffffc0d 	.word	0xfffffc0d
 80023bc:	0000043e 	.word	0x0000043e
 80023c0:	4649      	mov	r1, r9
 80023c2:	464a      	mov	r2, r9
 80023c4:	0409      	lsls	r1, r1, #16
 80023c6:	0c09      	lsrs	r1, r1, #16
 80023c8:	000d      	movs	r5, r1
 80023ca:	0c16      	lsrs	r6, r2, #16
 80023cc:	0c02      	lsrs	r2, r0, #16
 80023ce:	0400      	lsls	r0, r0, #16
 80023d0:	0c00      	lsrs	r0, r0, #16
 80023d2:	4345      	muls	r5, r0
 80023d4:	46ac      	mov	ip, r5
 80023d6:	0005      	movs	r5, r0
 80023d8:	4375      	muls	r5, r6
 80023da:	46a8      	mov	r8, r5
 80023dc:	0015      	movs	r5, r2
 80023de:	000f      	movs	r7, r1
 80023e0:	4375      	muls	r5, r6
 80023e2:	9200      	str	r2, [sp, #0]
 80023e4:	9502      	str	r5, [sp, #8]
 80023e6:	002a      	movs	r2, r5
 80023e8:	9d00      	ldr	r5, [sp, #0]
 80023ea:	436f      	muls	r7, r5
 80023ec:	4665      	mov	r5, ip
 80023ee:	0c2d      	lsrs	r5, r5, #16
 80023f0:	46a9      	mov	r9, r5
 80023f2:	4447      	add	r7, r8
 80023f4:	444f      	add	r7, r9
 80023f6:	45b8      	cmp	r8, r7
 80023f8:	d905      	bls.n	8002406 <__aeabi_dmul+0x376>
 80023fa:	0015      	movs	r5, r2
 80023fc:	2280      	movs	r2, #128	@ 0x80
 80023fe:	0252      	lsls	r2, r2, #9
 8002400:	4690      	mov	r8, r2
 8002402:	4445      	add	r5, r8
 8002404:	9502      	str	r5, [sp, #8]
 8002406:	0c3d      	lsrs	r5, r7, #16
 8002408:	9503      	str	r5, [sp, #12]
 800240a:	4665      	mov	r5, ip
 800240c:	042d      	lsls	r5, r5, #16
 800240e:	043f      	lsls	r7, r7, #16
 8002410:	0c2d      	lsrs	r5, r5, #16
 8002412:	46ac      	mov	ip, r5
 8002414:	003d      	movs	r5, r7
 8002416:	4465      	add	r5, ip
 8002418:	9504      	str	r5, [sp, #16]
 800241a:	0c25      	lsrs	r5, r4, #16
 800241c:	0424      	lsls	r4, r4, #16
 800241e:	0c24      	lsrs	r4, r4, #16
 8002420:	46ac      	mov	ip, r5
 8002422:	0025      	movs	r5, r4
 8002424:	4375      	muls	r5, r6
 8002426:	46a8      	mov	r8, r5
 8002428:	4665      	mov	r5, ip
 800242a:	000f      	movs	r7, r1
 800242c:	4369      	muls	r1, r5
 800242e:	4441      	add	r1, r8
 8002430:	4689      	mov	r9, r1
 8002432:	4367      	muls	r7, r4
 8002434:	0c39      	lsrs	r1, r7, #16
 8002436:	4449      	add	r1, r9
 8002438:	436e      	muls	r6, r5
 800243a:	4588      	cmp	r8, r1
 800243c:	d903      	bls.n	8002446 <__aeabi_dmul+0x3b6>
 800243e:	2280      	movs	r2, #128	@ 0x80
 8002440:	0252      	lsls	r2, r2, #9
 8002442:	4690      	mov	r8, r2
 8002444:	4446      	add	r6, r8
 8002446:	0c0d      	lsrs	r5, r1, #16
 8002448:	46a8      	mov	r8, r5
 800244a:	0035      	movs	r5, r6
 800244c:	4445      	add	r5, r8
 800244e:	9505      	str	r5, [sp, #20]
 8002450:	9d03      	ldr	r5, [sp, #12]
 8002452:	043f      	lsls	r7, r7, #16
 8002454:	46a8      	mov	r8, r5
 8002456:	0c3f      	lsrs	r7, r7, #16
 8002458:	0409      	lsls	r1, r1, #16
 800245a:	19c9      	adds	r1, r1, r7
 800245c:	4488      	add	r8, r1
 800245e:	4645      	mov	r5, r8
 8002460:	9503      	str	r5, [sp, #12]
 8002462:	4655      	mov	r5, sl
 8002464:	042e      	lsls	r6, r5, #16
 8002466:	0c36      	lsrs	r6, r6, #16
 8002468:	0c2f      	lsrs	r7, r5, #16
 800246a:	0035      	movs	r5, r6
 800246c:	4345      	muls	r5, r0
 800246e:	4378      	muls	r0, r7
 8002470:	4681      	mov	r9, r0
 8002472:	0038      	movs	r0, r7
 8002474:	46a8      	mov	r8, r5
 8002476:	0c2d      	lsrs	r5, r5, #16
 8002478:	46aa      	mov	sl, r5
 800247a:	9a00      	ldr	r2, [sp, #0]
 800247c:	4350      	muls	r0, r2
 800247e:	4372      	muls	r2, r6
 8002480:	444a      	add	r2, r9
 8002482:	4452      	add	r2, sl
 8002484:	4591      	cmp	r9, r2
 8002486:	d903      	bls.n	8002490 <__aeabi_dmul+0x400>
 8002488:	2580      	movs	r5, #128	@ 0x80
 800248a:	026d      	lsls	r5, r5, #9
 800248c:	46a9      	mov	r9, r5
 800248e:	4448      	add	r0, r9
 8002490:	0c15      	lsrs	r5, r2, #16
 8002492:	46a9      	mov	r9, r5
 8002494:	4645      	mov	r5, r8
 8002496:	042d      	lsls	r5, r5, #16
 8002498:	0c2d      	lsrs	r5, r5, #16
 800249a:	46a8      	mov	r8, r5
 800249c:	4665      	mov	r5, ip
 800249e:	437d      	muls	r5, r7
 80024a0:	0412      	lsls	r2, r2, #16
 80024a2:	4448      	add	r0, r9
 80024a4:	4490      	add	r8, r2
 80024a6:	46a9      	mov	r9, r5
 80024a8:	0032      	movs	r2, r6
 80024aa:	4665      	mov	r5, ip
 80024ac:	4362      	muls	r2, r4
 80024ae:	436e      	muls	r6, r5
 80024b0:	437c      	muls	r4, r7
 80024b2:	0c17      	lsrs	r7, r2, #16
 80024b4:	1936      	adds	r6, r6, r4
 80024b6:	19bf      	adds	r7, r7, r6
 80024b8:	42bc      	cmp	r4, r7
 80024ba:	d903      	bls.n	80024c4 <__aeabi_dmul+0x434>
 80024bc:	2480      	movs	r4, #128	@ 0x80
 80024be:	0264      	lsls	r4, r4, #9
 80024c0:	46a4      	mov	ip, r4
 80024c2:	44e1      	add	r9, ip
 80024c4:	9c02      	ldr	r4, [sp, #8]
 80024c6:	9e03      	ldr	r6, [sp, #12]
 80024c8:	46a4      	mov	ip, r4
 80024ca:	9d05      	ldr	r5, [sp, #20]
 80024cc:	4466      	add	r6, ip
 80024ce:	428e      	cmp	r6, r1
 80024d0:	4189      	sbcs	r1, r1
 80024d2:	46ac      	mov	ip, r5
 80024d4:	0412      	lsls	r2, r2, #16
 80024d6:	043c      	lsls	r4, r7, #16
 80024d8:	0c12      	lsrs	r2, r2, #16
 80024da:	18a2      	adds	r2, r4, r2
 80024dc:	4462      	add	r2, ip
 80024de:	4249      	negs	r1, r1
 80024e0:	1854      	adds	r4, r2, r1
 80024e2:	4446      	add	r6, r8
 80024e4:	46a4      	mov	ip, r4
 80024e6:	4546      	cmp	r6, r8
 80024e8:	41a4      	sbcs	r4, r4
 80024ea:	4682      	mov	sl, r0
 80024ec:	4264      	negs	r4, r4
 80024ee:	46a0      	mov	r8, r4
 80024f0:	42aa      	cmp	r2, r5
 80024f2:	4192      	sbcs	r2, r2
 80024f4:	458c      	cmp	ip, r1
 80024f6:	4189      	sbcs	r1, r1
 80024f8:	44e2      	add	sl, ip
 80024fa:	44d0      	add	r8, sl
 80024fc:	4249      	negs	r1, r1
 80024fe:	4252      	negs	r2, r2
 8002500:	430a      	orrs	r2, r1
 8002502:	45a0      	cmp	r8, r4
 8002504:	41a4      	sbcs	r4, r4
 8002506:	4582      	cmp	sl, r0
 8002508:	4189      	sbcs	r1, r1
 800250a:	4264      	negs	r4, r4
 800250c:	4249      	negs	r1, r1
 800250e:	430c      	orrs	r4, r1
 8002510:	4641      	mov	r1, r8
 8002512:	0c3f      	lsrs	r7, r7, #16
 8002514:	19d2      	adds	r2, r2, r7
 8002516:	1912      	adds	r2, r2, r4
 8002518:	0dcc      	lsrs	r4, r1, #23
 800251a:	9904      	ldr	r1, [sp, #16]
 800251c:	0270      	lsls	r0, r6, #9
 800251e:	4308      	orrs	r0, r1
 8002520:	1e41      	subs	r1, r0, #1
 8002522:	4188      	sbcs	r0, r1
 8002524:	4641      	mov	r1, r8
 8002526:	444a      	add	r2, r9
 8002528:	0df6      	lsrs	r6, r6, #23
 800252a:	0252      	lsls	r2, r2, #9
 800252c:	4330      	orrs	r0, r6
 800252e:	0249      	lsls	r1, r1, #9
 8002530:	4314      	orrs	r4, r2
 8002532:	4308      	orrs	r0, r1
 8002534:	01d2      	lsls	r2, r2, #7
 8002536:	d535      	bpl.n	80025a4 <__aeabi_dmul+0x514>
 8002538:	2201      	movs	r2, #1
 800253a:	0843      	lsrs	r3, r0, #1
 800253c:	4002      	ands	r2, r0
 800253e:	4313      	orrs	r3, r2
 8002540:	07e0      	lsls	r0, r4, #31
 8002542:	4318      	orrs	r0, r3
 8002544:	0864      	lsrs	r4, r4, #1
 8002546:	e634      	b.n	80021b2 <__aeabi_dmul+0x122>
 8002548:	9b00      	ldr	r3, [sp, #0]
 800254a:	46a2      	mov	sl, r4
 800254c:	469b      	mov	fp, r3
 800254e:	4681      	mov	r9, r0
 8002550:	2480      	movs	r4, #128	@ 0x80
 8002552:	4653      	mov	r3, sl
 8002554:	0324      	lsls	r4, r4, #12
 8002556:	431c      	orrs	r4, r3
 8002558:	0324      	lsls	r4, r4, #12
 800255a:	464a      	mov	r2, r9
 800255c:	4b2e      	ldr	r3, [pc, #184]	@ (8002618 <__aeabi_dmul+0x588>)
 800255e:	0b24      	lsrs	r4, r4, #12
 8002560:	e5ec      	b.n	800213c <__aeabi_dmul+0xac>
 8002562:	f000 fd15 	bl	8002f90 <__clzsi2>
 8002566:	2315      	movs	r3, #21
 8002568:	469c      	mov	ip, r3
 800256a:	4484      	add	ip, r0
 800256c:	0002      	movs	r2, r0
 800256e:	4663      	mov	r3, ip
 8002570:	3220      	adds	r2, #32
 8002572:	2b1c      	cmp	r3, #28
 8002574:	dc00      	bgt.n	8002578 <__aeabi_dmul+0x4e8>
 8002576:	e684      	b.n	8002282 <__aeabi_dmul+0x1f2>
 8002578:	2300      	movs	r3, #0
 800257a:	4699      	mov	r9, r3
 800257c:	0023      	movs	r3, r4
 800257e:	3808      	subs	r0, #8
 8002580:	4083      	lsls	r3, r0
 8002582:	469a      	mov	sl, r3
 8002584:	e68e      	b.n	80022a4 <__aeabi_dmul+0x214>
 8002586:	f000 fd03 	bl	8002f90 <__clzsi2>
 800258a:	0002      	movs	r2, r0
 800258c:	0003      	movs	r3, r0
 800258e:	3215      	adds	r2, #21
 8002590:	3320      	adds	r3, #32
 8002592:	2a1c      	cmp	r2, #28
 8002594:	dc00      	bgt.n	8002598 <__aeabi_dmul+0x508>
 8002596:	e64e      	b.n	8002236 <__aeabi_dmul+0x1a6>
 8002598:	0002      	movs	r2, r0
 800259a:	0034      	movs	r4, r6
 800259c:	3a08      	subs	r2, #8
 800259e:	2000      	movs	r0, #0
 80025a0:	4094      	lsls	r4, r2
 80025a2:	e652      	b.n	800224a <__aeabi_dmul+0x1ba>
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	e604      	b.n	80021b2 <__aeabi_dmul+0x122>
 80025a8:	4b1c      	ldr	r3, [pc, #112]	@ (800261c <__aeabi_dmul+0x58c>)
 80025aa:	0021      	movs	r1, r4
 80025ac:	469c      	mov	ip, r3
 80025ae:	0003      	movs	r3, r0
 80025b0:	9d01      	ldr	r5, [sp, #4]
 80025b2:	40d3      	lsrs	r3, r2
 80025b4:	4465      	add	r5, ip
 80025b6:	40a9      	lsls	r1, r5
 80025b8:	4319      	orrs	r1, r3
 80025ba:	0003      	movs	r3, r0
 80025bc:	40ab      	lsls	r3, r5
 80025be:	1e58      	subs	r0, r3, #1
 80025c0:	4183      	sbcs	r3, r0
 80025c2:	4319      	orrs	r1, r3
 80025c4:	0008      	movs	r0, r1
 80025c6:	40d4      	lsrs	r4, r2
 80025c8:	074b      	lsls	r3, r1, #29
 80025ca:	d009      	beq.n	80025e0 <__aeabi_dmul+0x550>
 80025cc:	230f      	movs	r3, #15
 80025ce:	400b      	ands	r3, r1
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d005      	beq.n	80025e0 <__aeabi_dmul+0x550>
 80025d4:	1d0b      	adds	r3, r1, #4
 80025d6:	428b      	cmp	r3, r1
 80025d8:	4180      	sbcs	r0, r0
 80025da:	4240      	negs	r0, r0
 80025dc:	1824      	adds	r4, r4, r0
 80025de:	0018      	movs	r0, r3
 80025e0:	0223      	lsls	r3, r4, #8
 80025e2:	d400      	bmi.n	80025e6 <__aeabi_dmul+0x556>
 80025e4:	e6d6      	b.n	8002394 <__aeabi_dmul+0x304>
 80025e6:	2301      	movs	r3, #1
 80025e8:	2400      	movs	r4, #0
 80025ea:	2200      	movs	r2, #0
 80025ec:	e5a6      	b.n	800213c <__aeabi_dmul+0xac>
 80025ee:	290f      	cmp	r1, #15
 80025f0:	d1aa      	bne.n	8002548 <__aeabi_dmul+0x4b8>
 80025f2:	2380      	movs	r3, #128	@ 0x80
 80025f4:	4652      	mov	r2, sl
 80025f6:	031b      	lsls	r3, r3, #12
 80025f8:	421a      	tst	r2, r3
 80025fa:	d0a9      	beq.n	8002550 <__aeabi_dmul+0x4c0>
 80025fc:	421c      	tst	r4, r3
 80025fe:	d1a7      	bne.n	8002550 <__aeabi_dmul+0x4c0>
 8002600:	431c      	orrs	r4, r3
 8002602:	9b00      	ldr	r3, [sp, #0]
 8002604:	0002      	movs	r2, r0
 8002606:	469b      	mov	fp, r3
 8002608:	4b03      	ldr	r3, [pc, #12]	@ (8002618 <__aeabi_dmul+0x588>)
 800260a:	e597      	b.n	800213c <__aeabi_dmul+0xac>
 800260c:	2400      	movs	r4, #0
 800260e:	e6c1      	b.n	8002394 <__aeabi_dmul+0x304>
 8002610:	2400      	movs	r4, #0
 8002612:	4b01      	ldr	r3, [pc, #4]	@ (8002618 <__aeabi_dmul+0x588>)
 8002614:	0022      	movs	r2, r4
 8002616:	e591      	b.n	800213c <__aeabi_dmul+0xac>
 8002618:	000007ff 	.word	0x000007ff
 800261c:	0000041e 	.word	0x0000041e

08002620 <__aeabi_dsub>:
 8002620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002622:	464e      	mov	r6, r9
 8002624:	4645      	mov	r5, r8
 8002626:	46de      	mov	lr, fp
 8002628:	4657      	mov	r7, sl
 800262a:	b5e0      	push	{r5, r6, r7, lr}
 800262c:	b085      	sub	sp, #20
 800262e:	9000      	str	r0, [sp, #0]
 8002630:	9101      	str	r1, [sp, #4]
 8002632:	030c      	lsls	r4, r1, #12
 8002634:	004f      	lsls	r7, r1, #1
 8002636:	0fce      	lsrs	r6, r1, #31
 8002638:	0a61      	lsrs	r1, r4, #9
 800263a:	9c00      	ldr	r4, [sp, #0]
 800263c:	46b0      	mov	r8, r6
 800263e:	0f64      	lsrs	r4, r4, #29
 8002640:	430c      	orrs	r4, r1
 8002642:	9900      	ldr	r1, [sp, #0]
 8002644:	0d7f      	lsrs	r7, r7, #21
 8002646:	00c8      	lsls	r0, r1, #3
 8002648:	0011      	movs	r1, r2
 800264a:	001a      	movs	r2, r3
 800264c:	031b      	lsls	r3, r3, #12
 800264e:	469c      	mov	ip, r3
 8002650:	9100      	str	r1, [sp, #0]
 8002652:	9201      	str	r2, [sp, #4]
 8002654:	0051      	lsls	r1, r2, #1
 8002656:	0d4b      	lsrs	r3, r1, #21
 8002658:	4699      	mov	r9, r3
 800265a:	9b01      	ldr	r3, [sp, #4]
 800265c:	9d00      	ldr	r5, [sp, #0]
 800265e:	0fd9      	lsrs	r1, r3, #31
 8002660:	4663      	mov	r3, ip
 8002662:	0f6a      	lsrs	r2, r5, #29
 8002664:	0a5b      	lsrs	r3, r3, #9
 8002666:	4313      	orrs	r3, r2
 8002668:	00ea      	lsls	r2, r5, #3
 800266a:	4694      	mov	ip, r2
 800266c:	4693      	mov	fp, r2
 800266e:	4ac1      	ldr	r2, [pc, #772]	@ (8002974 <__aeabi_dsub+0x354>)
 8002670:	9003      	str	r0, [sp, #12]
 8002672:	9302      	str	r3, [sp, #8]
 8002674:	4591      	cmp	r9, r2
 8002676:	d100      	bne.n	800267a <__aeabi_dsub+0x5a>
 8002678:	e0cd      	b.n	8002816 <__aeabi_dsub+0x1f6>
 800267a:	2501      	movs	r5, #1
 800267c:	4069      	eors	r1, r5
 800267e:	464d      	mov	r5, r9
 8002680:	1b7d      	subs	r5, r7, r5
 8002682:	46aa      	mov	sl, r5
 8002684:	428e      	cmp	r6, r1
 8002686:	d100      	bne.n	800268a <__aeabi_dsub+0x6a>
 8002688:	e080      	b.n	800278c <__aeabi_dsub+0x16c>
 800268a:	2d00      	cmp	r5, #0
 800268c:	dc00      	bgt.n	8002690 <__aeabi_dsub+0x70>
 800268e:	e335      	b.n	8002cfc <__aeabi_dsub+0x6dc>
 8002690:	4649      	mov	r1, r9
 8002692:	2900      	cmp	r1, #0
 8002694:	d100      	bne.n	8002698 <__aeabi_dsub+0x78>
 8002696:	e0df      	b.n	8002858 <__aeabi_dsub+0x238>
 8002698:	4297      	cmp	r7, r2
 800269a:	d100      	bne.n	800269e <__aeabi_dsub+0x7e>
 800269c:	e194      	b.n	80029c8 <__aeabi_dsub+0x3a8>
 800269e:	4652      	mov	r2, sl
 80026a0:	2501      	movs	r5, #1
 80026a2:	2a38      	cmp	r2, #56	@ 0x38
 80026a4:	dc19      	bgt.n	80026da <__aeabi_dsub+0xba>
 80026a6:	2280      	movs	r2, #128	@ 0x80
 80026a8:	9b02      	ldr	r3, [sp, #8]
 80026aa:	0412      	lsls	r2, r2, #16
 80026ac:	4313      	orrs	r3, r2
 80026ae:	9302      	str	r3, [sp, #8]
 80026b0:	4652      	mov	r2, sl
 80026b2:	2a1f      	cmp	r2, #31
 80026b4:	dd00      	ble.n	80026b8 <__aeabi_dsub+0x98>
 80026b6:	e1e3      	b.n	8002a80 <__aeabi_dsub+0x460>
 80026b8:	4653      	mov	r3, sl
 80026ba:	2220      	movs	r2, #32
 80026bc:	4661      	mov	r1, ip
 80026be:	9d02      	ldr	r5, [sp, #8]
 80026c0:	1ad2      	subs	r2, r2, r3
 80026c2:	4095      	lsls	r5, r2
 80026c4:	40d9      	lsrs	r1, r3
 80026c6:	430d      	orrs	r5, r1
 80026c8:	4661      	mov	r1, ip
 80026ca:	4091      	lsls	r1, r2
 80026cc:	000a      	movs	r2, r1
 80026ce:	1e51      	subs	r1, r2, #1
 80026d0:	418a      	sbcs	r2, r1
 80026d2:	4315      	orrs	r5, r2
 80026d4:	9a02      	ldr	r2, [sp, #8]
 80026d6:	40da      	lsrs	r2, r3
 80026d8:	1aa4      	subs	r4, r4, r2
 80026da:	1b45      	subs	r5, r0, r5
 80026dc:	42a8      	cmp	r0, r5
 80026de:	4180      	sbcs	r0, r0
 80026e0:	4240      	negs	r0, r0
 80026e2:	1a24      	subs	r4, r4, r0
 80026e4:	0223      	lsls	r3, r4, #8
 80026e6:	d400      	bmi.n	80026ea <__aeabi_dsub+0xca>
 80026e8:	e13d      	b.n	8002966 <__aeabi_dsub+0x346>
 80026ea:	0264      	lsls	r4, r4, #9
 80026ec:	0a64      	lsrs	r4, r4, #9
 80026ee:	2c00      	cmp	r4, #0
 80026f0:	d100      	bne.n	80026f4 <__aeabi_dsub+0xd4>
 80026f2:	e147      	b.n	8002984 <__aeabi_dsub+0x364>
 80026f4:	0020      	movs	r0, r4
 80026f6:	f000 fc4b 	bl	8002f90 <__clzsi2>
 80026fa:	0003      	movs	r3, r0
 80026fc:	3b08      	subs	r3, #8
 80026fe:	2120      	movs	r1, #32
 8002700:	0028      	movs	r0, r5
 8002702:	1aca      	subs	r2, r1, r3
 8002704:	40d0      	lsrs	r0, r2
 8002706:	409c      	lsls	r4, r3
 8002708:	0002      	movs	r2, r0
 800270a:	409d      	lsls	r5, r3
 800270c:	4322      	orrs	r2, r4
 800270e:	429f      	cmp	r7, r3
 8002710:	dd00      	ble.n	8002714 <__aeabi_dsub+0xf4>
 8002712:	e177      	b.n	8002a04 <__aeabi_dsub+0x3e4>
 8002714:	1bd8      	subs	r0, r3, r7
 8002716:	3001      	adds	r0, #1
 8002718:	1a09      	subs	r1, r1, r0
 800271a:	002c      	movs	r4, r5
 800271c:	408d      	lsls	r5, r1
 800271e:	40c4      	lsrs	r4, r0
 8002720:	1e6b      	subs	r3, r5, #1
 8002722:	419d      	sbcs	r5, r3
 8002724:	0013      	movs	r3, r2
 8002726:	40c2      	lsrs	r2, r0
 8002728:	408b      	lsls	r3, r1
 800272a:	4325      	orrs	r5, r4
 800272c:	2700      	movs	r7, #0
 800272e:	0014      	movs	r4, r2
 8002730:	431d      	orrs	r5, r3
 8002732:	076b      	lsls	r3, r5, #29
 8002734:	d009      	beq.n	800274a <__aeabi_dsub+0x12a>
 8002736:	230f      	movs	r3, #15
 8002738:	402b      	ands	r3, r5
 800273a:	2b04      	cmp	r3, #4
 800273c:	d005      	beq.n	800274a <__aeabi_dsub+0x12a>
 800273e:	1d2b      	adds	r3, r5, #4
 8002740:	42ab      	cmp	r3, r5
 8002742:	41ad      	sbcs	r5, r5
 8002744:	426d      	negs	r5, r5
 8002746:	1964      	adds	r4, r4, r5
 8002748:	001d      	movs	r5, r3
 800274a:	0223      	lsls	r3, r4, #8
 800274c:	d400      	bmi.n	8002750 <__aeabi_dsub+0x130>
 800274e:	e140      	b.n	80029d2 <__aeabi_dsub+0x3b2>
 8002750:	4a88      	ldr	r2, [pc, #544]	@ (8002974 <__aeabi_dsub+0x354>)
 8002752:	3701      	adds	r7, #1
 8002754:	4297      	cmp	r7, r2
 8002756:	d100      	bne.n	800275a <__aeabi_dsub+0x13a>
 8002758:	e101      	b.n	800295e <__aeabi_dsub+0x33e>
 800275a:	2601      	movs	r6, #1
 800275c:	4643      	mov	r3, r8
 800275e:	4986      	ldr	r1, [pc, #536]	@ (8002978 <__aeabi_dsub+0x358>)
 8002760:	08ed      	lsrs	r5, r5, #3
 8002762:	4021      	ands	r1, r4
 8002764:	074a      	lsls	r2, r1, #29
 8002766:	432a      	orrs	r2, r5
 8002768:	057c      	lsls	r4, r7, #21
 800276a:	024d      	lsls	r5, r1, #9
 800276c:	0b2d      	lsrs	r5, r5, #12
 800276e:	0d64      	lsrs	r4, r4, #21
 8002770:	401e      	ands	r6, r3
 8002772:	0524      	lsls	r4, r4, #20
 8002774:	432c      	orrs	r4, r5
 8002776:	07f6      	lsls	r6, r6, #31
 8002778:	4334      	orrs	r4, r6
 800277a:	0010      	movs	r0, r2
 800277c:	0021      	movs	r1, r4
 800277e:	b005      	add	sp, #20
 8002780:	bcf0      	pop	{r4, r5, r6, r7}
 8002782:	46bb      	mov	fp, r7
 8002784:	46b2      	mov	sl, r6
 8002786:	46a9      	mov	r9, r5
 8002788:	46a0      	mov	r8, r4
 800278a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800278c:	2d00      	cmp	r5, #0
 800278e:	dc00      	bgt.n	8002792 <__aeabi_dsub+0x172>
 8002790:	e2d0      	b.n	8002d34 <__aeabi_dsub+0x714>
 8002792:	4649      	mov	r1, r9
 8002794:	2900      	cmp	r1, #0
 8002796:	d000      	beq.n	800279a <__aeabi_dsub+0x17a>
 8002798:	e0d4      	b.n	8002944 <__aeabi_dsub+0x324>
 800279a:	4661      	mov	r1, ip
 800279c:	9b02      	ldr	r3, [sp, #8]
 800279e:	4319      	orrs	r1, r3
 80027a0:	d100      	bne.n	80027a4 <__aeabi_dsub+0x184>
 80027a2:	e12b      	b.n	80029fc <__aeabi_dsub+0x3dc>
 80027a4:	1e69      	subs	r1, r5, #1
 80027a6:	2d01      	cmp	r5, #1
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x18c>
 80027aa:	e1d9      	b.n	8002b60 <__aeabi_dsub+0x540>
 80027ac:	4295      	cmp	r5, r2
 80027ae:	d100      	bne.n	80027b2 <__aeabi_dsub+0x192>
 80027b0:	e10a      	b.n	80029c8 <__aeabi_dsub+0x3a8>
 80027b2:	2501      	movs	r5, #1
 80027b4:	2938      	cmp	r1, #56	@ 0x38
 80027b6:	dc17      	bgt.n	80027e8 <__aeabi_dsub+0x1c8>
 80027b8:	468a      	mov	sl, r1
 80027ba:	4653      	mov	r3, sl
 80027bc:	2b1f      	cmp	r3, #31
 80027be:	dd00      	ble.n	80027c2 <__aeabi_dsub+0x1a2>
 80027c0:	e1e7      	b.n	8002b92 <__aeabi_dsub+0x572>
 80027c2:	2220      	movs	r2, #32
 80027c4:	1ad2      	subs	r2, r2, r3
 80027c6:	9b02      	ldr	r3, [sp, #8]
 80027c8:	4661      	mov	r1, ip
 80027ca:	4093      	lsls	r3, r2
 80027cc:	001d      	movs	r5, r3
 80027ce:	4653      	mov	r3, sl
 80027d0:	40d9      	lsrs	r1, r3
 80027d2:	4663      	mov	r3, ip
 80027d4:	4093      	lsls	r3, r2
 80027d6:	001a      	movs	r2, r3
 80027d8:	430d      	orrs	r5, r1
 80027da:	1e51      	subs	r1, r2, #1
 80027dc:	418a      	sbcs	r2, r1
 80027de:	4653      	mov	r3, sl
 80027e0:	4315      	orrs	r5, r2
 80027e2:	9a02      	ldr	r2, [sp, #8]
 80027e4:	40da      	lsrs	r2, r3
 80027e6:	18a4      	adds	r4, r4, r2
 80027e8:	182d      	adds	r5, r5, r0
 80027ea:	4285      	cmp	r5, r0
 80027ec:	4180      	sbcs	r0, r0
 80027ee:	4240      	negs	r0, r0
 80027f0:	1824      	adds	r4, r4, r0
 80027f2:	0223      	lsls	r3, r4, #8
 80027f4:	d400      	bmi.n	80027f8 <__aeabi_dsub+0x1d8>
 80027f6:	e0b6      	b.n	8002966 <__aeabi_dsub+0x346>
 80027f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002974 <__aeabi_dsub+0x354>)
 80027fa:	3701      	adds	r7, #1
 80027fc:	429f      	cmp	r7, r3
 80027fe:	d100      	bne.n	8002802 <__aeabi_dsub+0x1e2>
 8002800:	e0ad      	b.n	800295e <__aeabi_dsub+0x33e>
 8002802:	2101      	movs	r1, #1
 8002804:	4b5c      	ldr	r3, [pc, #368]	@ (8002978 <__aeabi_dsub+0x358>)
 8002806:	086a      	lsrs	r2, r5, #1
 8002808:	401c      	ands	r4, r3
 800280a:	4029      	ands	r1, r5
 800280c:	430a      	orrs	r2, r1
 800280e:	07e5      	lsls	r5, r4, #31
 8002810:	4315      	orrs	r5, r2
 8002812:	0864      	lsrs	r4, r4, #1
 8002814:	e78d      	b.n	8002732 <__aeabi_dsub+0x112>
 8002816:	4a59      	ldr	r2, [pc, #356]	@ (800297c <__aeabi_dsub+0x35c>)
 8002818:	9b02      	ldr	r3, [sp, #8]
 800281a:	4692      	mov	sl, r2
 800281c:	4662      	mov	r2, ip
 800281e:	44ba      	add	sl, r7
 8002820:	431a      	orrs	r2, r3
 8002822:	d02c      	beq.n	800287e <__aeabi_dsub+0x25e>
 8002824:	428e      	cmp	r6, r1
 8002826:	d02e      	beq.n	8002886 <__aeabi_dsub+0x266>
 8002828:	4652      	mov	r2, sl
 800282a:	2a00      	cmp	r2, #0
 800282c:	d060      	beq.n	80028f0 <__aeabi_dsub+0x2d0>
 800282e:	2f00      	cmp	r7, #0
 8002830:	d100      	bne.n	8002834 <__aeabi_dsub+0x214>
 8002832:	e0db      	b.n	80029ec <__aeabi_dsub+0x3cc>
 8002834:	4663      	mov	r3, ip
 8002836:	000e      	movs	r6, r1
 8002838:	9c02      	ldr	r4, [sp, #8]
 800283a:	08d8      	lsrs	r0, r3, #3
 800283c:	0762      	lsls	r2, r4, #29
 800283e:	4302      	orrs	r2, r0
 8002840:	08e4      	lsrs	r4, r4, #3
 8002842:	0013      	movs	r3, r2
 8002844:	4323      	orrs	r3, r4
 8002846:	d100      	bne.n	800284a <__aeabi_dsub+0x22a>
 8002848:	e254      	b.n	8002cf4 <__aeabi_dsub+0x6d4>
 800284a:	2580      	movs	r5, #128	@ 0x80
 800284c:	032d      	lsls	r5, r5, #12
 800284e:	4325      	orrs	r5, r4
 8002850:	032d      	lsls	r5, r5, #12
 8002852:	4c48      	ldr	r4, [pc, #288]	@ (8002974 <__aeabi_dsub+0x354>)
 8002854:	0b2d      	lsrs	r5, r5, #12
 8002856:	e78c      	b.n	8002772 <__aeabi_dsub+0x152>
 8002858:	4661      	mov	r1, ip
 800285a:	9b02      	ldr	r3, [sp, #8]
 800285c:	4319      	orrs	r1, r3
 800285e:	d100      	bne.n	8002862 <__aeabi_dsub+0x242>
 8002860:	e0cc      	b.n	80029fc <__aeabi_dsub+0x3dc>
 8002862:	0029      	movs	r1, r5
 8002864:	3901      	subs	r1, #1
 8002866:	2d01      	cmp	r5, #1
 8002868:	d100      	bne.n	800286c <__aeabi_dsub+0x24c>
 800286a:	e188      	b.n	8002b7e <__aeabi_dsub+0x55e>
 800286c:	4295      	cmp	r5, r2
 800286e:	d100      	bne.n	8002872 <__aeabi_dsub+0x252>
 8002870:	e0aa      	b.n	80029c8 <__aeabi_dsub+0x3a8>
 8002872:	2501      	movs	r5, #1
 8002874:	2938      	cmp	r1, #56	@ 0x38
 8002876:	dd00      	ble.n	800287a <__aeabi_dsub+0x25a>
 8002878:	e72f      	b.n	80026da <__aeabi_dsub+0xba>
 800287a:	468a      	mov	sl, r1
 800287c:	e718      	b.n	80026b0 <__aeabi_dsub+0x90>
 800287e:	2201      	movs	r2, #1
 8002880:	4051      	eors	r1, r2
 8002882:	428e      	cmp	r6, r1
 8002884:	d1d0      	bne.n	8002828 <__aeabi_dsub+0x208>
 8002886:	4653      	mov	r3, sl
 8002888:	2b00      	cmp	r3, #0
 800288a:	d100      	bne.n	800288e <__aeabi_dsub+0x26e>
 800288c:	e0be      	b.n	8002a0c <__aeabi_dsub+0x3ec>
 800288e:	2f00      	cmp	r7, #0
 8002890:	d000      	beq.n	8002894 <__aeabi_dsub+0x274>
 8002892:	e138      	b.n	8002b06 <__aeabi_dsub+0x4e6>
 8002894:	46ca      	mov	sl, r9
 8002896:	0022      	movs	r2, r4
 8002898:	4302      	orrs	r2, r0
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x27e>
 800289c:	e1e2      	b.n	8002c64 <__aeabi_dsub+0x644>
 800289e:	4653      	mov	r3, sl
 80028a0:	1e59      	subs	r1, r3, #1
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d100      	bne.n	80028a8 <__aeabi_dsub+0x288>
 80028a6:	e20d      	b.n	8002cc4 <__aeabi_dsub+0x6a4>
 80028a8:	4a32      	ldr	r2, [pc, #200]	@ (8002974 <__aeabi_dsub+0x354>)
 80028aa:	4592      	cmp	sl, r2
 80028ac:	d100      	bne.n	80028b0 <__aeabi_dsub+0x290>
 80028ae:	e1d2      	b.n	8002c56 <__aeabi_dsub+0x636>
 80028b0:	2701      	movs	r7, #1
 80028b2:	2938      	cmp	r1, #56	@ 0x38
 80028b4:	dc13      	bgt.n	80028de <__aeabi_dsub+0x2be>
 80028b6:	291f      	cmp	r1, #31
 80028b8:	dd00      	ble.n	80028bc <__aeabi_dsub+0x29c>
 80028ba:	e1ee      	b.n	8002c9a <__aeabi_dsub+0x67a>
 80028bc:	2220      	movs	r2, #32
 80028be:	9b02      	ldr	r3, [sp, #8]
 80028c0:	1a52      	subs	r2, r2, r1
 80028c2:	0025      	movs	r5, r4
 80028c4:	0007      	movs	r7, r0
 80028c6:	469a      	mov	sl, r3
 80028c8:	40cc      	lsrs	r4, r1
 80028ca:	4090      	lsls	r0, r2
 80028cc:	4095      	lsls	r5, r2
 80028ce:	40cf      	lsrs	r7, r1
 80028d0:	44a2      	add	sl, r4
 80028d2:	1e42      	subs	r2, r0, #1
 80028d4:	4190      	sbcs	r0, r2
 80028d6:	4653      	mov	r3, sl
 80028d8:	432f      	orrs	r7, r5
 80028da:	4307      	orrs	r7, r0
 80028dc:	9302      	str	r3, [sp, #8]
 80028de:	003d      	movs	r5, r7
 80028e0:	4465      	add	r5, ip
 80028e2:	4565      	cmp	r5, ip
 80028e4:	4192      	sbcs	r2, r2
 80028e6:	9b02      	ldr	r3, [sp, #8]
 80028e8:	4252      	negs	r2, r2
 80028ea:	464f      	mov	r7, r9
 80028ec:	18d4      	adds	r4, r2, r3
 80028ee:	e780      	b.n	80027f2 <__aeabi_dsub+0x1d2>
 80028f0:	4a23      	ldr	r2, [pc, #140]	@ (8002980 <__aeabi_dsub+0x360>)
 80028f2:	1c7d      	adds	r5, r7, #1
 80028f4:	4215      	tst	r5, r2
 80028f6:	d000      	beq.n	80028fa <__aeabi_dsub+0x2da>
 80028f8:	e0aa      	b.n	8002a50 <__aeabi_dsub+0x430>
 80028fa:	4662      	mov	r2, ip
 80028fc:	0025      	movs	r5, r4
 80028fe:	9b02      	ldr	r3, [sp, #8]
 8002900:	4305      	orrs	r5, r0
 8002902:	431a      	orrs	r2, r3
 8002904:	2f00      	cmp	r7, #0
 8002906:	d000      	beq.n	800290a <__aeabi_dsub+0x2ea>
 8002908:	e0f5      	b.n	8002af6 <__aeabi_dsub+0x4d6>
 800290a:	2d00      	cmp	r5, #0
 800290c:	d100      	bne.n	8002910 <__aeabi_dsub+0x2f0>
 800290e:	e16b      	b.n	8002be8 <__aeabi_dsub+0x5c8>
 8002910:	2a00      	cmp	r2, #0
 8002912:	d100      	bne.n	8002916 <__aeabi_dsub+0x2f6>
 8002914:	e152      	b.n	8002bbc <__aeabi_dsub+0x59c>
 8002916:	4663      	mov	r3, ip
 8002918:	1ac5      	subs	r5, r0, r3
 800291a:	9b02      	ldr	r3, [sp, #8]
 800291c:	1ae2      	subs	r2, r4, r3
 800291e:	42a8      	cmp	r0, r5
 8002920:	419b      	sbcs	r3, r3
 8002922:	425b      	negs	r3, r3
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	021a      	lsls	r2, r3, #8
 8002928:	d400      	bmi.n	800292c <__aeabi_dsub+0x30c>
 800292a:	e1d5      	b.n	8002cd8 <__aeabi_dsub+0x6b8>
 800292c:	4663      	mov	r3, ip
 800292e:	1a1d      	subs	r5, r3, r0
 8002930:	45ac      	cmp	ip, r5
 8002932:	4192      	sbcs	r2, r2
 8002934:	2601      	movs	r6, #1
 8002936:	9b02      	ldr	r3, [sp, #8]
 8002938:	4252      	negs	r2, r2
 800293a:	1b1c      	subs	r4, r3, r4
 800293c:	4688      	mov	r8, r1
 800293e:	1aa4      	subs	r4, r4, r2
 8002940:	400e      	ands	r6, r1
 8002942:	e6f6      	b.n	8002732 <__aeabi_dsub+0x112>
 8002944:	4297      	cmp	r7, r2
 8002946:	d03f      	beq.n	80029c8 <__aeabi_dsub+0x3a8>
 8002948:	4652      	mov	r2, sl
 800294a:	2501      	movs	r5, #1
 800294c:	2a38      	cmp	r2, #56	@ 0x38
 800294e:	dd00      	ble.n	8002952 <__aeabi_dsub+0x332>
 8002950:	e74a      	b.n	80027e8 <__aeabi_dsub+0x1c8>
 8002952:	2280      	movs	r2, #128	@ 0x80
 8002954:	9b02      	ldr	r3, [sp, #8]
 8002956:	0412      	lsls	r2, r2, #16
 8002958:	4313      	orrs	r3, r2
 800295a:	9302      	str	r3, [sp, #8]
 800295c:	e72d      	b.n	80027ba <__aeabi_dsub+0x19a>
 800295e:	003c      	movs	r4, r7
 8002960:	2500      	movs	r5, #0
 8002962:	2200      	movs	r2, #0
 8002964:	e705      	b.n	8002772 <__aeabi_dsub+0x152>
 8002966:	2307      	movs	r3, #7
 8002968:	402b      	ands	r3, r5
 800296a:	2b00      	cmp	r3, #0
 800296c:	d000      	beq.n	8002970 <__aeabi_dsub+0x350>
 800296e:	e6e2      	b.n	8002736 <__aeabi_dsub+0x116>
 8002970:	e06b      	b.n	8002a4a <__aeabi_dsub+0x42a>
 8002972:	46c0      	nop			@ (mov r8, r8)
 8002974:	000007ff 	.word	0x000007ff
 8002978:	ff7fffff 	.word	0xff7fffff
 800297c:	fffff801 	.word	0xfffff801
 8002980:	000007fe 	.word	0x000007fe
 8002984:	0028      	movs	r0, r5
 8002986:	f000 fb03 	bl	8002f90 <__clzsi2>
 800298a:	0003      	movs	r3, r0
 800298c:	3318      	adds	r3, #24
 800298e:	2b1f      	cmp	r3, #31
 8002990:	dc00      	bgt.n	8002994 <__aeabi_dsub+0x374>
 8002992:	e6b4      	b.n	80026fe <__aeabi_dsub+0xde>
 8002994:	002a      	movs	r2, r5
 8002996:	3808      	subs	r0, #8
 8002998:	4082      	lsls	r2, r0
 800299a:	429f      	cmp	r7, r3
 800299c:	dd00      	ble.n	80029a0 <__aeabi_dsub+0x380>
 800299e:	e0b9      	b.n	8002b14 <__aeabi_dsub+0x4f4>
 80029a0:	1bdb      	subs	r3, r3, r7
 80029a2:	1c58      	adds	r0, r3, #1
 80029a4:	281f      	cmp	r0, #31
 80029a6:	dc00      	bgt.n	80029aa <__aeabi_dsub+0x38a>
 80029a8:	e1a0      	b.n	8002cec <__aeabi_dsub+0x6cc>
 80029aa:	0015      	movs	r5, r2
 80029ac:	3b1f      	subs	r3, #31
 80029ae:	40dd      	lsrs	r5, r3
 80029b0:	2820      	cmp	r0, #32
 80029b2:	d005      	beq.n	80029c0 <__aeabi_dsub+0x3a0>
 80029b4:	2340      	movs	r3, #64	@ 0x40
 80029b6:	1a1b      	subs	r3, r3, r0
 80029b8:	409a      	lsls	r2, r3
 80029ba:	1e53      	subs	r3, r2, #1
 80029bc:	419a      	sbcs	r2, r3
 80029be:	4315      	orrs	r5, r2
 80029c0:	2307      	movs	r3, #7
 80029c2:	2700      	movs	r7, #0
 80029c4:	402b      	ands	r3, r5
 80029c6:	e7d0      	b.n	800296a <__aeabi_dsub+0x34a>
 80029c8:	08c0      	lsrs	r0, r0, #3
 80029ca:	0762      	lsls	r2, r4, #29
 80029cc:	4302      	orrs	r2, r0
 80029ce:	08e4      	lsrs	r4, r4, #3
 80029d0:	e737      	b.n	8002842 <__aeabi_dsub+0x222>
 80029d2:	08ea      	lsrs	r2, r5, #3
 80029d4:	0763      	lsls	r3, r4, #29
 80029d6:	431a      	orrs	r2, r3
 80029d8:	4bd3      	ldr	r3, [pc, #844]	@ (8002d28 <__aeabi_dsub+0x708>)
 80029da:	08e4      	lsrs	r4, r4, #3
 80029dc:	429f      	cmp	r7, r3
 80029de:	d100      	bne.n	80029e2 <__aeabi_dsub+0x3c2>
 80029e0:	e72f      	b.n	8002842 <__aeabi_dsub+0x222>
 80029e2:	0324      	lsls	r4, r4, #12
 80029e4:	0b25      	lsrs	r5, r4, #12
 80029e6:	057c      	lsls	r4, r7, #21
 80029e8:	0d64      	lsrs	r4, r4, #21
 80029ea:	e6c2      	b.n	8002772 <__aeabi_dsub+0x152>
 80029ec:	46ca      	mov	sl, r9
 80029ee:	0022      	movs	r2, r4
 80029f0:	4302      	orrs	r2, r0
 80029f2:	d158      	bne.n	8002aa6 <__aeabi_dsub+0x486>
 80029f4:	4663      	mov	r3, ip
 80029f6:	000e      	movs	r6, r1
 80029f8:	9c02      	ldr	r4, [sp, #8]
 80029fa:	9303      	str	r3, [sp, #12]
 80029fc:	9b03      	ldr	r3, [sp, #12]
 80029fe:	4657      	mov	r7, sl
 8002a00:	08da      	lsrs	r2, r3, #3
 8002a02:	e7e7      	b.n	80029d4 <__aeabi_dsub+0x3b4>
 8002a04:	4cc9      	ldr	r4, [pc, #804]	@ (8002d2c <__aeabi_dsub+0x70c>)
 8002a06:	1aff      	subs	r7, r7, r3
 8002a08:	4014      	ands	r4, r2
 8002a0a:	e692      	b.n	8002732 <__aeabi_dsub+0x112>
 8002a0c:	4dc8      	ldr	r5, [pc, #800]	@ (8002d30 <__aeabi_dsub+0x710>)
 8002a0e:	1c7a      	adds	r2, r7, #1
 8002a10:	422a      	tst	r2, r5
 8002a12:	d000      	beq.n	8002a16 <__aeabi_dsub+0x3f6>
 8002a14:	e084      	b.n	8002b20 <__aeabi_dsub+0x500>
 8002a16:	0022      	movs	r2, r4
 8002a18:	4302      	orrs	r2, r0
 8002a1a:	2f00      	cmp	r7, #0
 8002a1c:	d000      	beq.n	8002a20 <__aeabi_dsub+0x400>
 8002a1e:	e0ef      	b.n	8002c00 <__aeabi_dsub+0x5e0>
 8002a20:	2a00      	cmp	r2, #0
 8002a22:	d100      	bne.n	8002a26 <__aeabi_dsub+0x406>
 8002a24:	e0e5      	b.n	8002bf2 <__aeabi_dsub+0x5d2>
 8002a26:	4662      	mov	r2, ip
 8002a28:	9902      	ldr	r1, [sp, #8]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	d100      	bne.n	8002a30 <__aeabi_dsub+0x410>
 8002a2e:	e0c5      	b.n	8002bbc <__aeabi_dsub+0x59c>
 8002a30:	4663      	mov	r3, ip
 8002a32:	18c5      	adds	r5, r0, r3
 8002a34:	468c      	mov	ip, r1
 8002a36:	4285      	cmp	r5, r0
 8002a38:	4180      	sbcs	r0, r0
 8002a3a:	4464      	add	r4, ip
 8002a3c:	4240      	negs	r0, r0
 8002a3e:	1824      	adds	r4, r4, r0
 8002a40:	0223      	lsls	r3, r4, #8
 8002a42:	d502      	bpl.n	8002a4a <__aeabi_dsub+0x42a>
 8002a44:	4bb9      	ldr	r3, [pc, #740]	@ (8002d2c <__aeabi_dsub+0x70c>)
 8002a46:	3701      	adds	r7, #1
 8002a48:	401c      	ands	r4, r3
 8002a4a:	46ba      	mov	sl, r7
 8002a4c:	9503      	str	r5, [sp, #12]
 8002a4e:	e7d5      	b.n	80029fc <__aeabi_dsub+0x3dc>
 8002a50:	4662      	mov	r2, ip
 8002a52:	1a85      	subs	r5, r0, r2
 8002a54:	42a8      	cmp	r0, r5
 8002a56:	4192      	sbcs	r2, r2
 8002a58:	4252      	negs	r2, r2
 8002a5a:	4691      	mov	r9, r2
 8002a5c:	9b02      	ldr	r3, [sp, #8]
 8002a5e:	1ae3      	subs	r3, r4, r3
 8002a60:	001a      	movs	r2, r3
 8002a62:	464b      	mov	r3, r9
 8002a64:	1ad2      	subs	r2, r2, r3
 8002a66:	0013      	movs	r3, r2
 8002a68:	4691      	mov	r9, r2
 8002a6a:	021a      	lsls	r2, r3, #8
 8002a6c:	d46c      	bmi.n	8002b48 <__aeabi_dsub+0x528>
 8002a6e:	464a      	mov	r2, r9
 8002a70:	464c      	mov	r4, r9
 8002a72:	432a      	orrs	r2, r5
 8002a74:	d000      	beq.n	8002a78 <__aeabi_dsub+0x458>
 8002a76:	e63a      	b.n	80026ee <__aeabi_dsub+0xce>
 8002a78:	2600      	movs	r6, #0
 8002a7a:	2400      	movs	r4, #0
 8002a7c:	2500      	movs	r5, #0
 8002a7e:	e678      	b.n	8002772 <__aeabi_dsub+0x152>
 8002a80:	9902      	ldr	r1, [sp, #8]
 8002a82:	4653      	mov	r3, sl
 8002a84:	000d      	movs	r5, r1
 8002a86:	3a20      	subs	r2, #32
 8002a88:	40d5      	lsrs	r5, r2
 8002a8a:	2b20      	cmp	r3, #32
 8002a8c:	d006      	beq.n	8002a9c <__aeabi_dsub+0x47c>
 8002a8e:	2240      	movs	r2, #64	@ 0x40
 8002a90:	1ad2      	subs	r2, r2, r3
 8002a92:	000b      	movs	r3, r1
 8002a94:	4093      	lsls	r3, r2
 8002a96:	4662      	mov	r2, ip
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	4693      	mov	fp, r2
 8002a9c:	465b      	mov	r3, fp
 8002a9e:	1e5a      	subs	r2, r3, #1
 8002aa0:	4193      	sbcs	r3, r2
 8002aa2:	431d      	orrs	r5, r3
 8002aa4:	e619      	b.n	80026da <__aeabi_dsub+0xba>
 8002aa6:	4653      	mov	r3, sl
 8002aa8:	1e5a      	subs	r2, r3, #1
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d100      	bne.n	8002ab0 <__aeabi_dsub+0x490>
 8002aae:	e0c6      	b.n	8002c3e <__aeabi_dsub+0x61e>
 8002ab0:	4e9d      	ldr	r6, [pc, #628]	@ (8002d28 <__aeabi_dsub+0x708>)
 8002ab2:	45b2      	cmp	sl, r6
 8002ab4:	d100      	bne.n	8002ab8 <__aeabi_dsub+0x498>
 8002ab6:	e6bd      	b.n	8002834 <__aeabi_dsub+0x214>
 8002ab8:	4688      	mov	r8, r1
 8002aba:	000e      	movs	r6, r1
 8002abc:	2501      	movs	r5, #1
 8002abe:	2a38      	cmp	r2, #56	@ 0x38
 8002ac0:	dc10      	bgt.n	8002ae4 <__aeabi_dsub+0x4c4>
 8002ac2:	2a1f      	cmp	r2, #31
 8002ac4:	dc7f      	bgt.n	8002bc6 <__aeabi_dsub+0x5a6>
 8002ac6:	2120      	movs	r1, #32
 8002ac8:	0025      	movs	r5, r4
 8002aca:	1a89      	subs	r1, r1, r2
 8002acc:	0007      	movs	r7, r0
 8002ace:	4088      	lsls	r0, r1
 8002ad0:	408d      	lsls	r5, r1
 8002ad2:	40d7      	lsrs	r7, r2
 8002ad4:	40d4      	lsrs	r4, r2
 8002ad6:	1e41      	subs	r1, r0, #1
 8002ad8:	4188      	sbcs	r0, r1
 8002ada:	9b02      	ldr	r3, [sp, #8]
 8002adc:	433d      	orrs	r5, r7
 8002ade:	1b1b      	subs	r3, r3, r4
 8002ae0:	4305      	orrs	r5, r0
 8002ae2:	9302      	str	r3, [sp, #8]
 8002ae4:	4662      	mov	r2, ip
 8002ae6:	1b55      	subs	r5, r2, r5
 8002ae8:	45ac      	cmp	ip, r5
 8002aea:	4192      	sbcs	r2, r2
 8002aec:	9b02      	ldr	r3, [sp, #8]
 8002aee:	4252      	negs	r2, r2
 8002af0:	464f      	mov	r7, r9
 8002af2:	1a9c      	subs	r4, r3, r2
 8002af4:	e5f6      	b.n	80026e4 <__aeabi_dsub+0xc4>
 8002af6:	2d00      	cmp	r5, #0
 8002af8:	d000      	beq.n	8002afc <__aeabi_dsub+0x4dc>
 8002afa:	e0b7      	b.n	8002c6c <__aeabi_dsub+0x64c>
 8002afc:	2a00      	cmp	r2, #0
 8002afe:	d100      	bne.n	8002b02 <__aeabi_dsub+0x4e2>
 8002b00:	e0f0      	b.n	8002ce4 <__aeabi_dsub+0x6c4>
 8002b02:	2601      	movs	r6, #1
 8002b04:	400e      	ands	r6, r1
 8002b06:	4663      	mov	r3, ip
 8002b08:	9802      	ldr	r0, [sp, #8]
 8002b0a:	08d9      	lsrs	r1, r3, #3
 8002b0c:	0742      	lsls	r2, r0, #29
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	08c4      	lsrs	r4, r0, #3
 8002b12:	e696      	b.n	8002842 <__aeabi_dsub+0x222>
 8002b14:	4c85      	ldr	r4, [pc, #532]	@ (8002d2c <__aeabi_dsub+0x70c>)
 8002b16:	1aff      	subs	r7, r7, r3
 8002b18:	4014      	ands	r4, r2
 8002b1a:	0762      	lsls	r2, r4, #29
 8002b1c:	08e4      	lsrs	r4, r4, #3
 8002b1e:	e760      	b.n	80029e2 <__aeabi_dsub+0x3c2>
 8002b20:	4981      	ldr	r1, [pc, #516]	@ (8002d28 <__aeabi_dsub+0x708>)
 8002b22:	428a      	cmp	r2, r1
 8002b24:	d100      	bne.n	8002b28 <__aeabi_dsub+0x508>
 8002b26:	e0c9      	b.n	8002cbc <__aeabi_dsub+0x69c>
 8002b28:	4663      	mov	r3, ip
 8002b2a:	18c1      	adds	r1, r0, r3
 8002b2c:	4281      	cmp	r1, r0
 8002b2e:	4180      	sbcs	r0, r0
 8002b30:	9b02      	ldr	r3, [sp, #8]
 8002b32:	4240      	negs	r0, r0
 8002b34:	18e3      	adds	r3, r4, r3
 8002b36:	181b      	adds	r3, r3, r0
 8002b38:	07dd      	lsls	r5, r3, #31
 8002b3a:	085c      	lsrs	r4, r3, #1
 8002b3c:	2307      	movs	r3, #7
 8002b3e:	0849      	lsrs	r1, r1, #1
 8002b40:	430d      	orrs	r5, r1
 8002b42:	0017      	movs	r7, r2
 8002b44:	402b      	ands	r3, r5
 8002b46:	e710      	b.n	800296a <__aeabi_dsub+0x34a>
 8002b48:	4663      	mov	r3, ip
 8002b4a:	1a1d      	subs	r5, r3, r0
 8002b4c:	45ac      	cmp	ip, r5
 8002b4e:	4192      	sbcs	r2, r2
 8002b50:	2601      	movs	r6, #1
 8002b52:	9b02      	ldr	r3, [sp, #8]
 8002b54:	4252      	negs	r2, r2
 8002b56:	1b1c      	subs	r4, r3, r4
 8002b58:	4688      	mov	r8, r1
 8002b5a:	1aa4      	subs	r4, r4, r2
 8002b5c:	400e      	ands	r6, r1
 8002b5e:	e5c6      	b.n	80026ee <__aeabi_dsub+0xce>
 8002b60:	4663      	mov	r3, ip
 8002b62:	18c5      	adds	r5, r0, r3
 8002b64:	9b02      	ldr	r3, [sp, #8]
 8002b66:	4285      	cmp	r5, r0
 8002b68:	4180      	sbcs	r0, r0
 8002b6a:	469c      	mov	ip, r3
 8002b6c:	4240      	negs	r0, r0
 8002b6e:	4464      	add	r4, ip
 8002b70:	1824      	adds	r4, r4, r0
 8002b72:	2701      	movs	r7, #1
 8002b74:	0223      	lsls	r3, r4, #8
 8002b76:	d400      	bmi.n	8002b7a <__aeabi_dsub+0x55a>
 8002b78:	e6f5      	b.n	8002966 <__aeabi_dsub+0x346>
 8002b7a:	2702      	movs	r7, #2
 8002b7c:	e641      	b.n	8002802 <__aeabi_dsub+0x1e2>
 8002b7e:	4663      	mov	r3, ip
 8002b80:	1ac5      	subs	r5, r0, r3
 8002b82:	42a8      	cmp	r0, r5
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	9b02      	ldr	r3, [sp, #8]
 8002b88:	4240      	negs	r0, r0
 8002b8a:	1ae4      	subs	r4, r4, r3
 8002b8c:	2701      	movs	r7, #1
 8002b8e:	1a24      	subs	r4, r4, r0
 8002b90:	e5a8      	b.n	80026e4 <__aeabi_dsub+0xc4>
 8002b92:	9d02      	ldr	r5, [sp, #8]
 8002b94:	4652      	mov	r2, sl
 8002b96:	002b      	movs	r3, r5
 8002b98:	3a20      	subs	r2, #32
 8002b9a:	40d3      	lsrs	r3, r2
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	4653      	mov	r3, sl
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d006      	beq.n	8002bb2 <__aeabi_dsub+0x592>
 8002ba4:	2240      	movs	r2, #64	@ 0x40
 8002ba6:	1ad2      	subs	r2, r2, r3
 8002ba8:	002b      	movs	r3, r5
 8002baa:	4093      	lsls	r3, r2
 8002bac:	4662      	mov	r2, ip
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	4693      	mov	fp, r2
 8002bb2:	465d      	mov	r5, fp
 8002bb4:	1e6b      	subs	r3, r5, #1
 8002bb6:	419d      	sbcs	r5, r3
 8002bb8:	430d      	orrs	r5, r1
 8002bba:	e615      	b.n	80027e8 <__aeabi_dsub+0x1c8>
 8002bbc:	0762      	lsls	r2, r4, #29
 8002bbe:	08c0      	lsrs	r0, r0, #3
 8002bc0:	4302      	orrs	r2, r0
 8002bc2:	08e4      	lsrs	r4, r4, #3
 8002bc4:	e70d      	b.n	80029e2 <__aeabi_dsub+0x3c2>
 8002bc6:	0011      	movs	r1, r2
 8002bc8:	0027      	movs	r7, r4
 8002bca:	3920      	subs	r1, #32
 8002bcc:	40cf      	lsrs	r7, r1
 8002bce:	2a20      	cmp	r2, #32
 8002bd0:	d005      	beq.n	8002bde <__aeabi_dsub+0x5be>
 8002bd2:	2140      	movs	r1, #64	@ 0x40
 8002bd4:	1a8a      	subs	r2, r1, r2
 8002bd6:	4094      	lsls	r4, r2
 8002bd8:	0025      	movs	r5, r4
 8002bda:	4305      	orrs	r5, r0
 8002bdc:	9503      	str	r5, [sp, #12]
 8002bde:	9d03      	ldr	r5, [sp, #12]
 8002be0:	1e6a      	subs	r2, r5, #1
 8002be2:	4195      	sbcs	r5, r2
 8002be4:	433d      	orrs	r5, r7
 8002be6:	e77d      	b.n	8002ae4 <__aeabi_dsub+0x4c4>
 8002be8:	2a00      	cmp	r2, #0
 8002bea:	d100      	bne.n	8002bee <__aeabi_dsub+0x5ce>
 8002bec:	e744      	b.n	8002a78 <__aeabi_dsub+0x458>
 8002bee:	2601      	movs	r6, #1
 8002bf0:	400e      	ands	r6, r1
 8002bf2:	4663      	mov	r3, ip
 8002bf4:	08d9      	lsrs	r1, r3, #3
 8002bf6:	9b02      	ldr	r3, [sp, #8]
 8002bf8:	075a      	lsls	r2, r3, #29
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	08dc      	lsrs	r4, r3, #3
 8002bfe:	e6f0      	b.n	80029e2 <__aeabi_dsub+0x3c2>
 8002c00:	2a00      	cmp	r2, #0
 8002c02:	d028      	beq.n	8002c56 <__aeabi_dsub+0x636>
 8002c04:	4662      	mov	r2, ip
 8002c06:	9f02      	ldr	r7, [sp, #8]
 8002c08:	08c0      	lsrs	r0, r0, #3
 8002c0a:	433a      	orrs	r2, r7
 8002c0c:	d100      	bne.n	8002c10 <__aeabi_dsub+0x5f0>
 8002c0e:	e6dc      	b.n	80029ca <__aeabi_dsub+0x3aa>
 8002c10:	0762      	lsls	r2, r4, #29
 8002c12:	4310      	orrs	r0, r2
 8002c14:	2280      	movs	r2, #128	@ 0x80
 8002c16:	08e4      	lsrs	r4, r4, #3
 8002c18:	0312      	lsls	r2, r2, #12
 8002c1a:	4214      	tst	r4, r2
 8002c1c:	d009      	beq.n	8002c32 <__aeabi_dsub+0x612>
 8002c1e:	08fd      	lsrs	r5, r7, #3
 8002c20:	4215      	tst	r5, r2
 8002c22:	d106      	bne.n	8002c32 <__aeabi_dsub+0x612>
 8002c24:	4663      	mov	r3, ip
 8002c26:	2601      	movs	r6, #1
 8002c28:	002c      	movs	r4, r5
 8002c2a:	08d8      	lsrs	r0, r3, #3
 8002c2c:	077b      	lsls	r3, r7, #29
 8002c2e:	4318      	orrs	r0, r3
 8002c30:	400e      	ands	r6, r1
 8002c32:	0f42      	lsrs	r2, r0, #29
 8002c34:	00c0      	lsls	r0, r0, #3
 8002c36:	08c0      	lsrs	r0, r0, #3
 8002c38:	0752      	lsls	r2, r2, #29
 8002c3a:	4302      	orrs	r2, r0
 8002c3c:	e601      	b.n	8002842 <__aeabi_dsub+0x222>
 8002c3e:	4663      	mov	r3, ip
 8002c40:	1a1d      	subs	r5, r3, r0
 8002c42:	45ac      	cmp	ip, r5
 8002c44:	4192      	sbcs	r2, r2
 8002c46:	9b02      	ldr	r3, [sp, #8]
 8002c48:	4252      	negs	r2, r2
 8002c4a:	1b1c      	subs	r4, r3, r4
 8002c4c:	000e      	movs	r6, r1
 8002c4e:	4688      	mov	r8, r1
 8002c50:	2701      	movs	r7, #1
 8002c52:	1aa4      	subs	r4, r4, r2
 8002c54:	e546      	b.n	80026e4 <__aeabi_dsub+0xc4>
 8002c56:	4663      	mov	r3, ip
 8002c58:	08d9      	lsrs	r1, r3, #3
 8002c5a:	9b02      	ldr	r3, [sp, #8]
 8002c5c:	075a      	lsls	r2, r3, #29
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	08dc      	lsrs	r4, r3, #3
 8002c62:	e5ee      	b.n	8002842 <__aeabi_dsub+0x222>
 8002c64:	4663      	mov	r3, ip
 8002c66:	9c02      	ldr	r4, [sp, #8]
 8002c68:	9303      	str	r3, [sp, #12]
 8002c6a:	e6c7      	b.n	80029fc <__aeabi_dsub+0x3dc>
 8002c6c:	08c0      	lsrs	r0, r0, #3
 8002c6e:	2a00      	cmp	r2, #0
 8002c70:	d100      	bne.n	8002c74 <__aeabi_dsub+0x654>
 8002c72:	e6aa      	b.n	80029ca <__aeabi_dsub+0x3aa>
 8002c74:	0762      	lsls	r2, r4, #29
 8002c76:	4310      	orrs	r0, r2
 8002c78:	2280      	movs	r2, #128	@ 0x80
 8002c7a:	08e4      	lsrs	r4, r4, #3
 8002c7c:	0312      	lsls	r2, r2, #12
 8002c7e:	4214      	tst	r4, r2
 8002c80:	d0d7      	beq.n	8002c32 <__aeabi_dsub+0x612>
 8002c82:	9f02      	ldr	r7, [sp, #8]
 8002c84:	08fd      	lsrs	r5, r7, #3
 8002c86:	4215      	tst	r5, r2
 8002c88:	d1d3      	bne.n	8002c32 <__aeabi_dsub+0x612>
 8002c8a:	4663      	mov	r3, ip
 8002c8c:	2601      	movs	r6, #1
 8002c8e:	08d8      	lsrs	r0, r3, #3
 8002c90:	077b      	lsls	r3, r7, #29
 8002c92:	002c      	movs	r4, r5
 8002c94:	4318      	orrs	r0, r3
 8002c96:	400e      	ands	r6, r1
 8002c98:	e7cb      	b.n	8002c32 <__aeabi_dsub+0x612>
 8002c9a:	000a      	movs	r2, r1
 8002c9c:	0027      	movs	r7, r4
 8002c9e:	3a20      	subs	r2, #32
 8002ca0:	40d7      	lsrs	r7, r2
 8002ca2:	2920      	cmp	r1, #32
 8002ca4:	d005      	beq.n	8002cb2 <__aeabi_dsub+0x692>
 8002ca6:	2240      	movs	r2, #64	@ 0x40
 8002ca8:	1a52      	subs	r2, r2, r1
 8002caa:	4094      	lsls	r4, r2
 8002cac:	0025      	movs	r5, r4
 8002cae:	4305      	orrs	r5, r0
 8002cb0:	9503      	str	r5, [sp, #12]
 8002cb2:	9d03      	ldr	r5, [sp, #12]
 8002cb4:	1e6a      	subs	r2, r5, #1
 8002cb6:	4195      	sbcs	r5, r2
 8002cb8:	432f      	orrs	r7, r5
 8002cba:	e610      	b.n	80028de <__aeabi_dsub+0x2be>
 8002cbc:	0014      	movs	r4, r2
 8002cbe:	2500      	movs	r5, #0
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	e556      	b.n	8002772 <__aeabi_dsub+0x152>
 8002cc4:	9b02      	ldr	r3, [sp, #8]
 8002cc6:	4460      	add	r0, ip
 8002cc8:	4699      	mov	r9, r3
 8002cca:	4560      	cmp	r0, ip
 8002ccc:	4192      	sbcs	r2, r2
 8002cce:	444c      	add	r4, r9
 8002cd0:	4252      	negs	r2, r2
 8002cd2:	0005      	movs	r5, r0
 8002cd4:	18a4      	adds	r4, r4, r2
 8002cd6:	e74c      	b.n	8002b72 <__aeabi_dsub+0x552>
 8002cd8:	001a      	movs	r2, r3
 8002cda:	001c      	movs	r4, r3
 8002cdc:	432a      	orrs	r2, r5
 8002cde:	d000      	beq.n	8002ce2 <__aeabi_dsub+0x6c2>
 8002ce0:	e6b3      	b.n	8002a4a <__aeabi_dsub+0x42a>
 8002ce2:	e6c9      	b.n	8002a78 <__aeabi_dsub+0x458>
 8002ce4:	2480      	movs	r4, #128	@ 0x80
 8002ce6:	2600      	movs	r6, #0
 8002ce8:	0324      	lsls	r4, r4, #12
 8002cea:	e5ae      	b.n	800284a <__aeabi_dsub+0x22a>
 8002cec:	2120      	movs	r1, #32
 8002cee:	2500      	movs	r5, #0
 8002cf0:	1a09      	subs	r1, r1, r0
 8002cf2:	e517      	b.n	8002724 <__aeabi_dsub+0x104>
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2500      	movs	r5, #0
 8002cf8:	4c0b      	ldr	r4, [pc, #44]	@ (8002d28 <__aeabi_dsub+0x708>)
 8002cfa:	e53a      	b.n	8002772 <__aeabi_dsub+0x152>
 8002cfc:	2d00      	cmp	r5, #0
 8002cfe:	d100      	bne.n	8002d02 <__aeabi_dsub+0x6e2>
 8002d00:	e5f6      	b.n	80028f0 <__aeabi_dsub+0x2d0>
 8002d02:	464b      	mov	r3, r9
 8002d04:	1bda      	subs	r2, r3, r7
 8002d06:	4692      	mov	sl, r2
 8002d08:	2f00      	cmp	r7, #0
 8002d0a:	d100      	bne.n	8002d0e <__aeabi_dsub+0x6ee>
 8002d0c:	e66f      	b.n	80029ee <__aeabi_dsub+0x3ce>
 8002d0e:	2a38      	cmp	r2, #56	@ 0x38
 8002d10:	dc05      	bgt.n	8002d1e <__aeabi_dsub+0x6fe>
 8002d12:	2680      	movs	r6, #128	@ 0x80
 8002d14:	0436      	lsls	r6, r6, #16
 8002d16:	4334      	orrs	r4, r6
 8002d18:	4688      	mov	r8, r1
 8002d1a:	000e      	movs	r6, r1
 8002d1c:	e6d1      	b.n	8002ac2 <__aeabi_dsub+0x4a2>
 8002d1e:	4688      	mov	r8, r1
 8002d20:	000e      	movs	r6, r1
 8002d22:	2501      	movs	r5, #1
 8002d24:	e6de      	b.n	8002ae4 <__aeabi_dsub+0x4c4>
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	000007ff 	.word	0x000007ff
 8002d2c:	ff7fffff 	.word	0xff7fffff
 8002d30:	000007fe 	.word	0x000007fe
 8002d34:	2d00      	cmp	r5, #0
 8002d36:	d100      	bne.n	8002d3a <__aeabi_dsub+0x71a>
 8002d38:	e668      	b.n	8002a0c <__aeabi_dsub+0x3ec>
 8002d3a:	464b      	mov	r3, r9
 8002d3c:	1bd9      	subs	r1, r3, r7
 8002d3e:	2f00      	cmp	r7, #0
 8002d40:	d101      	bne.n	8002d46 <__aeabi_dsub+0x726>
 8002d42:	468a      	mov	sl, r1
 8002d44:	e5a7      	b.n	8002896 <__aeabi_dsub+0x276>
 8002d46:	2701      	movs	r7, #1
 8002d48:	2938      	cmp	r1, #56	@ 0x38
 8002d4a:	dd00      	ble.n	8002d4e <__aeabi_dsub+0x72e>
 8002d4c:	e5c7      	b.n	80028de <__aeabi_dsub+0x2be>
 8002d4e:	2280      	movs	r2, #128	@ 0x80
 8002d50:	0412      	lsls	r2, r2, #16
 8002d52:	4314      	orrs	r4, r2
 8002d54:	e5af      	b.n	80028b6 <__aeabi_dsub+0x296>
 8002d56:	46c0      	nop			@ (mov r8, r8)

08002d58 <__aeabi_dcmpun>:
 8002d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d5a:	46c6      	mov	lr, r8
 8002d5c:	031e      	lsls	r6, r3, #12
 8002d5e:	0b36      	lsrs	r6, r6, #12
 8002d60:	46b0      	mov	r8, r6
 8002d62:	4e0d      	ldr	r6, [pc, #52]	@ (8002d98 <__aeabi_dcmpun+0x40>)
 8002d64:	030c      	lsls	r4, r1, #12
 8002d66:	004d      	lsls	r5, r1, #1
 8002d68:	005f      	lsls	r7, r3, #1
 8002d6a:	b500      	push	{lr}
 8002d6c:	0b24      	lsrs	r4, r4, #12
 8002d6e:	0d6d      	lsrs	r5, r5, #21
 8002d70:	0d7f      	lsrs	r7, r7, #21
 8002d72:	42b5      	cmp	r5, r6
 8002d74:	d00b      	beq.n	8002d8e <__aeabi_dcmpun+0x36>
 8002d76:	4908      	ldr	r1, [pc, #32]	@ (8002d98 <__aeabi_dcmpun+0x40>)
 8002d78:	2000      	movs	r0, #0
 8002d7a:	428f      	cmp	r7, r1
 8002d7c:	d104      	bne.n	8002d88 <__aeabi_dcmpun+0x30>
 8002d7e:	4646      	mov	r6, r8
 8002d80:	4316      	orrs	r6, r2
 8002d82:	0030      	movs	r0, r6
 8002d84:	1e43      	subs	r3, r0, #1
 8002d86:	4198      	sbcs	r0, r3
 8002d88:	bc80      	pop	{r7}
 8002d8a:	46b8      	mov	r8, r7
 8002d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d8e:	4304      	orrs	r4, r0
 8002d90:	2001      	movs	r0, #1
 8002d92:	2c00      	cmp	r4, #0
 8002d94:	d1f8      	bne.n	8002d88 <__aeabi_dcmpun+0x30>
 8002d96:	e7ee      	b.n	8002d76 <__aeabi_dcmpun+0x1e>
 8002d98:	000007ff 	.word	0x000007ff

08002d9c <__aeabi_i2d>:
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	d016      	beq.n	8002dd0 <__aeabi_i2d+0x34>
 8002da2:	17c3      	asrs	r3, r0, #31
 8002da4:	18c5      	adds	r5, r0, r3
 8002da6:	405d      	eors	r5, r3
 8002da8:	0fc4      	lsrs	r4, r0, #31
 8002daa:	0028      	movs	r0, r5
 8002dac:	f000 f8f0 	bl	8002f90 <__clzsi2>
 8002db0:	4b10      	ldr	r3, [pc, #64]	@ (8002df4 <__aeabi_i2d+0x58>)
 8002db2:	1a1b      	subs	r3, r3, r0
 8002db4:	055b      	lsls	r3, r3, #21
 8002db6:	0d5b      	lsrs	r3, r3, #21
 8002db8:	280a      	cmp	r0, #10
 8002dba:	dc14      	bgt.n	8002de6 <__aeabi_i2d+0x4a>
 8002dbc:	0002      	movs	r2, r0
 8002dbe:	002e      	movs	r6, r5
 8002dc0:	3215      	adds	r2, #21
 8002dc2:	4096      	lsls	r6, r2
 8002dc4:	220b      	movs	r2, #11
 8002dc6:	1a12      	subs	r2, r2, r0
 8002dc8:	40d5      	lsrs	r5, r2
 8002dca:	032d      	lsls	r5, r5, #12
 8002dcc:	0b2d      	lsrs	r5, r5, #12
 8002dce:	e003      	b.n	8002dd8 <__aeabi_i2d+0x3c>
 8002dd0:	2400      	movs	r4, #0
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	2500      	movs	r5, #0
 8002dd6:	2600      	movs	r6, #0
 8002dd8:	051b      	lsls	r3, r3, #20
 8002dda:	432b      	orrs	r3, r5
 8002ddc:	07e4      	lsls	r4, r4, #31
 8002dde:	4323      	orrs	r3, r4
 8002de0:	0030      	movs	r0, r6
 8002de2:	0019      	movs	r1, r3
 8002de4:	bd70      	pop	{r4, r5, r6, pc}
 8002de6:	380b      	subs	r0, #11
 8002de8:	4085      	lsls	r5, r0
 8002dea:	032d      	lsls	r5, r5, #12
 8002dec:	2600      	movs	r6, #0
 8002dee:	0b2d      	lsrs	r5, r5, #12
 8002df0:	e7f2      	b.n	8002dd8 <__aeabi_i2d+0x3c>
 8002df2:	46c0      	nop			@ (mov r8, r8)
 8002df4:	0000041e 	.word	0x0000041e

08002df8 <__aeabi_f2d>:
 8002df8:	b570      	push	{r4, r5, r6, lr}
 8002dfa:	0242      	lsls	r2, r0, #9
 8002dfc:	0043      	lsls	r3, r0, #1
 8002dfe:	0fc4      	lsrs	r4, r0, #31
 8002e00:	20fe      	movs	r0, #254	@ 0xfe
 8002e02:	0e1b      	lsrs	r3, r3, #24
 8002e04:	1c59      	adds	r1, r3, #1
 8002e06:	0a55      	lsrs	r5, r2, #9
 8002e08:	4208      	tst	r0, r1
 8002e0a:	d00c      	beq.n	8002e26 <__aeabi_f2d+0x2e>
 8002e0c:	21e0      	movs	r1, #224	@ 0xe0
 8002e0e:	0089      	lsls	r1, r1, #2
 8002e10:	468c      	mov	ip, r1
 8002e12:	076d      	lsls	r5, r5, #29
 8002e14:	0b12      	lsrs	r2, r2, #12
 8002e16:	4463      	add	r3, ip
 8002e18:	051b      	lsls	r3, r3, #20
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	07e4      	lsls	r4, r4, #31
 8002e1e:	4323      	orrs	r3, r4
 8002e20:	0028      	movs	r0, r5
 8002e22:	0019      	movs	r1, r3
 8002e24:	bd70      	pop	{r4, r5, r6, pc}
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d114      	bne.n	8002e54 <__aeabi_f2d+0x5c>
 8002e2a:	2d00      	cmp	r5, #0
 8002e2c:	d01b      	beq.n	8002e66 <__aeabi_f2d+0x6e>
 8002e2e:	0028      	movs	r0, r5
 8002e30:	f000 f8ae 	bl	8002f90 <__clzsi2>
 8002e34:	280a      	cmp	r0, #10
 8002e36:	dc1c      	bgt.n	8002e72 <__aeabi_f2d+0x7a>
 8002e38:	230b      	movs	r3, #11
 8002e3a:	002a      	movs	r2, r5
 8002e3c:	1a1b      	subs	r3, r3, r0
 8002e3e:	40da      	lsrs	r2, r3
 8002e40:	0003      	movs	r3, r0
 8002e42:	3315      	adds	r3, #21
 8002e44:	409d      	lsls	r5, r3
 8002e46:	4b0e      	ldr	r3, [pc, #56]	@ (8002e80 <__aeabi_f2d+0x88>)
 8002e48:	0312      	lsls	r2, r2, #12
 8002e4a:	1a1b      	subs	r3, r3, r0
 8002e4c:	055b      	lsls	r3, r3, #21
 8002e4e:	0b12      	lsrs	r2, r2, #12
 8002e50:	0d5b      	lsrs	r3, r3, #21
 8002e52:	e7e1      	b.n	8002e18 <__aeabi_f2d+0x20>
 8002e54:	2d00      	cmp	r5, #0
 8002e56:	d009      	beq.n	8002e6c <__aeabi_f2d+0x74>
 8002e58:	0b13      	lsrs	r3, r2, #12
 8002e5a:	2280      	movs	r2, #128	@ 0x80
 8002e5c:	0312      	lsls	r2, r2, #12
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	076d      	lsls	r5, r5, #29
 8002e62:	4b08      	ldr	r3, [pc, #32]	@ (8002e84 <__aeabi_f2d+0x8c>)
 8002e64:	e7d8      	b.n	8002e18 <__aeabi_f2d+0x20>
 8002e66:	2300      	movs	r3, #0
 8002e68:	2200      	movs	r2, #0
 8002e6a:	e7d5      	b.n	8002e18 <__aeabi_f2d+0x20>
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	4b05      	ldr	r3, [pc, #20]	@ (8002e84 <__aeabi_f2d+0x8c>)
 8002e70:	e7d2      	b.n	8002e18 <__aeabi_f2d+0x20>
 8002e72:	0003      	movs	r3, r0
 8002e74:	002a      	movs	r2, r5
 8002e76:	3b0b      	subs	r3, #11
 8002e78:	409a      	lsls	r2, r3
 8002e7a:	2500      	movs	r5, #0
 8002e7c:	e7e3      	b.n	8002e46 <__aeabi_f2d+0x4e>
 8002e7e:	46c0      	nop			@ (mov r8, r8)
 8002e80:	00000389 	.word	0x00000389
 8002e84:	000007ff 	.word	0x000007ff

08002e88 <__aeabi_d2f>:
 8002e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e8a:	004b      	lsls	r3, r1, #1
 8002e8c:	030f      	lsls	r7, r1, #12
 8002e8e:	0d5b      	lsrs	r3, r3, #21
 8002e90:	4c3b      	ldr	r4, [pc, #236]	@ (8002f80 <__aeabi_d2f+0xf8>)
 8002e92:	0f45      	lsrs	r5, r0, #29
 8002e94:	b083      	sub	sp, #12
 8002e96:	0a7f      	lsrs	r7, r7, #9
 8002e98:	1c5e      	adds	r6, r3, #1
 8002e9a:	432f      	orrs	r7, r5
 8002e9c:	9000      	str	r0, [sp, #0]
 8002e9e:	9101      	str	r1, [sp, #4]
 8002ea0:	0fca      	lsrs	r2, r1, #31
 8002ea2:	00c5      	lsls	r5, r0, #3
 8002ea4:	4226      	tst	r6, r4
 8002ea6:	d00b      	beq.n	8002ec0 <__aeabi_d2f+0x38>
 8002ea8:	4936      	ldr	r1, [pc, #216]	@ (8002f84 <__aeabi_d2f+0xfc>)
 8002eaa:	185c      	adds	r4, r3, r1
 8002eac:	2cfe      	cmp	r4, #254	@ 0xfe
 8002eae:	dd13      	ble.n	8002ed8 <__aeabi_d2f+0x50>
 8002eb0:	20ff      	movs	r0, #255	@ 0xff
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	05c0      	lsls	r0, r0, #23
 8002eb6:	4318      	orrs	r0, r3
 8002eb8:	07d2      	lsls	r2, r2, #31
 8002eba:	4310      	orrs	r0, r2
 8002ebc:	b003      	add	sp, #12
 8002ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d102      	bne.n	8002eca <__aeabi_d2f+0x42>
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	e7f4      	b.n	8002eb4 <__aeabi_d2f+0x2c>
 8002eca:	433d      	orrs	r5, r7
 8002ecc:	d0f0      	beq.n	8002eb0 <__aeabi_d2f+0x28>
 8002ece:	2380      	movs	r3, #128	@ 0x80
 8002ed0:	03db      	lsls	r3, r3, #15
 8002ed2:	20ff      	movs	r0, #255	@ 0xff
 8002ed4:	433b      	orrs	r3, r7
 8002ed6:	e7ed      	b.n	8002eb4 <__aeabi_d2f+0x2c>
 8002ed8:	2c00      	cmp	r4, #0
 8002eda:	dd14      	ble.n	8002f06 <__aeabi_d2f+0x7e>
 8002edc:	9b00      	ldr	r3, [sp, #0]
 8002ede:	00ff      	lsls	r7, r7, #3
 8002ee0:	019b      	lsls	r3, r3, #6
 8002ee2:	1e58      	subs	r0, r3, #1
 8002ee4:	4183      	sbcs	r3, r0
 8002ee6:	0f69      	lsrs	r1, r5, #29
 8002ee8:	433b      	orrs	r3, r7
 8002eea:	430b      	orrs	r3, r1
 8002eec:	0759      	lsls	r1, r3, #29
 8002eee:	d041      	beq.n	8002f74 <__aeabi_d2f+0xec>
 8002ef0:	210f      	movs	r1, #15
 8002ef2:	4019      	ands	r1, r3
 8002ef4:	2904      	cmp	r1, #4
 8002ef6:	d028      	beq.n	8002f4a <__aeabi_d2f+0xc2>
 8002ef8:	3304      	adds	r3, #4
 8002efa:	0159      	lsls	r1, r3, #5
 8002efc:	d525      	bpl.n	8002f4a <__aeabi_d2f+0xc2>
 8002efe:	3401      	adds	r4, #1
 8002f00:	2300      	movs	r3, #0
 8002f02:	b2e0      	uxtb	r0, r4
 8002f04:	e7d6      	b.n	8002eb4 <__aeabi_d2f+0x2c>
 8002f06:	0021      	movs	r1, r4
 8002f08:	3117      	adds	r1, #23
 8002f0a:	dbdb      	blt.n	8002ec4 <__aeabi_d2f+0x3c>
 8002f0c:	2180      	movs	r1, #128	@ 0x80
 8002f0e:	201e      	movs	r0, #30
 8002f10:	0409      	lsls	r1, r1, #16
 8002f12:	4339      	orrs	r1, r7
 8002f14:	1b00      	subs	r0, r0, r4
 8002f16:	281f      	cmp	r0, #31
 8002f18:	dd1b      	ble.n	8002f52 <__aeabi_d2f+0xca>
 8002f1a:	2602      	movs	r6, #2
 8002f1c:	4276      	negs	r6, r6
 8002f1e:	1b34      	subs	r4, r6, r4
 8002f20:	000e      	movs	r6, r1
 8002f22:	40e6      	lsrs	r6, r4
 8002f24:	0034      	movs	r4, r6
 8002f26:	2820      	cmp	r0, #32
 8002f28:	d004      	beq.n	8002f34 <__aeabi_d2f+0xac>
 8002f2a:	4817      	ldr	r0, [pc, #92]	@ (8002f88 <__aeabi_d2f+0x100>)
 8002f2c:	4684      	mov	ip, r0
 8002f2e:	4463      	add	r3, ip
 8002f30:	4099      	lsls	r1, r3
 8002f32:	430d      	orrs	r5, r1
 8002f34:	002b      	movs	r3, r5
 8002f36:	1e59      	subs	r1, r3, #1
 8002f38:	418b      	sbcs	r3, r1
 8002f3a:	4323      	orrs	r3, r4
 8002f3c:	0759      	lsls	r1, r3, #29
 8002f3e:	d015      	beq.n	8002f6c <__aeabi_d2f+0xe4>
 8002f40:	210f      	movs	r1, #15
 8002f42:	2400      	movs	r4, #0
 8002f44:	4019      	ands	r1, r3
 8002f46:	2904      	cmp	r1, #4
 8002f48:	d117      	bne.n	8002f7a <__aeabi_d2f+0xf2>
 8002f4a:	019b      	lsls	r3, r3, #6
 8002f4c:	0a5b      	lsrs	r3, r3, #9
 8002f4e:	b2e0      	uxtb	r0, r4
 8002f50:	e7b0      	b.n	8002eb4 <__aeabi_d2f+0x2c>
 8002f52:	4c0e      	ldr	r4, [pc, #56]	@ (8002f8c <__aeabi_d2f+0x104>)
 8002f54:	191c      	adds	r4, r3, r4
 8002f56:	002b      	movs	r3, r5
 8002f58:	40a5      	lsls	r5, r4
 8002f5a:	40c3      	lsrs	r3, r0
 8002f5c:	40a1      	lsls	r1, r4
 8002f5e:	1e68      	subs	r0, r5, #1
 8002f60:	4185      	sbcs	r5, r0
 8002f62:	4329      	orrs	r1, r5
 8002f64:	430b      	orrs	r3, r1
 8002f66:	2400      	movs	r4, #0
 8002f68:	0759      	lsls	r1, r3, #29
 8002f6a:	d1c1      	bne.n	8002ef0 <__aeabi_d2f+0x68>
 8002f6c:	019b      	lsls	r3, r3, #6
 8002f6e:	2000      	movs	r0, #0
 8002f70:	0a5b      	lsrs	r3, r3, #9
 8002f72:	e79f      	b.n	8002eb4 <__aeabi_d2f+0x2c>
 8002f74:	08db      	lsrs	r3, r3, #3
 8002f76:	b2e0      	uxtb	r0, r4
 8002f78:	e79c      	b.n	8002eb4 <__aeabi_d2f+0x2c>
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	e7e5      	b.n	8002f4a <__aeabi_d2f+0xc2>
 8002f7e:	46c0      	nop			@ (mov r8, r8)
 8002f80:	000007fe 	.word	0x000007fe
 8002f84:	fffffc80 	.word	0xfffffc80
 8002f88:	fffffca2 	.word	0xfffffca2
 8002f8c:	fffffc82 	.word	0xfffffc82

08002f90 <__clzsi2>:
 8002f90:	211c      	movs	r1, #28
 8002f92:	2301      	movs	r3, #1
 8002f94:	041b      	lsls	r3, r3, #16
 8002f96:	4298      	cmp	r0, r3
 8002f98:	d301      	bcc.n	8002f9e <__clzsi2+0xe>
 8002f9a:	0c00      	lsrs	r0, r0, #16
 8002f9c:	3910      	subs	r1, #16
 8002f9e:	0a1b      	lsrs	r3, r3, #8
 8002fa0:	4298      	cmp	r0, r3
 8002fa2:	d301      	bcc.n	8002fa8 <__clzsi2+0x18>
 8002fa4:	0a00      	lsrs	r0, r0, #8
 8002fa6:	3908      	subs	r1, #8
 8002fa8:	091b      	lsrs	r3, r3, #4
 8002faa:	4298      	cmp	r0, r3
 8002fac:	d301      	bcc.n	8002fb2 <__clzsi2+0x22>
 8002fae:	0900      	lsrs	r0, r0, #4
 8002fb0:	3904      	subs	r1, #4
 8002fb2:	a202      	add	r2, pc, #8	@ (adr r2, 8002fbc <__clzsi2+0x2c>)
 8002fb4:	5c10      	ldrb	r0, [r2, r0]
 8002fb6:	1840      	adds	r0, r0, r1
 8002fb8:	4770      	bx	lr
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	02020304 	.word	0x02020304
 8002fc0:	01010101 	.word	0x01010101
	...

08002fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fcc:	b5b0      	push	{r4, r5, r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fd0:	f000 fd47 	bl	8003a62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fd4:	f000 f9b0 	bl	8003338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fd8:	f000 fb58 	bl	800368c <MX_GPIO_Init>
  MX_DMA_Init();
 8002fdc:	f000 fb38 	bl	8003650 <MX_DMA_Init>
  MX_ADC1_Init();
 8002fe0:	f000 f9ee 	bl	80033c0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002fe4:	f000 fa54 	bl	8003490 <MX_TIM3_Init>
  MX_TIM16_Init();
 8002fe8:	f000 faaa 	bl	8003540 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8002fec:	4bb1      	ldr	r3, [pc, #708]	@ (80032b4 <main+0x2e8>)
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f001 febc 	bl	8004d6c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, &adc, 1);
 8002ff4:	49b0      	ldr	r1, [pc, #704]	@ (80032b8 <main+0x2ec>)
 8002ff6:	4baf      	ldr	r3, [pc, #700]	@ (80032b4 <main+0x2e8>)
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f001 f8dc 	bl	80041b8 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8003000:	4bae      	ldr	r3, [pc, #696]	@ (80032bc <main+0x2f0>)
 8003002:	0018      	movs	r0, r3
 8003004:	f003 f940 	bl	8006288 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8003008:	4bad      	ldr	r3, [pc, #692]	@ (80032c0 <main+0x2f4>)
 800300a:	2100      	movs	r1, #0
 800300c:	0018      	movs	r0, r3
 800300e:	f003 f9e1 	bl	80063d4 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      if(HAL_GPIO_ReadPin(BOTAO_GPIO_Port, BOTAO_Pin)==0){ //leitura botao
 8003012:	2380      	movs	r3, #128	@ 0x80
 8003014:	005a      	lsls	r2, r3, #1
 8003016:	23a0      	movs	r3, #160	@ 0xa0
 8003018:	05db      	lsls	r3, r3, #23
 800301a:	0011      	movs	r1, r2
 800301c:	0018      	movs	r0, r3
 800301e:	f002 fc5b 	bl	80058d8 <HAL_GPIO_ReadPin>
 8003022:	1e03      	subs	r3, r0, #0
 8003024:	d107      	bne.n	8003036 <main+0x6a>
          HAL_GPIO_TogglePin(GPIOB, LED1_Pin); //alterna estado pinos
 8003026:	4ba7      	ldr	r3, [pc, #668]	@ (80032c4 <main+0x2f8>)
 8003028:	2140      	movs	r1, #64	@ 0x40
 800302a:	0018      	movs	r0, r3
 800302c:	f002 fc8e 	bl	800594c <HAL_GPIO_TogglePin>
          HAL_Delay(20); //20ms
 8003030:	2014      	movs	r0, #20
 8003032:	f000 fd93 	bl	8003b5c <HAL_Delay>
      }
      //
      j = 4095/(float)adc;
 8003036:	4ba0      	ldr	r3, [pc, #640]	@ (80032b8 <main+0x2ec>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	0018      	movs	r0, r3
 800303c:	f7fe f83e 	bl	80010bc <__aeabi_ui2f>
 8003040:	1c03      	adds	r3, r0, #0
 8003042:	1c19      	adds	r1, r3, #0
 8003044:	48a0      	ldr	r0, [pc, #640]	@ (80032c8 <main+0x2fc>)
 8003046:	f7fd fb05 	bl	8000654 <__aeabi_fdiv>
 800304a:	1c03      	adds	r3, r0, #0
 800304c:	1c1a      	adds	r2, r3, #0
 800304e:	4b9f      	ldr	r3, [pc, #636]	@ (80032cc <main+0x300>)
 8003050:	601a      	str	r2, [r3, #0]
      R2 = R1 * (j - 1.0);
 8003052:	4b9f      	ldr	r3, [pc, #636]	@ (80032d0 <main+0x304>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	1c18      	adds	r0, r3, #0
 8003058:	f7ff fece 	bl	8002df8 <__aeabi_f2d>
 800305c:	0004      	movs	r4, r0
 800305e:	000d      	movs	r5, r1
 8003060:	4b9a      	ldr	r3, [pc, #616]	@ (80032cc <main+0x300>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	1c18      	adds	r0, r3, #0
 8003066:	f7ff fec7 	bl	8002df8 <__aeabi_f2d>
 800306a:	2200      	movs	r2, #0
 800306c:	4b99      	ldr	r3, [pc, #612]	@ (80032d4 <main+0x308>)
 800306e:	f7ff fad7 	bl	8002620 <__aeabi_dsub>
 8003072:	0002      	movs	r2, r0
 8003074:	000b      	movs	r3, r1
 8003076:	0020      	movs	r0, r4
 8003078:	0029      	movs	r1, r5
 800307a:	f7ff f809 	bl	8002090 <__aeabi_dmul>
 800307e:	0002      	movs	r2, r0
 8003080:	000b      	movs	r3, r1
 8003082:	0010      	movs	r0, r2
 8003084:	0019      	movs	r1, r3
 8003086:	f7ff feff 	bl	8002e88 <__aeabi_d2f>
 800308a:	1c02      	adds	r2, r0, #0
 800308c:	4b92      	ldr	r3, [pc, #584]	@ (80032d8 <main+0x30c>)
 800308e:	601a      	str	r2, [r3, #0]
      logR2 = log(R2);
 8003090:	4b91      	ldr	r3, [pc, #580]	@ (80032d8 <main+0x30c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	1c18      	adds	r0, r3, #0
 8003096:	f7ff feaf 	bl	8002df8 <__aeabi_f2d>
 800309a:	0002      	movs	r2, r0
 800309c:	000b      	movs	r3, r1
 800309e:	0010      	movs	r0, r2
 80030a0:	0019      	movs	r1, r3
 80030a2:	f004 f94b 	bl	800733c <log>
 80030a6:	0002      	movs	r2, r0
 80030a8:	000b      	movs	r3, r1
 80030aa:	0010      	movs	r0, r2
 80030ac:	0019      	movs	r1, r3
 80030ae:	f7ff feeb 	bl	8002e88 <__aeabi_d2f>
 80030b2:	1c02      	adds	r2, r0, #0
 80030b4:	4b89      	ldr	r3, [pc, #548]	@ (80032dc <main+0x310>)
 80030b6:	601a      	str	r2, [r3, #0]
      temperature = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2));
 80030b8:	4b89      	ldr	r3, [pc, #548]	@ (80032e0 <main+0x314>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b87      	ldr	r3, [pc, #540]	@ (80032dc <main+0x310>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	1c19      	adds	r1, r3, #0
 80030c2:	1c10      	adds	r0, r2, #0
 80030c4:	f7fd fcac 	bl	8000a20 <__aeabi_fmul>
 80030c8:	1c03      	adds	r3, r0, #0
 80030ca:	1c1a      	adds	r2, r3, #0
 80030cc:	4b85      	ldr	r3, [pc, #532]	@ (80032e4 <main+0x318>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	1c19      	adds	r1, r3, #0
 80030d2:	1c10      	adds	r0, r2, #0
 80030d4:	f7fd f934 	bl	8000340 <__aeabi_fadd>
 80030d8:	1c03      	adds	r3, r0, #0
 80030da:	1c1c      	adds	r4, r3, #0
 80030dc:	4b82      	ldr	r3, [pc, #520]	@ (80032e8 <main+0x31c>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4b7e      	ldr	r3, [pc, #504]	@ (80032dc <main+0x310>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	1c19      	adds	r1, r3, #0
 80030e6:	1c10      	adds	r0, r2, #0
 80030e8:	f7fd fc9a 	bl	8000a20 <__aeabi_fmul>
 80030ec:	1c03      	adds	r3, r0, #0
 80030ee:	1c1a      	adds	r2, r3, #0
 80030f0:	4b7a      	ldr	r3, [pc, #488]	@ (80032dc <main+0x310>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	1c19      	adds	r1, r3, #0
 80030f6:	1c10      	adds	r0, r2, #0
 80030f8:	f7fd fc92 	bl	8000a20 <__aeabi_fmul>
 80030fc:	1c03      	adds	r3, r0, #0
 80030fe:	1c1a      	adds	r2, r3, #0
 8003100:	4b76      	ldr	r3, [pc, #472]	@ (80032dc <main+0x310>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	1c19      	adds	r1, r3, #0
 8003106:	1c10      	adds	r0, r2, #0
 8003108:	f7fd fc8a 	bl	8000a20 <__aeabi_fmul>
 800310c:	1c03      	adds	r3, r0, #0
 800310e:	1c19      	adds	r1, r3, #0
 8003110:	1c20      	adds	r0, r4, #0
 8003112:	f7fd f915 	bl	8000340 <__aeabi_fadd>
 8003116:	1c03      	adds	r3, r0, #0
 8003118:	1c19      	adds	r1, r3, #0
 800311a:	20fe      	movs	r0, #254	@ 0xfe
 800311c:	0580      	lsls	r0, r0, #22
 800311e:	f7fd fa99 	bl	8000654 <__aeabi_fdiv>
 8003122:	1c03      	adds	r3, r0, #0
 8003124:	1c1a      	adds	r2, r3, #0
 8003126:	4b71      	ldr	r3, [pc, #452]	@ (80032ec <main+0x320>)
 8003128:	601a      	str	r2, [r3, #0]
      temperature = temperature - 273.15;
 800312a:	4b70      	ldr	r3, [pc, #448]	@ (80032ec <main+0x320>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	1c18      	adds	r0, r3, #0
 8003130:	f7ff fe62 	bl	8002df8 <__aeabi_f2d>
 8003134:	4a6e      	ldr	r2, [pc, #440]	@ (80032f0 <main+0x324>)
 8003136:	4b6f      	ldr	r3, [pc, #444]	@ (80032f4 <main+0x328>)
 8003138:	f7ff fa72 	bl	8002620 <__aeabi_dsub>
 800313c:	0002      	movs	r2, r0
 800313e:	000b      	movs	r3, r1
 8003140:	0010      	movs	r0, r2
 8003142:	0019      	movs	r1, r3
 8003144:	f7ff fea0 	bl	8002e88 <__aeabi_d2f>
 8003148:	1c02      	adds	r2, r0, #0
 800314a:	4b68      	ldr	r3, [pc, #416]	@ (80032ec <main+0x320>)
 800314c:	601a      	str	r2, [r3, #0]
      //temperature = (T * 9.0)/ 5.0 + 32.0;
	  Erro = SetPoint - temperature;
 800314e:	4b6a      	ldr	r3, [pc, #424]	@ (80032f8 <main+0x32c>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4b66      	ldr	r3, [pc, #408]	@ (80032ec <main+0x320>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	1c19      	adds	r1, r3, #0
 8003158:	1c10      	adds	r0, r2, #0
 800315a:	f7fd fd9f 	bl	8000c9c <__aeabi_fsub>
 800315e:	1c03      	adds	r3, r0, #0
 8003160:	1c1a      	adds	r2, r3, #0
 8003162:	4b66      	ldr	r3, [pc, #408]	@ (80032fc <main+0x330>)
 8003164:	601a      	str	r2, [r3, #0]


	  P = Erro * Kp;
 8003166:	4b65      	ldr	r3, [pc, #404]	@ (80032fc <main+0x330>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4b65      	ldr	r3, [pc, #404]	@ (8003300 <main+0x334>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	1c19      	adds	r1, r3, #0
 8003170:	1c10      	adds	r0, r2, #0
 8003172:	f7fd fc55 	bl	8000a20 <__aeabi_fmul>
 8003176:	1c03      	adds	r3, r0, #0
 8003178:	1c1a      	adds	r2, r3, #0
 800317a:	4b62      	ldr	r3, [pc, #392]	@ (8003304 <main+0x338>)
 800317c:	601a      	str	r2, [r3, #0]

	  I = (Ki * (Erro + Erro_Anterior))*(t);
 800317e:	4b5f      	ldr	r3, [pc, #380]	@ (80032fc <main+0x330>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	4b61      	ldr	r3, [pc, #388]	@ (8003308 <main+0x33c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	1c19      	adds	r1, r3, #0
 8003188:	1c10      	adds	r0, r2, #0
 800318a:	f7fd f8d9 	bl	8000340 <__aeabi_fadd>
 800318e:	1c03      	adds	r3, r0, #0
 8003190:	1c1a      	adds	r2, r3, #0
 8003192:	4b5e      	ldr	r3, [pc, #376]	@ (800330c <main+0x340>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	1c19      	adds	r1, r3, #0
 8003198:	1c10      	adds	r0, r2, #0
 800319a:	f7fd fc41 	bl	8000a20 <__aeabi_fmul>
 800319e:	1c03      	adds	r3, r0, #0
 80031a0:	1c1c      	adds	r4, r3, #0
 80031a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003310 <main+0x344>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	0018      	movs	r0, r3
 80031a8:	f7fd ff3c 	bl	8001024 <__aeabi_i2f>
 80031ac:	1c03      	adds	r3, r0, #0
 80031ae:	1c19      	adds	r1, r3, #0
 80031b0:	1c20      	adds	r0, r4, #0
 80031b2:	f7fd fc35 	bl	8000a20 <__aeabi_fmul>
 80031b6:	1c03      	adds	r3, r0, #0
 80031b8:	1c1a      	adds	r2, r3, #0
 80031ba:	4b56      	ldr	r3, [pc, #344]	@ (8003314 <main+0x348>)
 80031bc:	601a      	str	r2, [r3, #0]

	  D = (Kd * (Temp_Anterior - temperature))*(t);
 80031be:	4b56      	ldr	r3, [pc, #344]	@ (8003318 <main+0x34c>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4b4a      	ldr	r3, [pc, #296]	@ (80032ec <main+0x320>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	1c19      	adds	r1, r3, #0
 80031c8:	1c10      	adds	r0, r2, #0
 80031ca:	f7fd fd67 	bl	8000c9c <__aeabi_fsub>
 80031ce:	1c03      	adds	r3, r0, #0
 80031d0:	1c1a      	adds	r2, r3, #0
 80031d2:	4b52      	ldr	r3, [pc, #328]	@ (800331c <main+0x350>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	1c19      	adds	r1, r3, #0
 80031d8:	1c10      	adds	r0, r2, #0
 80031da:	f7fd fc21 	bl	8000a20 <__aeabi_fmul>
 80031de:	1c03      	adds	r3, r0, #0
 80031e0:	1c1c      	adds	r4, r3, #0
 80031e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003310 <main+0x344>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	0018      	movs	r0, r3
 80031e8:	f7fd ff1c 	bl	8001024 <__aeabi_i2f>
 80031ec:	1c03      	adds	r3, r0, #0
 80031ee:	1c19      	adds	r1, r3, #0
 80031f0:	1c20      	adds	r0, r4, #0
 80031f2:	f7fd fc15 	bl	8000a20 <__aeabi_fmul>
 80031f6:	1c03      	adds	r3, r0, #0
 80031f8:	1c1a      	adds	r2, r3, #0
 80031fa:	4b49      	ldr	r3, [pc, #292]	@ (8003320 <main+0x354>)
 80031fc:	601a      	str	r2, [r3, #0]

	  Saida = ((P+I+D)*u_gain) + Saida_Anterior;
 80031fe:	4b41      	ldr	r3, [pc, #260]	@ (8003304 <main+0x338>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4b44      	ldr	r3, [pc, #272]	@ (8003314 <main+0x348>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	1c19      	adds	r1, r3, #0
 8003208:	1c10      	adds	r0, r2, #0
 800320a:	f7fd f899 	bl	8000340 <__aeabi_fadd>
 800320e:	1c03      	adds	r3, r0, #0
 8003210:	1c1a      	adds	r2, r3, #0
 8003212:	4b43      	ldr	r3, [pc, #268]	@ (8003320 <main+0x354>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	1c19      	adds	r1, r3, #0
 8003218:	1c10      	adds	r0, r2, #0
 800321a:	f7fd f891 	bl	8000340 <__aeabi_fadd>
 800321e:	1c03      	adds	r3, r0, #0
 8003220:	1c1a      	adds	r2, r3, #0
 8003222:	4b40      	ldr	r3, [pc, #256]	@ (8003324 <main+0x358>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	1c19      	adds	r1, r3, #0
 8003228:	1c10      	adds	r0, r2, #0
 800322a:	f7fd fbf9 	bl	8000a20 <__aeabi_fmul>
 800322e:	1c03      	adds	r3, r0, #0
 8003230:	1c1a      	adds	r2, r3, #0
 8003232:	4b3d      	ldr	r3, [pc, #244]	@ (8003328 <main+0x35c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	1c19      	adds	r1, r3, #0
 8003238:	1c10      	adds	r0, r2, #0
 800323a:	f7fd f881 	bl	8000340 <__aeabi_fadd>
 800323e:	1c03      	adds	r3, r0, #0
 8003240:	1c1a      	adds	r2, r3, #0
 8003242:	4b3a      	ldr	r3, [pc, #232]	@ (800332c <main+0x360>)
 8003244:	601a      	str	r2, [r3, #0]

	  //Saida = 1000 - Saida;

	  if(Saida<0)
 8003246:	4b39      	ldr	r3, [pc, #228]	@ (800332c <main+0x360>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2100      	movs	r1, #0
 800324c:	1c18      	adds	r0, r3, #0
 800324e:	f7fd f837 	bl	80002c0 <__aeabi_fcmplt>
 8003252:	1e03      	subs	r3, r0, #0
 8003254:	d006      	beq.n	8003264 <main+0x298>
	  {
		  Saida = 0;
 8003256:	4b35      	ldr	r3, [pc, #212]	@ (800332c <main+0x360>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
		  Erro = 0;
 800325c:	4b27      	ldr	r3, [pc, #156]	@ (80032fc <main+0x330>)
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	e00d      	b.n	8003280 <main+0x2b4>
	  }
	  else if(Saida>999)
 8003264:	4b31      	ldr	r3, [pc, #196]	@ (800332c <main+0x360>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4931      	ldr	r1, [pc, #196]	@ (8003330 <main+0x364>)
 800326a:	1c18      	adds	r0, r3, #0
 800326c:	f7fd f83c 	bl	80002e8 <__aeabi_fcmpgt>
 8003270:	1e03      	subs	r3, r0, #0
 8003272:	d005      	beq.n	8003280 <main+0x2b4>
	  {
		  Saida = 999;
 8003274:	4b2d      	ldr	r3, [pc, #180]	@ (800332c <main+0x360>)
 8003276:	4a2e      	ldr	r2, [pc, #184]	@ (8003330 <main+0x364>)
 8003278:	601a      	str	r2, [r3, #0]
		  Erro = 0;
 800327a:	4b20      	ldr	r3, [pc, #128]	@ (80032fc <main+0x330>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
	  }

	  TIM16->CCR1 = (uint32_t)Saida;
 8003280:	4b2a      	ldr	r3, [pc, #168]	@ (800332c <main+0x360>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4c2b      	ldr	r4, [pc, #172]	@ (8003334 <main+0x368>)
 8003286:	1c18      	adds	r0, r3, #0
 8003288:	f7fd f842 	bl	8000310 <__aeabi_f2uiz>
 800328c:	0003      	movs	r3, r0
 800328e:	6363      	str	r3, [r4, #52]	@ 0x34

	  Erro_Anterior = Erro;
 8003290:	4b1a      	ldr	r3, [pc, #104]	@ (80032fc <main+0x330>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	4b1c      	ldr	r3, [pc, #112]	@ (8003308 <main+0x33c>)
 8003296:	601a      	str	r2, [r3, #0]
	  Saida_Anterior = Saida;
 8003298:	4b24      	ldr	r3, [pc, #144]	@ (800332c <main+0x360>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b22      	ldr	r3, [pc, #136]	@ (8003328 <main+0x35c>)
 800329e:	601a      	str	r2, [r3, #0]
	  Temp_Anterior = temperature;
 80032a0:	4b12      	ldr	r3, [pc, #72]	@ (80032ec <main+0x320>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003318 <main+0x34c>)
 80032a6:	601a      	str	r2, [r3, #0]

	  HAL_Delay(t);
 80032a8:	4b19      	ldr	r3, [pc, #100]	@ (8003310 <main+0x344>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	0018      	movs	r0, r3
 80032ae:	f000 fc55 	bl	8003b5c <HAL_Delay>
      if(HAL_GPIO_ReadPin(BOTAO_GPIO_Port, BOTAO_Pin)==0){ //leitura botao
 80032b2:	e6ae      	b.n	8003012 <main+0x46>
 80032b4:	200000a0 	.word	0x200000a0
 80032b8:	200001f8 	.word	0x200001f8
 80032bc:	20000160 	.word	0x20000160
 80032c0:	200001ac 	.word	0x200001ac
 80032c4:	50000400 	.word	0x50000400
 80032c8:	457ff000 	.word	0x457ff000
 80032cc:	20000208 	.word	0x20000208
 80032d0:	20000000 	.word	0x20000000
 80032d4:	3ff00000 	.word	0x3ff00000
 80032d8:	20000204 	.word	0x20000204
 80032dc:	20000200 	.word	0x20000200
 80032e0:	20000008 	.word	0x20000008
 80032e4:	20000004 	.word	0x20000004
 80032e8:	2000000c 	.word	0x2000000c
 80032ec:	200001fc 	.word	0x200001fc
 80032f0:	66666666 	.word	0x66666666
 80032f4:	40711266 	.word	0x40711266
 80032f8:	2000001c 	.word	0x2000001c
 80032fc:	20000210 	.word	0x20000210
 8003300:	20000010 	.word	0x20000010
 8003304:	20000214 	.word	0x20000214
 8003308:	2000020c 	.word	0x2000020c
 800330c:	20000014 	.word	0x20000014
 8003310:	20000024 	.word	0x20000024
 8003314:	20000218 	.word	0x20000218
 8003318:	20000228 	.word	0x20000228
 800331c:	20000018 	.word	0x20000018
 8003320:	2000021c 	.word	0x2000021c
 8003324:	20000020 	.word	0x20000020
 8003328:	20000224 	.word	0x20000224
 800332c:	20000220 	.word	0x20000220
 8003330:	4479c000 	.word	0x4479c000
 8003334:	40014400 	.word	0x40014400

08003338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003338:	b590      	push	{r4, r7, lr}
 800333a:	b08d      	sub	sp, #52	@ 0x34
 800333c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800333e:	2414      	movs	r4, #20
 8003340:	193b      	adds	r3, r7, r4
 8003342:	0018      	movs	r0, r3
 8003344:	231c      	movs	r3, #28
 8003346:	001a      	movs	r2, r3
 8003348:	2100      	movs	r1, #0
 800334a:	f003 ffc5 	bl	80072d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800334e:	003b      	movs	r3, r7
 8003350:	0018      	movs	r0, r3
 8003352:	2314      	movs	r3, #20
 8003354:	001a      	movs	r2, r3
 8003356:	2100      	movs	r1, #0
 8003358:	f003 ffbe 	bl	80072d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800335c:	193b      	adds	r3, r7, r4
 800335e:	2202      	movs	r2, #2
 8003360:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003362:	193b      	adds	r3, r7, r4
 8003364:	2280      	movs	r2, #128	@ 0x80
 8003366:	0052      	lsls	r2, r2, #1
 8003368:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 800336a:	193b      	adds	r3, r7, r4
 800336c:	2280      	movs	r2, #128	@ 0x80
 800336e:	0152      	lsls	r2, r2, #5
 8003370:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003372:	193b      	adds	r3, r7, r4
 8003374:	2240      	movs	r2, #64	@ 0x40
 8003376:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003378:	193b      	adds	r3, r7, r4
 800337a:	0018      	movs	r0, r3
 800337c:	f002 fb02 	bl	8005984 <HAL_RCC_OscConfig>
 8003380:	1e03      	subs	r3, r0, #0
 8003382:	d001      	beq.n	8003388 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8003384:	f000 f9d8 	bl	8003738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003388:	003b      	movs	r3, r7
 800338a:	2207      	movs	r2, #7
 800338c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800338e:	003b      	movs	r3, r7
 8003390:	2200      	movs	r2, #0
 8003392:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003394:	003b      	movs	r3, r7
 8003396:	2200      	movs	r2, #0
 8003398:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800339a:	003b      	movs	r3, r7
 800339c:	2200      	movs	r2, #0
 800339e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80033a0:	003b      	movs	r3, r7
 80033a2:	2200      	movs	r2, #0
 80033a4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80033a6:	003b      	movs	r3, r7
 80033a8:	2100      	movs	r1, #0
 80033aa:	0018      	movs	r0, r3
 80033ac:	f002 fcce 	bl	8005d4c <HAL_RCC_ClockConfig>
 80033b0:	1e03      	subs	r3, r0, #0
 80033b2:	d001      	beq.n	80033b8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80033b4:	f000 f9c0 	bl	8003738 <Error_Handler>
  }
}
 80033b8:	46c0      	nop			@ (mov r8, r8)
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b00d      	add	sp, #52	@ 0x34
 80033be:	bd90      	pop	{r4, r7, pc}

080033c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80033c6:	1d3b      	adds	r3, r7, #4
 80033c8:	0018      	movs	r0, r3
 80033ca:	230c      	movs	r3, #12
 80033cc:	001a      	movs	r2, r3
 80033ce:	2100      	movs	r1, #0
 80033d0:	f003 ff82 	bl	80072d8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80033d4:	4b2c      	ldr	r3, [pc, #176]	@ (8003488 <MX_ADC1_Init+0xc8>)
 80033d6:	4a2d      	ldr	r2, [pc, #180]	@ (800348c <MX_ADC1_Init+0xcc>)
 80033d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80033da:	4b2b      	ldr	r3, [pc, #172]	@ (8003488 <MX_ADC1_Init+0xc8>)
 80033dc:	22c0      	movs	r2, #192	@ 0xc0
 80033de:	0612      	lsls	r2, r2, #24
 80033e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80033e2:	4b29      	ldr	r3, [pc, #164]	@ (8003488 <MX_ADC1_Init+0xc8>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033e8:	4b27      	ldr	r3, [pc, #156]	@ (8003488 <MX_ADC1_Init+0xc8>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 80033ee:	4b26      	ldr	r3, [pc, #152]	@ (8003488 <MX_ADC1_Init+0xc8>)
 80033f0:	2280      	movs	r2, #128	@ 0x80
 80033f2:	0612      	lsls	r2, r2, #24
 80033f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033f6:	4b24      	ldr	r3, [pc, #144]	@ (8003488 <MX_ADC1_Init+0xc8>)
 80033f8:	2204      	movs	r2, #4
 80033fa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80033fc:	4b22      	ldr	r3, [pc, #136]	@ (8003488 <MX_ADC1_Init+0xc8>)
 80033fe:	2200      	movs	r2, #0
 8003400:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003402:	4b21      	ldr	r3, [pc, #132]	@ (8003488 <MX_ADC1_Init+0xc8>)
 8003404:	2200      	movs	r2, #0
 8003406:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003408:	4b1f      	ldr	r3, [pc, #124]	@ (8003488 <MX_ADC1_Init+0xc8>)
 800340a:	2200      	movs	r2, #0
 800340c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800340e:	4b1e      	ldr	r3, [pc, #120]	@ (8003488 <MX_ADC1_Init+0xc8>)
 8003410:	2201      	movs	r2, #1
 8003412:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003414:	4b1c      	ldr	r3, [pc, #112]	@ (8003488 <MX_ADC1_Init+0xc8>)
 8003416:	2220      	movs	r2, #32
 8003418:	2100      	movs	r1, #0
 800341a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800341c:	4b1a      	ldr	r3, [pc, #104]	@ (8003488 <MX_ADC1_Init+0xc8>)
 800341e:	2298      	movs	r2, #152	@ 0x98
 8003420:	00d2      	lsls	r2, r2, #3
 8003422:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003424:	4b18      	ldr	r3, [pc, #96]	@ (8003488 <MX_ADC1_Init+0xc8>)
 8003426:	2280      	movs	r2, #128	@ 0x80
 8003428:	00d2      	lsls	r2, r2, #3
 800342a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800342c:	4b16      	ldr	r3, [pc, #88]	@ (8003488 <MX_ADC1_Init+0xc8>)
 800342e:	222c      	movs	r2, #44	@ 0x2c
 8003430:	2101      	movs	r1, #1
 8003432:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003434:	4b14      	ldr	r3, [pc, #80]	@ (8003488 <MX_ADC1_Init+0xc8>)
 8003436:	2200      	movs	r2, #0
 8003438:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
 800343a:	4b13      	ldr	r3, [pc, #76]	@ (8003488 <MX_ADC1_Init+0xc8>)
 800343c:	2203      	movs	r2, #3
 800343e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003440:	4b11      	ldr	r3, [pc, #68]	@ (8003488 <MX_ADC1_Init+0xc8>)
 8003442:	223c      	movs	r2, #60	@ 0x3c
 8003444:	2100      	movs	r1, #0
 8003446:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003448:	4b0f      	ldr	r3, [pc, #60]	@ (8003488 <MX_ADC1_Init+0xc8>)
 800344a:	2200      	movs	r2, #0
 800344c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800344e:	4b0e      	ldr	r3, [pc, #56]	@ (8003488 <MX_ADC1_Init+0xc8>)
 8003450:	0018      	movs	r0, r3
 8003452:	f000 fd0b 	bl	8003e6c <HAL_ADC_Init>
 8003456:	1e03      	subs	r3, r0, #0
 8003458:	d001      	beq.n	800345e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800345a:	f000 f96d 	bl	8003738 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800345e:	1d3b      	adds	r3, r7, #4
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003464:	1d3b      	adds	r3, r7, #4
 8003466:	2201      	movs	r2, #1
 8003468:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800346a:	1d3a      	adds	r2, r7, #4
 800346c:	4b06      	ldr	r3, [pc, #24]	@ (8003488 <MX_ADC1_Init+0xc8>)
 800346e:	0011      	movs	r1, r2
 8003470:	0018      	movs	r0, r3
 8003472:	f001 f8a9 	bl	80045c8 <HAL_ADC_ConfigChannel>
 8003476:	1e03      	subs	r3, r0, #0
 8003478:	d001      	beq.n	800347e <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800347a:	f000 f95d 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800347e:	46c0      	nop			@ (mov r8, r8)
 8003480:	46bd      	mov	sp, r7
 8003482:	b004      	add	sp, #16
 8003484:	bd80      	pop	{r7, pc}
 8003486:	46c0      	nop			@ (mov r8, r8)
 8003488:	200000a0 	.word	0x200000a0
 800348c:	40012400 	.word	0x40012400

08003490 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003496:	2310      	movs	r3, #16
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	0018      	movs	r0, r3
 800349c:	2310      	movs	r3, #16
 800349e:	001a      	movs	r2, r3
 80034a0:	2100      	movs	r1, #0
 80034a2:	f003 ff19 	bl	80072d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034a6:	1d3b      	adds	r3, r7, #4
 80034a8:	0018      	movs	r0, r3
 80034aa:	230c      	movs	r3, #12
 80034ac:	001a      	movs	r2, r3
 80034ae:	2100      	movs	r1, #0
 80034b0:	f003 ff12 	bl	80072d8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80034b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003530 <MX_TIM3_Init+0xa0>)
 80034b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003534 <MX_TIM3_Init+0xa4>)
 80034b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11999;
 80034ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003530 <MX_TIM3_Init+0xa0>)
 80034bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003538 <MX_TIM3_Init+0xa8>)
 80034be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003530 <MX_TIM3_Init+0xa0>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80034c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003530 <MX_TIM3_Init+0xa0>)
 80034c8:	4a1c      	ldr	r2, [pc, #112]	@ (800353c <MX_TIM3_Init+0xac>)
 80034ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034cc:	4b18      	ldr	r3, [pc, #96]	@ (8003530 <MX_TIM3_Init+0xa0>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034d2:	4b17      	ldr	r3, [pc, #92]	@ (8003530 <MX_TIM3_Init+0xa0>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80034d8:	4b15      	ldr	r3, [pc, #84]	@ (8003530 <MX_TIM3_Init+0xa0>)
 80034da:	0018      	movs	r0, r3
 80034dc:	f002 fe7c 	bl	80061d8 <HAL_TIM_Base_Init>
 80034e0:	1e03      	subs	r3, r0, #0
 80034e2:	d001      	beq.n	80034e8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80034e4:	f000 f928 	bl	8003738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034e8:	2110      	movs	r1, #16
 80034ea:	187b      	adds	r3, r7, r1
 80034ec:	2280      	movs	r2, #128	@ 0x80
 80034ee:	0152      	lsls	r2, r2, #5
 80034f0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034f2:	187a      	adds	r2, r7, r1
 80034f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003530 <MX_TIM3_Init+0xa0>)
 80034f6:	0011      	movs	r1, r2
 80034f8:	0018      	movs	r0, r3
 80034fa:	f003 f943 	bl	8006784 <HAL_TIM_ConfigClockSource>
 80034fe:	1e03      	subs	r3, r0, #0
 8003500:	d001      	beq.n	8003506 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003502:	f000 f919 	bl	8003738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003506:	1d3b      	adds	r3, r7, #4
 8003508:	2220      	movs	r2, #32
 800350a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800350c:	1d3b      	adds	r3, r7, #4
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003512:	1d3a      	adds	r2, r7, #4
 8003514:	4b06      	ldr	r3, [pc, #24]	@ (8003530 <MX_TIM3_Init+0xa0>)
 8003516:	0011      	movs	r1, r2
 8003518:	0018      	movs	r0, r3
 800351a:	f003 fddf 	bl	80070dc <HAL_TIMEx_MasterConfigSynchronization>
 800351e:	1e03      	subs	r3, r0, #0
 8003520:	d001      	beq.n	8003526 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003522:	f000 f909 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003526:	46c0      	nop			@ (mov r8, r8)
 8003528:	46bd      	mov	sp, r7
 800352a:	b008      	add	sp, #32
 800352c:	bd80      	pop	{r7, pc}
 800352e:	46c0      	nop			@ (mov r8, r8)
 8003530:	20000160 	.word	0x20000160
 8003534:	40000400 	.word	0x40000400
 8003538:	00002edf 	.word	0x00002edf
 800353c:	000003e7 	.word	0x000003e7

08003540 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b094      	sub	sp, #80	@ 0x50
 8003544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003546:	2334      	movs	r3, #52	@ 0x34
 8003548:	18fb      	adds	r3, r7, r3
 800354a:	0018      	movs	r0, r3
 800354c:	231c      	movs	r3, #28
 800354e:	001a      	movs	r2, r3
 8003550:	2100      	movs	r1, #0
 8003552:	f003 fec1 	bl	80072d8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003556:	003b      	movs	r3, r7
 8003558:	0018      	movs	r0, r3
 800355a:	2334      	movs	r3, #52	@ 0x34
 800355c:	001a      	movs	r2, r3
 800355e:	2100      	movs	r1, #0
 8003560:	f003 feba 	bl	80072d8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003564:	4b38      	ldr	r3, [pc, #224]	@ (8003648 <MX_TIM16_Init+0x108>)
 8003566:	4a39      	ldr	r2, [pc, #228]	@ (800364c <MX_TIM16_Init+0x10c>)
 8003568:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2;
 800356a:	4b37      	ldr	r3, [pc, #220]	@ (8003648 <MX_TIM16_Init+0x108>)
 800356c:	2202      	movs	r2, #2
 800356e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003570:	4b35      	ldr	r3, [pc, #212]	@ (8003648 <MX_TIM16_Init+0x108>)
 8003572:	2200      	movs	r2, #0
 8003574:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 399;
 8003576:	4b34      	ldr	r3, [pc, #208]	@ (8003648 <MX_TIM16_Init+0x108>)
 8003578:	2290      	movs	r2, #144	@ 0x90
 800357a:	32ff      	adds	r2, #255	@ 0xff
 800357c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800357e:	4b32      	ldr	r3, [pc, #200]	@ (8003648 <MX_TIM16_Init+0x108>)
 8003580:	2200      	movs	r2, #0
 8003582:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003584:	4b30      	ldr	r3, [pc, #192]	@ (8003648 <MX_TIM16_Init+0x108>)
 8003586:	2200      	movs	r2, #0
 8003588:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800358a:	4b2f      	ldr	r3, [pc, #188]	@ (8003648 <MX_TIM16_Init+0x108>)
 800358c:	2280      	movs	r2, #128	@ 0x80
 800358e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003590:	4b2d      	ldr	r3, [pc, #180]	@ (8003648 <MX_TIM16_Init+0x108>)
 8003592:	0018      	movs	r0, r3
 8003594:	f002 fe20 	bl	80061d8 <HAL_TIM_Base_Init>
 8003598:	1e03      	subs	r3, r0, #0
 800359a:	d001      	beq.n	80035a0 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 800359c:	f000 f8cc 	bl	8003738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80035a0:	4b29      	ldr	r3, [pc, #164]	@ (8003648 <MX_TIM16_Init+0x108>)
 80035a2:	0018      	movs	r0, r3
 80035a4:	f002 feb6 	bl	8006314 <HAL_TIM_PWM_Init>
 80035a8:	1e03      	subs	r3, r0, #0
 80035aa:	d001      	beq.n	80035b0 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80035ac:	f000 f8c4 	bl	8003738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035b0:	2134      	movs	r1, #52	@ 0x34
 80035b2:	187b      	adds	r3, r7, r1
 80035b4:	2260      	movs	r2, #96	@ 0x60
 80035b6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 80035b8:	187b      	adds	r3, r7, r1
 80035ba:	22fa      	movs	r2, #250	@ 0xfa
 80035bc:	0052      	lsls	r2, r2, #1
 80035be:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035c0:	187b      	adds	r3, r7, r1
 80035c2:	2200      	movs	r2, #0
 80035c4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035c6:	187b      	adds	r3, r7, r1
 80035c8:	2200      	movs	r2, #0
 80035ca:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035cc:	187b      	adds	r3, r7, r1
 80035ce:	2200      	movs	r2, #0
 80035d0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035d2:	187b      	adds	r3, r7, r1
 80035d4:	2200      	movs	r2, #0
 80035d6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80035d8:	187b      	adds	r3, r7, r1
 80035da:	2200      	movs	r2, #0
 80035dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035de:	1879      	adds	r1, r7, r1
 80035e0:	4b19      	ldr	r3, [pc, #100]	@ (8003648 <MX_TIM16_Init+0x108>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	0018      	movs	r0, r3
 80035e6:	f002 ffcd 	bl	8006584 <HAL_TIM_PWM_ConfigChannel>
 80035ea:	1e03      	subs	r3, r0, #0
 80035ec:	d001      	beq.n	80035f2 <MX_TIM16_Init+0xb2>
  {
    Error_Handler();
 80035ee:	f000 f8a3 	bl	8003738 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80035f2:	003b      	movs	r3, r7
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80035f8:	003b      	movs	r3, r7
 80035fa:	2200      	movs	r2, #0
 80035fc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80035fe:	003b      	movs	r3, r7
 8003600:	2200      	movs	r2, #0
 8003602:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003604:	003b      	movs	r3, r7
 8003606:	2200      	movs	r2, #0
 8003608:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800360a:	003b      	movs	r3, r7
 800360c:	2200      	movs	r2, #0
 800360e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003610:	003b      	movs	r3, r7
 8003612:	2280      	movs	r2, #128	@ 0x80
 8003614:	0192      	lsls	r2, r2, #6
 8003616:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003618:	003b      	movs	r3, r7
 800361a:	2200      	movs	r2, #0
 800361c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800361e:	003b      	movs	r3, r7
 8003620:	2200      	movs	r2, #0
 8003622:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003624:	003a      	movs	r2, r7
 8003626:	4b08      	ldr	r3, [pc, #32]	@ (8003648 <MX_TIM16_Init+0x108>)
 8003628:	0011      	movs	r1, r2
 800362a:	0018      	movs	r0, r3
 800362c:	f003 fdb8 	bl	80071a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003630:	1e03      	subs	r3, r0, #0
 8003632:	d001      	beq.n	8003638 <MX_TIM16_Init+0xf8>
  {
    Error_Handler();
 8003634:	f000 f880 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8003638:	4b03      	ldr	r3, [pc, #12]	@ (8003648 <MX_TIM16_Init+0x108>)
 800363a:	0018      	movs	r0, r3
 800363c:	f000 f96c 	bl	8003918 <HAL_TIM_MspPostInit>

}
 8003640:	46c0      	nop			@ (mov r8, r8)
 8003642:	46bd      	mov	sp, r7
 8003644:	b014      	add	sp, #80	@ 0x50
 8003646:	bd80      	pop	{r7, pc}
 8003648:	200001ac 	.word	0x200001ac
 800364c:	40014400 	.word	0x40014400

08003650 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003656:	4b0c      	ldr	r3, [pc, #48]	@ (8003688 <MX_DMA_Init+0x38>)
 8003658:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800365a:	4b0b      	ldr	r3, [pc, #44]	@ (8003688 <MX_DMA_Init+0x38>)
 800365c:	2101      	movs	r1, #1
 800365e:	430a      	orrs	r2, r1
 8003660:	639a      	str	r2, [r3, #56]	@ 0x38
 8003662:	4b09      	ldr	r3, [pc, #36]	@ (8003688 <MX_DMA_Init+0x38>)
 8003664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003666:	2201      	movs	r2, #1
 8003668:	4013      	ands	r3, r2
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800366e:	2200      	movs	r2, #0
 8003670:	2100      	movs	r1, #0
 8003672:	200a      	movs	r0, #10
 8003674:	f001 fd40 	bl	80050f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003678:	200a      	movs	r0, #10
 800367a:	f001 fd52 	bl	8005122 <HAL_NVIC_EnableIRQ>

}
 800367e:	46c0      	nop			@ (mov r8, r8)
 8003680:	46bd      	mov	sp, r7
 8003682:	b002      	add	sp, #8
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			@ (mov r8, r8)
 8003688:	40021000 	.word	0x40021000

0800368c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800368c:	b590      	push	{r4, r7, lr}
 800368e:	b089      	sub	sp, #36	@ 0x24
 8003690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003692:	240c      	movs	r4, #12
 8003694:	193b      	adds	r3, r7, r4
 8003696:	0018      	movs	r0, r3
 8003698:	2314      	movs	r3, #20
 800369a:	001a      	movs	r2, r3
 800369c:	2100      	movs	r1, #0
 800369e:	f003 fe1b 	bl	80072d8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a2:	4b23      	ldr	r3, [pc, #140]	@ (8003730 <MX_GPIO_Init+0xa4>)
 80036a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036a6:	4b22      	ldr	r3, [pc, #136]	@ (8003730 <MX_GPIO_Init+0xa4>)
 80036a8:	2102      	movs	r1, #2
 80036aa:	430a      	orrs	r2, r1
 80036ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80036ae:	4b20      	ldr	r3, [pc, #128]	@ (8003730 <MX_GPIO_Init+0xa4>)
 80036b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b2:	2202      	movs	r2, #2
 80036b4:	4013      	ands	r3, r2
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003730 <MX_GPIO_Init+0xa4>)
 80036bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036be:	4b1c      	ldr	r3, [pc, #112]	@ (8003730 <MX_GPIO_Init+0xa4>)
 80036c0:	2101      	movs	r1, #1
 80036c2:	430a      	orrs	r2, r1
 80036c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80036c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003730 <MX_GPIO_Init+0xa4>)
 80036c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ca:	2201      	movs	r2, #1
 80036cc:	4013      	ands	r3, r2
 80036ce:	607b      	str	r3, [r7, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80036d2:	4b18      	ldr	r3, [pc, #96]	@ (8003734 <MX_GPIO_Init+0xa8>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	2140      	movs	r1, #64	@ 0x40
 80036d8:	0018      	movs	r0, r3
 80036da:	f002 f91a 	bl	8005912 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOTAO_Pin */
  GPIO_InitStruct.Pin = BOTAO_Pin;
 80036de:	193b      	adds	r3, r7, r4
 80036e0:	2280      	movs	r2, #128	@ 0x80
 80036e2:	0052      	lsls	r2, r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036e6:	193b      	adds	r3, r7, r4
 80036e8:	2200      	movs	r2, #0
 80036ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036ec:	193b      	adds	r3, r7, r4
 80036ee:	2201      	movs	r2, #1
 80036f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOTAO_GPIO_Port, &GPIO_InitStruct);
 80036f2:	193a      	adds	r2, r7, r4
 80036f4:	23a0      	movs	r3, #160	@ 0xa0
 80036f6:	05db      	lsls	r3, r3, #23
 80036f8:	0011      	movs	r1, r2
 80036fa:	0018      	movs	r0, r3
 80036fc:	f001 ff82 	bl	8005604 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8003700:	0021      	movs	r1, r4
 8003702:	187b      	adds	r3, r7, r1
 8003704:	2240      	movs	r2, #64	@ 0x40
 8003706:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003708:	187b      	adds	r3, r7, r1
 800370a:	2201      	movs	r2, #1
 800370c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370e:	187b      	adds	r3, r7, r1
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003714:	187b      	adds	r3, r7, r1
 8003716:	2200      	movs	r2, #0
 8003718:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800371a:	187b      	adds	r3, r7, r1
 800371c:	4a05      	ldr	r2, [pc, #20]	@ (8003734 <MX_GPIO_Init+0xa8>)
 800371e:	0019      	movs	r1, r3
 8003720:	0010      	movs	r0, r2
 8003722:	f001 ff6f 	bl	8005604 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	46bd      	mov	sp, r7
 800372a:	b009      	add	sp, #36	@ 0x24
 800372c:	bd90      	pop	{r4, r7, pc}
 800372e:	46c0      	nop			@ (mov r8, r8)
 8003730:	40021000 	.word	0x40021000
 8003734:	50000400 	.word	0x50000400

08003738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800373c:	b672      	cpsid	i
}
 800373e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	e7fd      	b.n	8003740 <Error_Handler+0x8>

08003744 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800374a:	4b0f      	ldr	r3, [pc, #60]	@ (8003788 <HAL_MspInit+0x44>)
 800374c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800374e:	4b0e      	ldr	r3, [pc, #56]	@ (8003788 <HAL_MspInit+0x44>)
 8003750:	2101      	movs	r1, #1
 8003752:	430a      	orrs	r2, r1
 8003754:	641a      	str	r2, [r3, #64]	@ 0x40
 8003756:	4b0c      	ldr	r3, [pc, #48]	@ (8003788 <HAL_MspInit+0x44>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	2201      	movs	r2, #1
 800375c:	4013      	ands	r3, r2
 800375e:	607b      	str	r3, [r7, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003762:	4b09      	ldr	r3, [pc, #36]	@ (8003788 <HAL_MspInit+0x44>)
 8003764:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003766:	4b08      	ldr	r3, [pc, #32]	@ (8003788 <HAL_MspInit+0x44>)
 8003768:	2180      	movs	r1, #128	@ 0x80
 800376a:	0549      	lsls	r1, r1, #21
 800376c:	430a      	orrs	r2, r1
 800376e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003770:	4b05      	ldr	r3, [pc, #20]	@ (8003788 <HAL_MspInit+0x44>)
 8003772:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003774:	2380      	movs	r3, #128	@ 0x80
 8003776:	055b      	lsls	r3, r3, #21
 8003778:	4013      	ands	r3, r2
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800377e:	46c0      	nop			@ (mov r8, r8)
 8003780:	46bd      	mov	sp, r7
 8003782:	b002      	add	sp, #8
 8003784:	bd80      	pop	{r7, pc}
 8003786:	46c0      	nop			@ (mov r8, r8)
 8003788:	40021000 	.word	0x40021000

0800378c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800378c:	b590      	push	{r4, r7, lr}
 800378e:	b091      	sub	sp, #68	@ 0x44
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003794:	232c      	movs	r3, #44	@ 0x2c
 8003796:	18fb      	adds	r3, r7, r3
 8003798:	0018      	movs	r0, r3
 800379a:	2314      	movs	r3, #20
 800379c:	001a      	movs	r2, r3
 800379e:	2100      	movs	r1, #0
 80037a0:	f003 fd9a 	bl	80072d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037a4:	2410      	movs	r4, #16
 80037a6:	193b      	adds	r3, r7, r4
 80037a8:	0018      	movs	r0, r3
 80037aa:	231c      	movs	r3, #28
 80037ac:	001a      	movs	r2, r3
 80037ae:	2100      	movs	r1, #0
 80037b0:	f003 fd92 	bl	80072d8 <memset>
  if(hadc->Instance==ADC1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a39      	ldr	r2, [pc, #228]	@ (80038a0 <HAL_ADC_MspInit+0x114>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d16b      	bne.n	8003896 <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80037be:	193b      	adds	r3, r7, r4
 80037c0:	2220      	movs	r2, #32
 80037c2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80037c4:	193b      	adds	r3, r7, r4
 80037c6:	2200      	movs	r2, #0
 80037c8:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037ca:	193b      	adds	r3, r7, r4
 80037cc:	0018      	movs	r0, r3
 80037ce:	f002 fc17 	bl	8006000 <HAL_RCCEx_PeriphCLKConfig>
 80037d2:	1e03      	subs	r3, r0, #0
 80037d4:	d001      	beq.n	80037da <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 80037d6:	f7ff ffaf 	bl	8003738 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80037da:	4b32      	ldr	r3, [pc, #200]	@ (80038a4 <HAL_ADC_MspInit+0x118>)
 80037dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037de:	4b31      	ldr	r3, [pc, #196]	@ (80038a4 <HAL_ADC_MspInit+0x118>)
 80037e0:	2180      	movs	r1, #128	@ 0x80
 80037e2:	0349      	lsls	r1, r1, #13
 80037e4:	430a      	orrs	r2, r1
 80037e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80037e8:	4b2e      	ldr	r3, [pc, #184]	@ (80038a4 <HAL_ADC_MspInit+0x118>)
 80037ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037ec:	2380      	movs	r3, #128	@ 0x80
 80037ee:	035b      	lsls	r3, r3, #13
 80037f0:	4013      	ands	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f6:	4b2b      	ldr	r3, [pc, #172]	@ (80038a4 <HAL_ADC_MspInit+0x118>)
 80037f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037fa:	4b2a      	ldr	r3, [pc, #168]	@ (80038a4 <HAL_ADC_MspInit+0x118>)
 80037fc:	2101      	movs	r1, #1
 80037fe:	430a      	orrs	r2, r1
 8003800:	635a      	str	r2, [r3, #52]	@ 0x34
 8003802:	4b28      	ldr	r3, [pc, #160]	@ (80038a4 <HAL_ADC_MspInit+0x118>)
 8003804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003806:	2201      	movs	r2, #1
 8003808:	4013      	ands	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800380e:	212c      	movs	r1, #44	@ 0x2c
 8003810:	187b      	adds	r3, r7, r1
 8003812:	2201      	movs	r2, #1
 8003814:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003816:	187b      	adds	r3, r7, r1
 8003818:	2203      	movs	r2, #3
 800381a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381c:	187b      	adds	r3, r7, r1
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003822:	187a      	adds	r2, r7, r1
 8003824:	23a0      	movs	r3, #160	@ 0xa0
 8003826:	05db      	lsls	r3, r3, #23
 8003828:	0011      	movs	r1, r2
 800382a:	0018      	movs	r0, r3
 800382c:	f001 feea 	bl	8005604 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8003830:	4b1d      	ldr	r3, [pc, #116]	@ (80038a8 <HAL_ADC_MspInit+0x11c>)
 8003832:	4a1e      	ldr	r2, [pc, #120]	@ (80038ac <HAL_ADC_MspInit+0x120>)
 8003834:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003836:	4b1c      	ldr	r3, [pc, #112]	@ (80038a8 <HAL_ADC_MspInit+0x11c>)
 8003838:	2205      	movs	r2, #5
 800383a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800383c:	4b1a      	ldr	r3, [pc, #104]	@ (80038a8 <HAL_ADC_MspInit+0x11c>)
 800383e:	2200      	movs	r2, #0
 8003840:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003842:	4b19      	ldr	r3, [pc, #100]	@ (80038a8 <HAL_ADC_MspInit+0x11c>)
 8003844:	2200      	movs	r2, #0
 8003846:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003848:	4b17      	ldr	r3, [pc, #92]	@ (80038a8 <HAL_ADC_MspInit+0x11c>)
 800384a:	2280      	movs	r2, #128	@ 0x80
 800384c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800384e:	4b16      	ldr	r3, [pc, #88]	@ (80038a8 <HAL_ADC_MspInit+0x11c>)
 8003850:	2280      	movs	r2, #128	@ 0x80
 8003852:	0052      	lsls	r2, r2, #1
 8003854:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003856:	4b14      	ldr	r3, [pc, #80]	@ (80038a8 <HAL_ADC_MspInit+0x11c>)
 8003858:	2280      	movs	r2, #128	@ 0x80
 800385a:	00d2      	lsls	r2, r2, #3
 800385c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800385e:	4b12      	ldr	r3, [pc, #72]	@ (80038a8 <HAL_ADC_MspInit+0x11c>)
 8003860:	2220      	movs	r2, #32
 8003862:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003864:	4b10      	ldr	r3, [pc, #64]	@ (80038a8 <HAL_ADC_MspInit+0x11c>)
 8003866:	2200      	movs	r2, #0
 8003868:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800386a:	4b0f      	ldr	r3, [pc, #60]	@ (80038a8 <HAL_ADC_MspInit+0x11c>)
 800386c:	0018      	movs	r0, r3
 800386e:	f001 fc75 	bl	800515c <HAL_DMA_Init>
 8003872:	1e03      	subs	r3, r0, #0
 8003874:	d001      	beq.n	800387a <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8003876:	f7ff ff5f 	bl	8003738 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a0a      	ldr	r2, [pc, #40]	@ (80038a8 <HAL_ADC_MspInit+0x11c>)
 800387e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003880:	4b09      	ldr	r3, [pc, #36]	@ (80038a8 <HAL_ADC_MspInit+0x11c>)
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8003886:	2200      	movs	r2, #0
 8003888:	2100      	movs	r1, #0
 800388a:	200c      	movs	r0, #12
 800388c:	f001 fc34 	bl	80050f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003890:	200c      	movs	r0, #12
 8003892:	f001 fc46 	bl	8005122 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003896:	46c0      	nop			@ (mov r8, r8)
 8003898:	46bd      	mov	sp, r7
 800389a:	b011      	add	sp, #68	@ 0x44
 800389c:	bd90      	pop	{r4, r7, pc}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	40012400 	.word	0x40012400
 80038a4:	40021000 	.word	0x40021000
 80038a8:	20000104 	.word	0x20000104
 80038ac:	4002001c 	.word	0x4002001c

080038b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a13      	ldr	r2, [pc, #76]	@ (800390c <HAL_TIM_Base_MspInit+0x5c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d10c      	bne.n	80038dc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038c2:	4b13      	ldr	r3, [pc, #76]	@ (8003910 <HAL_TIM_Base_MspInit+0x60>)
 80038c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038c6:	4b12      	ldr	r3, [pc, #72]	@ (8003910 <HAL_TIM_Base_MspInit+0x60>)
 80038c8:	2102      	movs	r1, #2
 80038ca:	430a      	orrs	r2, r1
 80038cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80038ce:	4b10      	ldr	r3, [pc, #64]	@ (8003910 <HAL_TIM_Base_MspInit+0x60>)
 80038d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d2:	2202      	movs	r2, #2
 80038d4:	4013      	ands	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80038da:	e012      	b.n	8003902 <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM16)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003914 <HAL_TIM_Base_MspInit+0x64>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d10d      	bne.n	8003902 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80038e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003910 <HAL_TIM_Base_MspInit+0x60>)
 80038e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038ea:	4b09      	ldr	r3, [pc, #36]	@ (8003910 <HAL_TIM_Base_MspInit+0x60>)
 80038ec:	2180      	movs	r1, #128	@ 0x80
 80038ee:	0289      	lsls	r1, r1, #10
 80038f0:	430a      	orrs	r2, r1
 80038f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80038f4:	4b06      	ldr	r3, [pc, #24]	@ (8003910 <HAL_TIM_Base_MspInit+0x60>)
 80038f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038f8:	2380      	movs	r3, #128	@ 0x80
 80038fa:	029b      	lsls	r3, r3, #10
 80038fc:	4013      	ands	r3, r2
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	68bb      	ldr	r3, [r7, #8]
}
 8003902:	46c0      	nop			@ (mov r8, r8)
 8003904:	46bd      	mov	sp, r7
 8003906:	b004      	add	sp, #16
 8003908:	bd80      	pop	{r7, pc}
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	40000400 	.word	0x40000400
 8003910:	40021000 	.word	0x40021000
 8003914:	40014400 	.word	0x40014400

08003918 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003918:	b590      	push	{r4, r7, lr}
 800391a:	b089      	sub	sp, #36	@ 0x24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003920:	240c      	movs	r4, #12
 8003922:	193b      	adds	r3, r7, r4
 8003924:	0018      	movs	r0, r3
 8003926:	2314      	movs	r3, #20
 8003928:	001a      	movs	r2, r3
 800392a:	2100      	movs	r1, #0
 800392c:	f003 fcd4 	bl	80072d8 <memset>
  if(htim->Instance==TIM16)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a14      	ldr	r2, [pc, #80]	@ (8003988 <HAL_TIM_MspPostInit+0x70>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d121      	bne.n	800397e <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800393a:	4b14      	ldr	r3, [pc, #80]	@ (800398c <HAL_TIM_MspPostInit+0x74>)
 800393c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800393e:	4b13      	ldr	r3, [pc, #76]	@ (800398c <HAL_TIM_MspPostInit+0x74>)
 8003940:	2102      	movs	r1, #2
 8003942:	430a      	orrs	r2, r1
 8003944:	635a      	str	r2, [r3, #52]	@ 0x34
 8003946:	4b11      	ldr	r3, [pc, #68]	@ (800398c <HAL_TIM_MspPostInit+0x74>)
 8003948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800394a:	2202      	movs	r2, #2
 800394c:	4013      	ands	r3, r2
 800394e:	60bb      	str	r3, [r7, #8]
 8003950:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PB7     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003952:	0021      	movs	r1, r4
 8003954:	187b      	adds	r3, r7, r1
 8003956:	2280      	movs	r2, #128	@ 0x80
 8003958:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395a:	187b      	adds	r3, r7, r1
 800395c:	2202      	movs	r2, #2
 800395e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	187b      	adds	r3, r7, r1
 8003962:	2200      	movs	r2, #0
 8003964:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003966:	187b      	adds	r3, r7, r1
 8003968:	2200      	movs	r2, #0
 800396a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM16;
 800396c:	187b      	adds	r3, r7, r1
 800396e:	220a      	movs	r2, #10
 8003970:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003972:	187b      	adds	r3, r7, r1
 8003974:	4a06      	ldr	r2, [pc, #24]	@ (8003990 <HAL_TIM_MspPostInit+0x78>)
 8003976:	0019      	movs	r1, r3
 8003978:	0010      	movs	r0, r2
 800397a:	f001 fe43 	bl	8005604 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800397e:	46c0      	nop			@ (mov r8, r8)
 8003980:	46bd      	mov	sp, r7
 8003982:	b009      	add	sp, #36	@ 0x24
 8003984:	bd90      	pop	{r4, r7, pc}
 8003986:	46c0      	nop			@ (mov r8, r8)
 8003988:	40014400 	.word	0x40014400
 800398c:	40021000 	.word	0x40021000
 8003990:	50000400 	.word	0x50000400

08003994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003998:	46c0      	nop			@ (mov r8, r8)
 800399a:	e7fd      	b.n	8003998 <NMI_Handler+0x4>

0800399c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039a0:	46c0      	nop			@ (mov r8, r8)
 80039a2:	e7fd      	b.n	80039a0 <HardFault_Handler+0x4>

080039a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80039a8:	46c0      	nop			@ (mov r8, r8)
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039bc:	f000 f8b2 	bl	8003b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039c0:	46c0      	nop			@ (mov r8, r8)
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039cc:	4b03      	ldr	r3, [pc, #12]	@ (80039dc <DMA1_Channel2_3_IRQHandler+0x14>)
 80039ce:	0018      	movs	r0, r3
 80039d0:	f001 fcd6 	bl	8005380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80039d4:	46c0      	nop			@ (mov r8, r8)
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	46c0      	nop			@ (mov r8, r8)
 80039dc:	20000104 	.word	0x20000104

080039e0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80039e4:	4b03      	ldr	r3, [pc, #12]	@ (80039f4 <ADC1_IRQHandler+0x14>)
 80039e6:	0018      	movs	r0, r3
 80039e8:	f000 fc74 	bl	80042d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80039ec:	46c0      	nop			@ (mov r8, r8)
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	46c0      	nop			@ (mov r8, r8)
 80039f4:	200000a0 	.word	0x200000a0

080039f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039fc:	4b03      	ldr	r3, [pc, #12]	@ (8003a0c <SystemInit+0x14>)
 80039fe:	2280      	movs	r2, #128	@ 0x80
 8003a00:	0512      	lsls	r2, r2, #20
 8003a02:	609a      	str	r2, [r3, #8]
#endif
}
 8003a04:	46c0      	nop			@ (mov r8, r8)
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	46c0      	nop			@ (mov r8, r8)
 8003a0c:	e000ed00 	.word	0xe000ed00

08003a10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a10:	480d      	ldr	r0, [pc, #52]	@ (8003a48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a12:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a14:	f7ff fff0 	bl	80039f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003a18:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003a1a:	e003      	b.n	8003a24 <LoopCopyDataInit>

08003a1c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a4c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8003a1e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003a20:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003a22:	3104      	adds	r1, #4

08003a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003a24:	480a      	ldr	r0, [pc, #40]	@ (8003a50 <LoopForever+0xa>)
  ldr r3, =_edata
 8003a26:	4b0b      	ldr	r3, [pc, #44]	@ (8003a54 <LoopForever+0xe>)
  adds r2, r0, r1
 8003a28:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003a2a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003a2c:	d3f6      	bcc.n	8003a1c <CopyDataInit>
  ldr r2, =_sbss
 8003a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a58 <LoopForever+0x12>)
  b LoopFillZerobss
 8003a30:	e002      	b.n	8003a38 <LoopFillZerobss>

08003a32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003a32:	2300      	movs	r3, #0
  str  r3, [r2]
 8003a34:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a36:	3204      	adds	r2, #4

08003a38 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8003a38:	4b08      	ldr	r3, [pc, #32]	@ (8003a5c <LoopForever+0x16>)
  cmp r2, r3
 8003a3a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003a3c:	d3f9      	bcc.n	8003a32 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8003a3e:	f003 fc59 	bl	80072f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a42:	f7ff fac3 	bl	8002fcc <main>

08003a46 <LoopForever>:

LoopForever:
    b LoopForever
 8003a46:	e7fe      	b.n	8003a46 <LoopForever>
  ldr   r0, =_estack
 8003a48:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8003a4c:	0800788c 	.word	0x0800788c
  ldr r0, =_sdata
 8003a50:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003a54:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 8003a58:	20000084 	.word	0x20000084
  ldr r3, = _ebss
 8003a5c:	20000368 	.word	0x20000368

08003a60 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a60:	e7fe      	b.n	8003a60 <DMA1_Channel1_IRQHandler>

08003a62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a68:	1dfb      	adds	r3, r7, #7
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a6e:	2003      	movs	r0, #3
 8003a70:	f000 f80e 	bl	8003a90 <HAL_InitTick>
 8003a74:	1e03      	subs	r3, r0, #0
 8003a76:	d003      	beq.n	8003a80 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003a78:	1dfb      	adds	r3, r7, #7
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	701a      	strb	r2, [r3, #0]
 8003a7e:	e001      	b.n	8003a84 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a80:	f7ff fe60 	bl	8003744 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a84:	1dfb      	adds	r3, r7, #7
 8003a86:	781b      	ldrb	r3, [r3, #0]
}
 8003a88:	0018      	movs	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b002      	add	sp, #8
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a98:	230f      	movs	r3, #15
 8003a9a:	18fb      	adds	r3, r7, r3
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8003aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b18 <HAL_InitTick+0x88>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d02b      	beq.n	8003b00 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8003aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8003b1c <HAL_InitTick+0x8c>)
 8003aaa:	681c      	ldr	r4, [r3, #0]
 8003aac:	4b1a      	ldr	r3, [pc, #104]	@ (8003b18 <HAL_InitTick+0x88>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	0019      	movs	r1, r3
 8003ab2:	23fa      	movs	r3, #250	@ 0xfa
 8003ab4:	0098      	lsls	r0, r3, #2
 8003ab6:	f7fc fb27 	bl	8000108 <__udivsi3>
 8003aba:	0003      	movs	r3, r0
 8003abc:	0019      	movs	r1, r3
 8003abe:	0020      	movs	r0, r4
 8003ac0:	f7fc fb22 	bl	8000108 <__udivsi3>
 8003ac4:	0003      	movs	r3, r0
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f001 fb3b 	bl	8005142 <HAL_SYSTICK_Config>
 8003acc:	1e03      	subs	r3, r0, #0
 8003ace:	d112      	bne.n	8003af6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d80a      	bhi.n	8003aec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	2301      	movs	r3, #1
 8003ada:	425b      	negs	r3, r3
 8003adc:	2200      	movs	r2, #0
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f001 fb0a 	bl	80050f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8003b20 <HAL_InitTick+0x90>)
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	e00d      	b.n	8003b08 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003aec:	230f      	movs	r3, #15
 8003aee:	18fb      	adds	r3, r7, r3
 8003af0:	2201      	movs	r2, #1
 8003af2:	701a      	strb	r2, [r3, #0]
 8003af4:	e008      	b.n	8003b08 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003af6:	230f      	movs	r3, #15
 8003af8:	18fb      	adds	r3, r7, r3
 8003afa:	2201      	movs	r2, #1
 8003afc:	701a      	strb	r2, [r3, #0]
 8003afe:	e003      	b.n	8003b08 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b00:	230f      	movs	r3, #15
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	2201      	movs	r2, #1
 8003b06:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003b08:	230f      	movs	r3, #15
 8003b0a:	18fb      	adds	r3, r7, r3
 8003b0c:	781b      	ldrb	r3, [r3, #0]
}
 8003b0e:	0018      	movs	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	b005      	add	sp, #20
 8003b14:	bd90      	pop	{r4, r7, pc}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	20000030 	.word	0x20000030
 8003b1c:	20000028 	.word	0x20000028
 8003b20:	2000002c 	.word	0x2000002c

08003b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b28:	4b05      	ldr	r3, [pc, #20]	@ (8003b40 <HAL_IncTick+0x1c>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	001a      	movs	r2, r3
 8003b2e:	4b05      	ldr	r3, [pc, #20]	@ (8003b44 <HAL_IncTick+0x20>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	18d2      	adds	r2, r2, r3
 8003b34:	4b03      	ldr	r3, [pc, #12]	@ (8003b44 <HAL_IncTick+0x20>)
 8003b36:	601a      	str	r2, [r3, #0]
}
 8003b38:	46c0      	nop			@ (mov r8, r8)
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	20000030 	.word	0x20000030
 8003b44:	2000022c 	.word	0x2000022c

08003b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b4c:	4b02      	ldr	r3, [pc, #8]	@ (8003b58 <HAL_GetTick+0x10>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
}
 8003b50:	0018      	movs	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	46c0      	nop			@ (mov r8, r8)
 8003b58:	2000022c 	.word	0x2000022c

08003b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b64:	f7ff fff0 	bl	8003b48 <HAL_GetTick>
 8003b68:	0003      	movs	r3, r0
 8003b6a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3301      	adds	r3, #1
 8003b74:	d005      	beq.n	8003b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b76:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba0 <HAL_Delay+0x44>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	001a      	movs	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	189b      	adds	r3, r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b82:	46c0      	nop			@ (mov r8, r8)
 8003b84:	f7ff ffe0 	bl	8003b48 <HAL_GetTick>
 8003b88:	0002      	movs	r2, r0
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d8f7      	bhi.n	8003b84 <HAL_Delay+0x28>
  {
  }
}
 8003b94:	46c0      	nop			@ (mov r8, r8)
 8003b96:	46c0      	nop			@ (mov r8, r8)
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b004      	add	sp, #16
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	46c0      	nop			@ (mov r8, r8)
 8003ba0:	20000030 	.word	0x20000030

08003ba4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a05      	ldr	r2, [pc, #20]	@ (8003bc8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003bb4:	401a      	ands	r2, r3
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	601a      	str	r2, [r3, #0]
}
 8003bbe:	46c0      	nop			@ (mov r8, r8)
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b002      	add	sp, #8
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	46c0      	nop			@ (mov r8, r8)
 8003bc8:	ff3fffff 	.word	0xff3fffff

08003bcc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	23c0      	movs	r3, #192	@ 0xc0
 8003bda:	041b      	lsls	r3, r3, #16
 8003bdc:	4013      	ands	r3, r2
}
 8003bde:	0018      	movs	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b002      	add	sp, #8
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b084      	sub	sp, #16
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	2104      	movs	r1, #4
 8003bfa:	400a      	ands	r2, r1
 8003bfc:	2107      	movs	r1, #7
 8003bfe:	4091      	lsls	r1, r2
 8003c00:	000a      	movs	r2, r1
 8003c02:	43d2      	mvns	r2, r2
 8003c04:	401a      	ands	r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2104      	movs	r1, #4
 8003c0a:	400b      	ands	r3, r1
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	4099      	lsls	r1, r3
 8003c10:	000b      	movs	r3, r1
 8003c12:	431a      	orrs	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003c18:	46c0      	nop			@ (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b004      	add	sp, #16
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	2104      	movs	r1, #4
 8003c32:	400a      	ands	r2, r1
 8003c34:	2107      	movs	r1, #7
 8003c36:	4091      	lsls	r1, r2
 8003c38:	000a      	movs	r2, r1
 8003c3a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	2104      	movs	r1, #4
 8003c40:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003c42:	40da      	lsrs	r2, r3
 8003c44:	0013      	movs	r3, r2
}
 8003c46:	0018      	movs	r0, r3
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	b002      	add	sp, #8
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b082      	sub	sp, #8
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	23c0      	movs	r3, #192	@ 0xc0
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d101      	bne.n	8003c66 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	0018      	movs	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b002      	add	sp, #8
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	211f      	movs	r1, #31
 8003c84:	400a      	ands	r2, r1
 8003c86:	210f      	movs	r1, #15
 8003c88:	4091      	lsls	r1, r2
 8003c8a:	000a      	movs	r2, r1
 8003c8c:	43d2      	mvns	r2, r2
 8003c8e:	401a      	ands	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	0e9b      	lsrs	r3, r3, #26
 8003c94:	210f      	movs	r1, #15
 8003c96:	4019      	ands	r1, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	201f      	movs	r0, #31
 8003c9c:	4003      	ands	r3, r0
 8003c9e:	4099      	lsls	r1, r3
 8003ca0:	000b      	movs	r3, r1
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ca8:	46c0      	nop			@ (mov r8, r8)
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b004      	add	sp, #16
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	025b      	lsls	r3, r3, #9
 8003cc2:	0a5b      	lsrs	r3, r3, #9
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003cca:	46c0      	nop			@ (mov r8, r8)
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b002      	add	sp, #8
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	0252      	lsls	r2, r2, #9
 8003ce4:	0a52      	lsrs	r2, r2, #9
 8003ce6:	43d2      	mvns	r2, r2
 8003ce8:	401a      	ands	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003cee:	46c0      	nop			@ (mov r8, r8)
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	b002      	add	sp, #8
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	2203      	movs	r2, #3
 8003d04:	4013      	ands	r3, r2
}
 8003d06:	0018      	movs	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b002      	add	sp, #8
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	0212      	lsls	r2, r2, #8
 8003d24:	43d2      	mvns	r2, r2
 8003d26:	401a      	ands	r2, r3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	021b      	lsls	r3, r3, #8
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	400b      	ands	r3, r1
 8003d30:	4904      	ldr	r1, [pc, #16]	@ (8003d44 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003d32:	400b      	ands	r3, r1
 8003d34:	431a      	orrs	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003d3a:	46c0      	nop			@ (mov r8, r8)
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b004      	add	sp, #16
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	46c0      	nop			@ (mov r8, r8)
 8003d44:	7fffff00 	.word	0x7fffff00

08003d48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	4a05      	ldr	r2, [pc, #20]	@ (8003d6c <LL_ADC_EnableInternalRegulator+0x24>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	2280      	movs	r2, #128	@ 0x80
 8003d5a:	0552      	lsls	r2, r2, #21
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d62:	46c0      	nop			@ (mov r8, r8)
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b002      	add	sp, #8
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	46c0      	nop			@ (mov r8, r8)
 8003d6c:	6fffffe8 	.word	0x6fffffe8

08003d70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	2380      	movs	r3, #128	@ 0x80
 8003d7e:	055b      	lsls	r3, r3, #21
 8003d80:	401a      	ands	r2, r3
 8003d82:	2380      	movs	r3, #128	@ 0x80
 8003d84:	055b      	lsls	r3, r3, #21
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d101      	bne.n	8003d8e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	0018      	movs	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b002      	add	sp, #8
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	4a04      	ldr	r2, [pc, #16]	@ (8003db8 <LL_ADC_Enable+0x20>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	2201      	movs	r2, #1
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003db0:	46c0      	nop			@ (mov r8, r8)
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b002      	add	sp, #8
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	7fffffe8 	.word	0x7fffffe8

08003dbc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	4a04      	ldr	r2, [pc, #16]	@ (8003ddc <LL_ADC_Disable+0x20>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2202      	movs	r2, #2
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003dd4:	46c0      	nop			@ (mov r8, r8)
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b002      	add	sp, #8
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	7fffffe8 	.word	0x7fffffe8

08003de0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2201      	movs	r2, #1
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <LL_ADC_IsEnabled+0x18>
 8003df4:	2301      	movs	r3, #1
 8003df6:	e000      	b.n	8003dfa <LL_ADC_IsEnabled+0x1a>
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b002      	add	sp, #8
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d101      	bne.n	8003e1a <LL_ADC_IsDisableOngoing+0x18>
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <LL_ADC_IsDisableOngoing+0x1a>
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b002      	add	sp, #8
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	4a04      	ldr	r2, [pc, #16]	@ (8003e44 <LL_ADC_REG_StartConversion+0x20>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	2204      	movs	r2, #4
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e3c:	46c0      	nop			@ (mov r8, r8)
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b002      	add	sp, #8
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	7fffffe8 	.word	0x7fffffe8

08003e48 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2204      	movs	r2, #4
 8003e56:	4013      	ands	r3, r2
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d101      	bne.n	8003e60 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	0018      	movs	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b002      	add	sp, #8
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e74:	231f      	movs	r3, #31
 8003e76:	18fb      	adds	r3, r7, r3
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e17e      	b.n	8004190 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10a      	bne.n	8003eb0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f7ff fc75 	bl	800378c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2254      	movs	r2, #84	@ 0x54
 8003eac:	2100      	movs	r1, #0
 8003eae:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f7ff ff5b 	bl	8003d70 <LL_ADC_IsInternalRegulatorEnabled>
 8003eba:	1e03      	subs	r3, r0, #0
 8003ebc:	d114      	bne.n	8003ee8 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f7ff ff40 	bl	8003d48 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003ec8:	4bb3      	ldr	r3, [pc, #716]	@ (8004198 <HAL_ADC_Init+0x32c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	49b3      	ldr	r1, [pc, #716]	@ (800419c <HAL_ADC_Init+0x330>)
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f7fc f91a 	bl	8000108 <__udivsi3>
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003eda:	e002      	b.n	8003ee2 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1f9      	bne.n	8003edc <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	0018      	movs	r0, r3
 8003eee:	f7ff ff3f 	bl	8003d70 <LL_ADC_IsInternalRegulatorEnabled>
 8003ef2:	1e03      	subs	r3, r0, #0
 8003ef4:	d10f      	bne.n	8003f16 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efa:	2210      	movs	r2, #16
 8003efc:	431a      	orrs	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f06:	2201      	movs	r2, #1
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f0e:	231f      	movs	r3, #31
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	2201      	movs	r2, #1
 8003f14:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f7ff ff94 	bl	8003e48 <LL_ADC_REG_IsConversionOngoing>
 8003f20:	0003      	movs	r3, r0
 8003f22:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f28:	2210      	movs	r2, #16
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d000      	beq.n	8003f30 <HAL_ADC_Init+0xc4>
 8003f2e:	e122      	b.n	8004176 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d000      	beq.n	8003f38 <HAL_ADC_Init+0xcc>
 8003f36:	e11e      	b.n	8004176 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3c:	4a98      	ldr	r2, [pc, #608]	@ (80041a0 <HAL_ADC_Init+0x334>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2202      	movs	r2, #2
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f7ff ff47 	bl	8003de0 <LL_ADC_IsEnabled>
 8003f52:	1e03      	subs	r3, r0, #0
 8003f54:	d000      	beq.n	8003f58 <HAL_ADC_Init+0xec>
 8003f56:	e0ad      	b.n	80040b4 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	7e1b      	ldrb	r3, [r3, #24]
 8003f60:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003f62:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	7e5b      	ldrb	r3, [r3, #25]
 8003f68:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003f6a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	7e9b      	ldrb	r3, [r3, #26]
 8003f70:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003f72:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <HAL_ADC_Init+0x116>
 8003f7c:	2380      	movs	r3, #128	@ 0x80
 8003f7e:	015b      	lsls	r3, r3, #5
 8003f80:	e000      	b.n	8003f84 <HAL_ADC_Init+0x118>
 8003f82:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003f84:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003f8a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	da04      	bge.n	8003f9e <HAL_ADC_Init+0x132>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	085b      	lsrs	r3, r3, #1
 8003f9c:	e001      	b.n	8003fa2 <HAL_ADC_Init+0x136>
 8003f9e:	2380      	movs	r3, #128	@ 0x80
 8003fa0:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8003fa2:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	212c      	movs	r1, #44	@ 0x2c
 8003fa8:	5c5b      	ldrb	r3, [r3, r1]
 8003faa:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003fac:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	5c9b      	ldrb	r3, [r3, r2]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d115      	bne.n	8003fea <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	7e9b      	ldrb	r3, [r3, #26]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d105      	bne.n	8003fd2 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	2280      	movs	r2, #128	@ 0x80
 8003fca:	0252      	lsls	r2, r2, #9
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
 8003fd0:	e00b      	b.n	8003fea <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ff6:	23e0      	movs	r3, #224	@ 0xe0
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004000:	4313      	orrs	r3, r2
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4313      	orrs	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	4a65      	ldr	r2, [pc, #404]	@ (80041a4 <HAL_ADC_Init+0x338>)
 8004010:	4013      	ands	r3, r2
 8004012:	0019      	movs	r1, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	430a      	orrs	r2, r1
 800401c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	0f9b      	lsrs	r3, r3, #30
 8004024:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800402a:	4313      	orrs	r3, r2
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	223c      	movs	r2, #60	@ 0x3c
 8004036:	5c9b      	ldrb	r3, [r3, r2]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d111      	bne.n	8004060 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	0f9b      	lsrs	r3, r3, #30
 8004042:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004048:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 800404e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8004054:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	2201      	movs	r2, #1
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	4a50      	ldr	r2, [pc, #320]	@ (80041a8 <HAL_ADC_Init+0x33c>)
 8004068:	4013      	ands	r3, r2
 800406a:	0019      	movs	r1, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	430a      	orrs	r2, r1
 8004074:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	23c0      	movs	r3, #192	@ 0xc0
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	429a      	cmp	r2, r3
 8004080:	d018      	beq.n	80040b4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004086:	2380      	movs	r3, #128	@ 0x80
 8004088:	05db      	lsls	r3, r3, #23
 800408a:	429a      	cmp	r2, r3
 800408c:	d012      	beq.n	80040b4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004092:	2380      	movs	r3, #128	@ 0x80
 8004094:	061b      	lsls	r3, r3, #24
 8004096:	429a      	cmp	r2, r3
 8004098:	d00c      	beq.n	80040b4 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800409a:	4b44      	ldr	r3, [pc, #272]	@ (80041ac <HAL_ADC_Init+0x340>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a44      	ldr	r2, [pc, #272]	@ (80041b0 <HAL_ADC_Init+0x344>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	0019      	movs	r1, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	23f0      	movs	r3, #240	@ 0xf0
 80040aa:	039b      	lsls	r3, r3, #14
 80040ac:	401a      	ands	r2, r3
 80040ae:	4b3f      	ldr	r3, [pc, #252]	@ (80041ac <HAL_ADC_Init+0x340>)
 80040b0:	430a      	orrs	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6818      	ldr	r0, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040bc:	001a      	movs	r2, r3
 80040be:	2100      	movs	r1, #0
 80040c0:	f7ff fd91 	bl	8003be6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040cc:	4939      	ldr	r1, [pc, #228]	@ (80041b4 <HAL_ADC_Init+0x348>)
 80040ce:	001a      	movs	r2, r3
 80040d0:	f7ff fd89 	bl	8003be6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d109      	bne.n	80040f0 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2110      	movs	r1, #16
 80040e8:	4249      	negs	r1, r1
 80040ea:	430a      	orrs	r2, r1
 80040ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80040ee:	e018      	b.n	8004122 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	2380      	movs	r3, #128	@ 0x80
 80040f6:	039b      	lsls	r3, r3, #14
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d112      	bne.n	8004122 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	3b01      	subs	r3, #1
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	221c      	movs	r2, #28
 800410c:	4013      	ands	r3, r2
 800410e:	2210      	movs	r2, #16
 8004110:	4252      	negs	r2, r2
 8004112:	409a      	lsls	r2, r3
 8004114:	0011      	movs	r1, r2
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2100      	movs	r1, #0
 8004128:	0018      	movs	r0, r3
 800412a:	f7ff fd79 	bl	8003c20 <LL_ADC_GetSamplingTimeCommonChannels>
 800412e:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004134:	429a      	cmp	r2, r3
 8004136:	d10b      	bne.n	8004150 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004142:	2203      	movs	r2, #3
 8004144:	4393      	bics	r3, r2
 8004146:	2201      	movs	r2, #1
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800414e:	e01c      	b.n	800418a <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004154:	2212      	movs	r2, #18
 8004156:	4393      	bics	r3, r2
 8004158:	2210      	movs	r2, #16
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004164:	2201      	movs	r2, #1
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800416c:	231f      	movs	r3, #31
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	2201      	movs	r2, #1
 8004172:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004174:	e009      	b.n	800418a <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417a:	2210      	movs	r2, #16
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004182:	231f      	movs	r3, #31
 8004184:	18fb      	adds	r3, r7, r3
 8004186:	2201      	movs	r2, #1
 8004188:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800418a:	231f      	movs	r3, #31
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	781b      	ldrb	r3, [r3, #0]
}
 8004190:	0018      	movs	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	b008      	add	sp, #32
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000028 	.word	0x20000028
 800419c:	00030d40 	.word	0x00030d40
 80041a0:	fffffefd 	.word	0xfffffefd
 80041a4:	ffde0201 	.word	0xffde0201
 80041a8:	1ffffc02 	.word	0x1ffffc02
 80041ac:	40012708 	.word	0x40012708
 80041b0:	ffc3ffff 	.word	0xffc3ffff
 80041b4:	7fffff04 	.word	0x7fffff04

080041b8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80041b8:	b5b0      	push	{r4, r5, r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	0018      	movs	r0, r3
 80041ca:	f7ff fe3d 	bl	8003e48 <LL_ADC_REG_IsConversionOngoing>
 80041ce:	1e03      	subs	r3, r0, #0
 80041d0:	d16c      	bne.n	80042ac <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2254      	movs	r2, #84	@ 0x54
 80041d6:	5c9b      	ldrb	r3, [r3, r2]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_ADC_Start_DMA+0x28>
 80041dc:	2302      	movs	r3, #2
 80041de:	e06c      	b.n	80042ba <HAL_ADC_Start_DMA+0x102>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2254      	movs	r2, #84	@ 0x54
 80041e4:	2101      	movs	r1, #1
 80041e6:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	4013      	ands	r3, r2
 80041f2:	d113      	bne.n	800421c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	0018      	movs	r0, r3
 80041fa:	f7ff fdf1 	bl	8003de0 <LL_ADC_IsEnabled>
 80041fe:	1e03      	subs	r3, r0, #0
 8004200:	d004      	beq.n	800420c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	0018      	movs	r0, r3
 8004208:	f7ff fdd8 	bl	8003dbc <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2101      	movs	r1, #1
 8004218:	430a      	orrs	r2, r1
 800421a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800421c:	2517      	movs	r5, #23
 800421e:	197c      	adds	r4, r7, r5
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	0018      	movs	r0, r3
 8004224:	f000 fba6 	bl	8004974 <ADC_Enable>
 8004228:	0003      	movs	r3, r0
 800422a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800422c:	002c      	movs	r4, r5
 800422e:	193b      	adds	r3, r7, r4
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d13e      	bne.n	80042b4 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800423a:	4a22      	ldr	r2, [pc, #136]	@ (80042c4 <HAL_ADC_Start_DMA+0x10c>)
 800423c:	4013      	ands	r3, r2
 800423e:	2280      	movs	r2, #128	@ 0x80
 8004240:	0052      	lsls	r2, r2, #1
 8004242:	431a      	orrs	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004252:	4a1d      	ldr	r2, [pc, #116]	@ (80042c8 <HAL_ADC_Start_DMA+0x110>)
 8004254:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800425a:	4a1c      	ldr	r2, [pc, #112]	@ (80042cc <HAL_ADC_Start_DMA+0x114>)
 800425c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004262:	4a1b      	ldr	r2, [pc, #108]	@ (80042d0 <HAL_ADC_Start_DMA+0x118>)
 8004264:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	221c      	movs	r2, #28
 800426c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2254      	movs	r2, #84	@ 0x54
 8004272:	2100      	movs	r1, #0
 8004274:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2110      	movs	r1, #16
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3340      	adds	r3, #64	@ 0x40
 8004290:	0019      	movs	r1, r3
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	193c      	adds	r4, r7, r4
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f000 ffea 	bl	8005270 <HAL_DMA_Start_IT>
 800429c:	0003      	movs	r3, r0
 800429e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	0018      	movs	r0, r3
 80042a6:	f7ff fdbd 	bl	8003e24 <LL_ADC_REG_StartConversion>
 80042aa:	e003      	b.n	80042b4 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80042ac:	2317      	movs	r3, #23
 80042ae:	18fb      	adds	r3, r7, r3
 80042b0:	2202      	movs	r2, #2
 80042b2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80042b4:	2317      	movs	r3, #23
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	781b      	ldrb	r3, [r3, #0]
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b006      	add	sp, #24
 80042c0:	bdb0      	pop	{r4, r5, r7, pc}
 80042c2:	46c0      	nop			@ (mov r8, r8)
 80042c4:	fffff0fe 	.word	0xfffff0fe
 80042c8:	08004b21 	.word	0x08004b21
 80042cc:	08004be9 	.word	0x08004be9
 80042d0:	08004c07 	.word	0x08004c07

080042d4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	2202      	movs	r2, #2
 80042f4:	4013      	ands	r3, r2
 80042f6:	d017      	beq.n	8004328 <HAL_ADC_IRQHandler+0x54>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2202      	movs	r2, #2
 80042fc:	4013      	ands	r3, r2
 80042fe:	d013      	beq.n	8004328 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004304:	2210      	movs	r2, #16
 8004306:	4013      	ands	r3, r2
 8004308:	d106      	bne.n	8004318 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430e:	2280      	movs	r2, #128	@ 0x80
 8004310:	0112      	lsls	r2, r2, #4
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	0018      	movs	r0, r3
 800431c:	f000 fe30 	bl	8004f80 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2202      	movs	r2, #2
 8004326:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	2204      	movs	r2, #4
 800432c:	4013      	ands	r3, r2
 800432e:	d003      	beq.n	8004338 <HAL_ADC_IRQHandler+0x64>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2204      	movs	r2, #4
 8004334:	4013      	ands	r3, r2
 8004336:	d107      	bne.n	8004348 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	2208      	movs	r2, #8
 800433c:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800433e:	d04d      	beq.n	80043dc <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2208      	movs	r2, #8
 8004344:	4013      	ands	r3, r2
 8004346:	d049      	beq.n	80043dc <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434c:	2210      	movs	r2, #16
 800434e:	4013      	ands	r3, r2
 8004350:	d106      	bne.n	8004360 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004356:	2280      	movs	r2, #128	@ 0x80
 8004358:	0092      	lsls	r2, r2, #2
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	0018      	movs	r0, r3
 8004366:	f7ff fc72 	bl	8003c4e <LL_ADC_REG_IsTriggerSourceSWStart>
 800436a:	1e03      	subs	r3, r0, #0
 800436c:	d02e      	beq.n	80043cc <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	7e9b      	ldrb	r3, [r3, #26]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d12a      	bne.n	80043cc <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2208      	movs	r2, #8
 800437e:	4013      	ands	r3, r2
 8004380:	2b08      	cmp	r3, #8
 8004382:	d123      	bne.n	80043cc <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	0018      	movs	r0, r3
 800438a:	f7ff fd5d 	bl	8003e48 <LL_ADC_REG_IsConversionOngoing>
 800438e:	1e03      	subs	r3, r0, #0
 8004390:	d110      	bne.n	80043b4 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	210c      	movs	r1, #12
 800439e:	438a      	bics	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a6:	4a6f      	ldr	r2, [pc, #444]	@ (8004564 <HAL_ADC_IRQHandler+0x290>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	2201      	movs	r2, #1
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80043b2:	e00b      	b.n	80043cc <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b8:	2220      	movs	r2, #32
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c4:	2201      	movs	r2, #1
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	0018      	movs	r0, r3
 80043d0:	f000 f8ca 	bl	8004568 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	220c      	movs	r2, #12
 80043da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	2280      	movs	r2, #128	@ 0x80
 80043e0:	4013      	ands	r3, r2
 80043e2:	d012      	beq.n	800440a <HAL_ADC_IRQHandler+0x136>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2280      	movs	r2, #128	@ 0x80
 80043e8:	4013      	ands	r3, r2
 80043ea:	d00e      	beq.n	800440a <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f0:	2280      	movs	r2, #128	@ 0x80
 80043f2:	0252      	lsls	r2, r2, #9
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	0018      	movs	r0, r3
 80043fe:	f000 f8c3 	bl	8004588 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2280      	movs	r2, #128	@ 0x80
 8004408:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	2380      	movs	r3, #128	@ 0x80
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	4013      	ands	r3, r2
 8004412:	d014      	beq.n	800443e <HAL_ADC_IRQHandler+0x16a>
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	2380      	movs	r3, #128	@ 0x80
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	4013      	ands	r3, r2
 800441c:	d00f      	beq.n	800443e <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004422:	2280      	movs	r2, #128	@ 0x80
 8004424:	0292      	lsls	r2, r2, #10
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	0018      	movs	r0, r3
 8004430:	f000 fd96 	bl	8004f60 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2280      	movs	r2, #128	@ 0x80
 800443a:	0052      	lsls	r2, r2, #1
 800443c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	2380      	movs	r3, #128	@ 0x80
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4013      	ands	r3, r2
 8004446:	d014      	beq.n	8004472 <HAL_ADC_IRQHandler+0x19e>
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	2380      	movs	r3, #128	@ 0x80
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4013      	ands	r3, r2
 8004450:	d00f      	beq.n	8004472 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004456:	2280      	movs	r2, #128	@ 0x80
 8004458:	02d2      	lsls	r2, r2, #11
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	0018      	movs	r0, r3
 8004464:	f000 fd84 	bl	8004f70 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2280      	movs	r2, #128	@ 0x80
 800446e:	0092      	lsls	r2, r2, #2
 8004470:	601a      	str	r2, [r3, #0]
  }
  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2210      	movs	r2, #16
 8004476:	4013      	ands	r3, r2
 8004478:	d02b      	beq.n	80044d2 <HAL_ADC_IRQHandler+0x1fe>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2210      	movs	r2, #16
 800447e:	4013      	ands	r3, r2
 8004480:	d027      	beq.n	80044d2 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004486:	2b00      	cmp	r3, #0
 8004488:	d102      	bne.n	8004490 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 800448a:	2301      	movs	r3, #1
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	e008      	b.n	80044a2 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	0018      	movs	r0, r3
 8004496:	f7ff fc2e 	bl	8003cf6 <LL_ADC_REG_GetDMATransfer>
 800449a:	1e03      	subs	r3, r0, #0
 800449c:	d001      	beq.n	80044a2 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800449e:	2301      	movs	r3, #1
 80044a0:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d110      	bne.n	80044ca <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ac:	2280      	movs	r2, #128	@ 0x80
 80044ae:	00d2      	lsls	r2, r2, #3
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ba:	2202      	movs	r2, #2
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	0018      	movs	r0, r3
 80044c6:	f000 f867 	bl	8004598 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2210      	movs	r2, #16
 80044d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	2201      	movs	r2, #1
 80044d6:	4013      	ands	r3, r2
 80044d8:	d01a      	beq.n	8004510 <HAL_ADC_IRQHandler+0x23c>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2201      	movs	r2, #1
 80044de:	4013      	ands	r3, r2
 80044e0:	d016      	beq.n	8004510 <HAL_ADC_IRQHandler+0x23c>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e6:	2210      	movs	r2, #16
 80044e8:	4013      	ands	r3, r2
 80044ea:	d105      	bne.n	80044f8 <HAL_ADC_IRQHandler+0x224>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f0:	2201      	movs	r2, #1
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	0018      	movs	r0, r3
 80044fc:	f000 f85c 	bl	80045b8 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2101      	movs	r1, #1
 800450c:	438a      	bics	r2, r1
 800450e:	605a      	str	r2, [r3, #4]
  }

  /* ========== Check End of Calibration flag ========== */
  if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	2380      	movs	r3, #128	@ 0x80
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	4013      	ands	r3, r2
 8004518:	d00d      	beq.n	8004536 <HAL_ADC_IRQHandler+0x262>
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	2380      	movs	r3, #128	@ 0x80
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	4013      	ands	r3, r2
 8004522:	d008      	beq.n	8004536 <HAL_ADC_IRQHandler+0x262>
  {
    /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->CalibrationCpltCallback(hadc);
#else
    HAL_ADC_CalibrationCpltCallback(hadc);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	0018      	movs	r0, r3
 8004528:	f000 f83e 	bl	80045a8 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear end of calibration flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2280      	movs	r2, #128	@ 0x80
 8004532:	0112      	lsls	r2, r2, #4
 8004534:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	2380      	movs	r3, #128	@ 0x80
 800453a:	019b      	lsls	r3, r3, #6
 800453c:	4013      	ands	r3, r2
 800453e:	d00d      	beq.n	800455c <HAL_ADC_IRQHandler+0x288>
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	2380      	movs	r3, #128	@ 0x80
 8004544:	019b      	lsls	r3, r3, #6
 8004546:	4013      	ands	r3, r2
 8004548:	d008      	beq.n	800455c <HAL_ADC_IRQHandler+0x288>
  {
    /* Channel configuration ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ChannelConfigReadyCallback(hadc);
#else
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	0018      	movs	r0, r3
 800454e:	f000 fd1f 	bl	8004f90 <HAL_ADCEx_ChannelConfigReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2280      	movs	r2, #128	@ 0x80
 8004558:	0192      	lsls	r2, r2, #6
 800455a:	601a      	str	r2, [r3, #0]
  }
}
 800455c:	46c0      	nop			@ (mov r8, r8)
 800455e:	46bd      	mov	sp, r7
 8004560:	b006      	add	sp, #24
 8004562:	bd80      	pop	{r7, pc}
 8004564:	fffffefe 	.word	0xfffffefe

08004568 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004570:	46c0      	nop			@ (mov r8, r8)
 8004572:	46bd      	mov	sp, r7
 8004574:	b002      	add	sp, #8
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004580:	46c0      	nop			@ (mov r8, r8)
 8004582:	46bd      	mov	sp, r7
 8004584:	b002      	add	sp, #8
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004590:	46c0      	nop			@ (mov r8, r8)
 8004592:	46bd      	mov	sp, r7
 8004594:	b002      	add	sp, #8
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80045a0:	46c0      	nop			@ (mov r8, r8)
 80045a2:	46bd      	mov	sp, r7
 80045a4:	b002      	add	sp, #8
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 80045b0:	46c0      	nop			@ (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b002      	add	sp, #8
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 80045c0:	46c0      	nop			@ (mov r8, r8)
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b002      	add	sp, #8
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045d2:	2317      	movs	r3, #23
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	2200      	movs	r2, #0
 80045d8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2254      	movs	r2, #84	@ 0x54
 80045e2:	5c9b      	ldrb	r3, [r3, r2]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x24>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e1be      	b.n	800496a <HAL_ADC_ConfigChannel+0x3a2>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2254      	movs	r2, #84	@ 0x54
 80045f0:	2101      	movs	r1, #1
 80045f2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	0018      	movs	r0, r3
 80045fa:	f7ff fc25 	bl	8003e48 <LL_ADC_REG_IsConversionOngoing>
 80045fe:	1e03      	subs	r3, r0, #0
 8004600:	d000      	beq.n	8004604 <HAL_ADC_ConfigChannel+0x3c>
 8004602:	e1a1      	b.n	8004948 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d100      	bne.n	800460e <HAL_ADC_ConfigChannel+0x46>
 800460c:	e152      	b.n	80048b4 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	2380      	movs	r3, #128	@ 0x80
 8004614:	061b      	lsls	r3, r3, #24
 8004616:	429a      	cmp	r2, r3
 8004618:	d004      	beq.n	8004624 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800461e:	4ac2      	ldr	r2, [pc, #776]	@ (8004928 <HAL_ADC_ConfigChannel+0x360>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d108      	bne.n	8004636 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	0019      	movs	r1, r3
 800462e:	0010      	movs	r0, r2
 8004630:	f7ff fb3e 	bl	8003cb0 <LL_ADC_REG_SetSequencerChAdd>
 8004634:	e0ed      	b.n	8004812 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	211f      	movs	r1, #31
 8004640:	400b      	ands	r3, r1
 8004642:	210f      	movs	r1, #15
 8004644:	4099      	lsls	r1, r3
 8004646:	000b      	movs	r3, r1
 8004648:	43db      	mvns	r3, r3
 800464a:	4013      	ands	r3, r2
 800464c:	0019      	movs	r1, r3
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	025b      	lsls	r3, r3, #9
 8004654:	0a5b      	lsrs	r3, r3, #9
 8004656:	d105      	bne.n	8004664 <HAL_ADC_ConfigChannel+0x9c>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	0e9b      	lsrs	r3, r3, #26
 800465e:	221f      	movs	r2, #31
 8004660:	4013      	ands	r3, r2
 8004662:	e0bc      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2201      	movs	r2, #1
 800466a:	4013      	ands	r3, r2
 800466c:	d000      	beq.n	8004670 <HAL_ADC_ConfigChannel+0xa8>
 800466e:	e0b5      	b.n	80047dc <HAL_ADC_ConfigChannel+0x214>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2202      	movs	r2, #2
 8004676:	4013      	ands	r3, r2
 8004678:	d000      	beq.n	800467c <HAL_ADC_ConfigChannel+0xb4>
 800467a:	e0ad      	b.n	80047d8 <HAL_ADC_ConfigChannel+0x210>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2204      	movs	r2, #4
 8004682:	4013      	ands	r3, r2
 8004684:	d000      	beq.n	8004688 <HAL_ADC_ConfigChannel+0xc0>
 8004686:	e0a5      	b.n	80047d4 <HAL_ADC_ConfigChannel+0x20c>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2208      	movs	r2, #8
 800468e:	4013      	ands	r3, r2
 8004690:	d000      	beq.n	8004694 <HAL_ADC_ConfigChannel+0xcc>
 8004692:	e09d      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x208>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2210      	movs	r2, #16
 800469a:	4013      	ands	r3, r2
 800469c:	d000      	beq.n	80046a0 <HAL_ADC_ConfigChannel+0xd8>
 800469e:	e095      	b.n	80047cc <HAL_ADC_ConfigChannel+0x204>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2220      	movs	r2, #32
 80046a6:	4013      	ands	r3, r2
 80046a8:	d000      	beq.n	80046ac <HAL_ADC_ConfigChannel+0xe4>
 80046aa:	e08d      	b.n	80047c8 <HAL_ADC_ConfigChannel+0x200>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2240      	movs	r2, #64	@ 0x40
 80046b2:	4013      	ands	r3, r2
 80046b4:	d000      	beq.n	80046b8 <HAL_ADC_ConfigChannel+0xf0>
 80046b6:	e085      	b.n	80047c4 <HAL_ADC_ConfigChannel+0x1fc>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2280      	movs	r2, #128	@ 0x80
 80046be:	4013      	ands	r3, r2
 80046c0:	d000      	beq.n	80046c4 <HAL_ADC_ConfigChannel+0xfc>
 80046c2:	e07d      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x1f8>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	2380      	movs	r3, #128	@ 0x80
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	4013      	ands	r3, r2
 80046ce:	d000      	beq.n	80046d2 <HAL_ADC_ConfigChannel+0x10a>
 80046d0:	e074      	b.n	80047bc <HAL_ADC_ConfigChannel+0x1f4>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	2380      	movs	r3, #128	@ 0x80
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4013      	ands	r3, r2
 80046dc:	d000      	beq.n	80046e0 <HAL_ADC_ConfigChannel+0x118>
 80046de:	e06b      	b.n	80047b8 <HAL_ADC_ConfigChannel+0x1f0>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	2380      	movs	r3, #128	@ 0x80
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	4013      	ands	r3, r2
 80046ea:	d000      	beq.n	80046ee <HAL_ADC_ConfigChannel+0x126>
 80046ec:	e062      	b.n	80047b4 <HAL_ADC_ConfigChannel+0x1ec>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	2380      	movs	r3, #128	@ 0x80
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	4013      	ands	r3, r2
 80046f8:	d000      	beq.n	80046fc <HAL_ADC_ConfigChannel+0x134>
 80046fa:	e059      	b.n	80047b0 <HAL_ADC_ConfigChannel+0x1e8>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	2380      	movs	r3, #128	@ 0x80
 8004702:	015b      	lsls	r3, r3, #5
 8004704:	4013      	ands	r3, r2
 8004706:	d151      	bne.n	80047ac <HAL_ADC_ConfigChannel+0x1e4>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	2380      	movs	r3, #128	@ 0x80
 800470e:	019b      	lsls	r3, r3, #6
 8004710:	4013      	ands	r3, r2
 8004712:	d149      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x1e0>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	2380      	movs	r3, #128	@ 0x80
 800471a:	01db      	lsls	r3, r3, #7
 800471c:	4013      	ands	r3, r2
 800471e:	d141      	bne.n	80047a4 <HAL_ADC_ConfigChannel+0x1dc>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	2380      	movs	r3, #128	@ 0x80
 8004726:	021b      	lsls	r3, r3, #8
 8004728:	4013      	ands	r3, r2
 800472a:	d139      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x1d8>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	2380      	movs	r3, #128	@ 0x80
 8004732:	025b      	lsls	r3, r3, #9
 8004734:	4013      	ands	r3, r2
 8004736:	d131      	bne.n	800479c <HAL_ADC_ConfigChannel+0x1d4>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	2380      	movs	r3, #128	@ 0x80
 800473e:	029b      	lsls	r3, r3, #10
 8004740:	4013      	ands	r3, r2
 8004742:	d129      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x1d0>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	2380      	movs	r3, #128	@ 0x80
 800474a:	02db      	lsls	r3, r3, #11
 800474c:	4013      	ands	r3, r2
 800474e:	d121      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x1cc>
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	2380      	movs	r3, #128	@ 0x80
 8004756:	031b      	lsls	r3, r3, #12
 8004758:	4013      	ands	r3, r2
 800475a:	d119      	bne.n	8004790 <HAL_ADC_ConfigChannel+0x1c8>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	2380      	movs	r3, #128	@ 0x80
 8004762:	035b      	lsls	r3, r3, #13
 8004764:	4013      	ands	r3, r2
 8004766:	d111      	bne.n	800478c <HAL_ADC_ConfigChannel+0x1c4>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	2380      	movs	r3, #128	@ 0x80
 800476e:	039b      	lsls	r3, r3, #14
 8004770:	4013      	ands	r3, r2
 8004772:	d109      	bne.n	8004788 <HAL_ADC_ConfigChannel+0x1c0>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	2380      	movs	r3, #128	@ 0x80
 800477a:	03db      	lsls	r3, r3, #15
 800477c:	4013      	ands	r3, r2
 800477e:	d001      	beq.n	8004784 <HAL_ADC_ConfigChannel+0x1bc>
 8004780:	2316      	movs	r3, #22
 8004782:	e02c      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 8004784:	2300      	movs	r3, #0
 8004786:	e02a      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 8004788:	2315      	movs	r3, #21
 800478a:	e028      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 800478c:	2314      	movs	r3, #20
 800478e:	e026      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 8004790:	2313      	movs	r3, #19
 8004792:	e024      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 8004794:	2312      	movs	r3, #18
 8004796:	e022      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 8004798:	2311      	movs	r3, #17
 800479a:	e020      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 800479c:	2310      	movs	r3, #16
 800479e:	e01e      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 80047a0:	230f      	movs	r3, #15
 80047a2:	e01c      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 80047a4:	230e      	movs	r3, #14
 80047a6:	e01a      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 80047a8:	230d      	movs	r3, #13
 80047aa:	e018      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 80047ac:	230c      	movs	r3, #12
 80047ae:	e016      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 80047b0:	230b      	movs	r3, #11
 80047b2:	e014      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 80047b4:	230a      	movs	r3, #10
 80047b6:	e012      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 80047b8:	2309      	movs	r3, #9
 80047ba:	e010      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 80047bc:	2308      	movs	r3, #8
 80047be:	e00e      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 80047c0:	2307      	movs	r3, #7
 80047c2:	e00c      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 80047c4:	2306      	movs	r3, #6
 80047c6:	e00a      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 80047c8:	2305      	movs	r3, #5
 80047ca:	e008      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 80047cc:	2304      	movs	r3, #4
 80047ce:	e006      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 80047d0:	2303      	movs	r3, #3
 80047d2:	e004      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e002      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 80047d8:	2301      	movs	r3, #1
 80047da:	e000      	b.n	80047de <HAL_ADC_ConfigChannel+0x216>
 80047dc:	2300      	movs	r3, #0
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	6852      	ldr	r2, [r2, #4]
 80047e2:	201f      	movs	r0, #31
 80047e4:	4002      	ands	r2, r0
 80047e6:	4093      	lsls	r3, r2
 80047e8:	000a      	movs	r2, r1
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	089b      	lsrs	r3, r3, #2
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d808      	bhi.n	8004812 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	6859      	ldr	r1, [r3, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	001a      	movs	r2, r3
 800480e:	f7ff fa2f 	bl	8003c70 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	6819      	ldr	r1, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	001a      	movs	r2, r3
 8004820:	f7ff fa76 	bl	8003d10 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	db00      	blt.n	800482e <HAL_ADC_ConfigChannel+0x266>
 800482c:	e096      	b.n	800495c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800482e:	4b3f      	ldr	r3, [pc, #252]	@ (800492c <HAL_ADC_ConfigChannel+0x364>)
 8004830:	0018      	movs	r0, r3
 8004832:	f7ff f9cb 	bl	8003bcc <LL_ADC_GetCommonPathInternalCh>
 8004836:	0003      	movs	r3, r0
 8004838:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a3c      	ldr	r2, [pc, #240]	@ (8004930 <HAL_ADC_ConfigChannel+0x368>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d123      	bne.n	800488c <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	2380      	movs	r3, #128	@ 0x80
 8004848:	041b      	lsls	r3, r3, #16
 800484a:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800484c:	d11e      	bne.n	800488c <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2280      	movs	r2, #128	@ 0x80
 8004852:	0412      	lsls	r2, r2, #16
 8004854:	4313      	orrs	r3, r2
 8004856:	4a35      	ldr	r2, [pc, #212]	@ (800492c <HAL_ADC_ConfigChannel+0x364>)
 8004858:	0019      	movs	r1, r3
 800485a:	0010      	movs	r0, r2
 800485c:	f7ff f9a2 	bl	8003ba4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8004860:	4b34      	ldr	r3, [pc, #208]	@ (8004934 <HAL_ADC_ConfigChannel+0x36c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4934      	ldr	r1, [pc, #208]	@ (8004938 <HAL_ADC_ConfigChannel+0x370>)
 8004866:	0018      	movs	r0, r3
 8004868:	f7fb fc4e 	bl	8000108 <__udivsi3>
 800486c:	0003      	movs	r3, r0
 800486e:	001a      	movs	r2, r3
 8004870:	0013      	movs	r3, r2
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	189b      	adds	r3, r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	3301      	adds	r3, #1
 800487a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800487c:	e002      	b.n	8004884 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3b01      	subs	r3, #1
 8004882:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f9      	bne.n	800487e <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800488a:	e067      	b.n	800495c <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a2a      	ldr	r2, [pc, #168]	@ (800493c <HAL_ADC_ConfigChannel+0x374>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d162      	bne.n	800495c <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	2380      	movs	r3, #128	@ 0x80
 800489a:	03db      	lsls	r3, r3, #15
 800489c:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800489e:	d15d      	bne.n	800495c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	2280      	movs	r2, #128	@ 0x80
 80048a4:	03d2      	lsls	r2, r2, #15
 80048a6:	4313      	orrs	r3, r2
 80048a8:	4a20      	ldr	r2, [pc, #128]	@ (800492c <HAL_ADC_ConfigChannel+0x364>)
 80048aa:	0019      	movs	r1, r3
 80048ac:	0010      	movs	r0, r2
 80048ae:	f7ff f979 	bl	8003ba4 <LL_ADC_SetCommonPathInternalCh>
 80048b2:	e053      	b.n	800495c <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	2380      	movs	r3, #128	@ 0x80
 80048ba:	061b      	lsls	r3, r3, #24
 80048bc:	429a      	cmp	r2, r3
 80048be:	d004      	beq.n	80048ca <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80048c4:	4a18      	ldr	r2, [pc, #96]	@ (8004928 <HAL_ADC_ConfigChannel+0x360>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d107      	bne.n	80048da <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	0019      	movs	r1, r3
 80048d4:	0010      	movs	r0, r2
 80048d6:	f7ff f9fc 	bl	8003cd2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	da3c      	bge.n	800495c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048e2:	4b12      	ldr	r3, [pc, #72]	@ (800492c <HAL_ADC_ConfigChannel+0x364>)
 80048e4:	0018      	movs	r0, r3
 80048e6:	f7ff f971 	bl	8003bcc <LL_ADC_GetCommonPathInternalCh>
 80048ea:	0003      	movs	r3, r0
 80048ec:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a0f      	ldr	r2, [pc, #60]	@ (8004930 <HAL_ADC_ConfigChannel+0x368>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d108      	bne.n	800490a <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	4a11      	ldr	r2, [pc, #68]	@ (8004940 <HAL_ADC_ConfigChannel+0x378>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	4a0b      	ldr	r2, [pc, #44]	@ (800492c <HAL_ADC_ConfigChannel+0x364>)
 8004900:	0019      	movs	r1, r3
 8004902:	0010      	movs	r0, r2
 8004904:	f7ff f94e 	bl	8003ba4 <LL_ADC_SetCommonPathInternalCh>
 8004908:	e028      	b.n	800495c <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a0b      	ldr	r2, [pc, #44]	@ (800493c <HAL_ADC_ConfigChannel+0x374>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d123      	bne.n	800495c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	4a0b      	ldr	r2, [pc, #44]	@ (8004944 <HAL_ADC_ConfigChannel+0x37c>)
 8004918:	4013      	ands	r3, r2
 800491a:	4a04      	ldr	r2, [pc, #16]	@ (800492c <HAL_ADC_ConfigChannel+0x364>)
 800491c:	0019      	movs	r1, r3
 800491e:	0010      	movs	r0, r2
 8004920:	f7ff f940 	bl	8003ba4 <LL_ADC_SetCommonPathInternalCh>
 8004924:	e01a      	b.n	800495c <HAL_ADC_ConfigChannel+0x394>
 8004926:	46c0      	nop			@ (mov r8, r8)
 8004928:	80000004 	.word	0x80000004
 800492c:	40012708 	.word	0x40012708
 8004930:	a4000200 	.word	0xa4000200
 8004934:	20000028 	.word	0x20000028
 8004938:	00030d40 	.word	0x00030d40
 800493c:	a8000400 	.word	0xa8000400
 8004940:	ff7fffff 	.word	0xff7fffff
 8004944:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494c:	2220      	movs	r2, #32
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004954:	2317      	movs	r3, #23
 8004956:	18fb      	adds	r3, r7, r3
 8004958:	2201      	movs	r2, #1
 800495a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2254      	movs	r2, #84	@ 0x54
 8004960:	2100      	movs	r1, #0
 8004962:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8004964:	2317      	movs	r3, #23
 8004966:	18fb      	adds	r3, r7, r3
 8004968:	781b      	ldrb	r3, [r3, #0]
}
 800496a:	0018      	movs	r0, r3
 800496c:	46bd      	mov	sp, r7
 800496e:	b006      	add	sp, #24
 8004970:	bd80      	pop	{r7, pc}
 8004972:	46c0      	nop			@ (mov r8, r8)

08004974 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800497c:	2300      	movs	r3, #0
 800497e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	0018      	movs	r0, r3
 8004986:	f7ff fa2b 	bl	8003de0 <LL_ADC_IsEnabled>
 800498a:	1e03      	subs	r3, r0, #0
 800498c:	d162      	bne.n	8004a54 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	4a32      	ldr	r2, [pc, #200]	@ (8004a60 <ADC_Enable+0xec>)
 8004996:	4013      	ands	r3, r2
 8004998:	d00d      	beq.n	80049b6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800499e:	2210      	movs	r2, #16
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049aa:	2201      	movs	r2, #1
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e04f      	b.n	8004a56 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	0018      	movs	r0, r3
 80049bc:	f7ff f9ec 	bl	8003d98 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80049c0:	4b28      	ldr	r3, [pc, #160]	@ (8004a64 <ADC_Enable+0xf0>)
 80049c2:	0018      	movs	r0, r3
 80049c4:	f7ff f902 	bl	8003bcc <LL_ADC_GetCommonPathInternalCh>
 80049c8:	0002      	movs	r2, r0
 80049ca:	2380      	movs	r3, #128	@ 0x80
 80049cc:	041b      	lsls	r3, r3, #16
 80049ce:	4013      	ands	r3, r2
 80049d0:	d00f      	beq.n	80049f2 <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049d2:	4b25      	ldr	r3, [pc, #148]	@ (8004a68 <ADC_Enable+0xf4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4925      	ldr	r1, [pc, #148]	@ (8004a6c <ADC_Enable+0xf8>)
 80049d8:	0018      	movs	r0, r3
 80049da:	f7fb fb95 	bl	8000108 <__udivsi3>
 80049de:	0003      	movs	r3, r0
 80049e0:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80049e2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049e4:	e002      	b.n	80049ec <ADC_Enable+0x78>
      {
        wait_loop_index--;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1f9      	bne.n	80049e6 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	7e5b      	ldrb	r3, [r3, #25]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d02c      	beq.n	8004a54 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80049fa:	f7ff f8a5 	bl	8003b48 <HAL_GetTick>
 80049fe:	0003      	movs	r3, r0
 8004a00:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a02:	e020      	b.n	8004a46 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f7ff f9e9 	bl	8003de0 <LL_ADC_IsEnabled>
 8004a0e:	1e03      	subs	r3, r0, #0
 8004a10:	d104      	bne.n	8004a1c <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	0018      	movs	r0, r3
 8004a18:	f7ff f9be 	bl	8003d98 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a1c:	f7ff f894 	bl	8003b48 <HAL_GetTick>
 8004a20:	0002      	movs	r2, r0
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d90d      	bls.n	8004a46 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a2e:	2210      	movs	r2, #16
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e007      	b.n	8004a56 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d1d7      	bne.n	8004a04 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	0018      	movs	r0, r3
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b004      	add	sp, #16
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	46c0      	nop			@ (mov r8, r8)
 8004a60:	80000017 	.word	0x80000017
 8004a64:	40012708 	.word	0x40012708
 8004a68:	20000028 	.word	0x20000028
 8004a6c:	00030d40 	.word	0x00030d40

08004a70 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f7ff f9c0 	bl	8003e02 <LL_ADC_IsDisableOngoing>
 8004a82:	0003      	movs	r3, r0
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	f7ff f9a8 	bl	8003de0 <LL_ADC_IsEnabled>
 8004a90:	1e03      	subs	r3, r0, #0
 8004a92:	d040      	beq.n	8004b16 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d13d      	bne.n	8004b16 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2205      	movs	r2, #5
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d10d      	bne.n	8004ac4 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	0018      	movs	r0, r3
 8004aae:	f7ff f985 	bl	8003dbc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2203      	movs	r2, #3
 8004ab8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004aba:	f7ff f845 	bl	8003b48 <HAL_GetTick>
 8004abe:	0003      	movs	r3, r0
 8004ac0:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ac2:	e022      	b.n	8004b0a <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac8:	2210      	movs	r2, #16
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e01b      	b.n	8004b18 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ae0:	f7ff f832 	bl	8003b48 <HAL_GetTick>
 8004ae4:	0002      	movs	r2, r0
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d90d      	bls.n	8004b0a <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af2:	2210      	movs	r2, #16
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004afe:	2201      	movs	r2, #1
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e006      	b.n	8004b18 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	2201      	movs	r2, #1
 8004b12:	4013      	ands	r3, r2
 8004b14:	d1e4      	bne.n	8004ae0 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	0018      	movs	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	b004      	add	sp, #16
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b32:	2250      	movs	r2, #80	@ 0x50
 8004b34:	4013      	ands	r3, r2
 8004b36:	d141      	bne.n	8004bbc <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3c:	2280      	movs	r2, #128	@ 0x80
 8004b3e:	0092      	lsls	r2, r2, #2
 8004b40:	431a      	orrs	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	f7ff f87f 	bl	8003c4e <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b50:	1e03      	subs	r3, r0, #0
 8004b52:	d02e      	beq.n	8004bb2 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	7e9b      	ldrb	r3, [r3, #26]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d12a      	bne.n	8004bb2 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2208      	movs	r2, #8
 8004b64:	4013      	ands	r3, r2
 8004b66:	2b08      	cmp	r3, #8
 8004b68:	d123      	bne.n	8004bb2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f7ff f96a 	bl	8003e48 <LL_ADC_REG_IsConversionOngoing>
 8004b74:	1e03      	subs	r3, r0, #0
 8004b76:	d110      	bne.n	8004b9a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	210c      	movs	r1, #12
 8004b84:	438a      	bics	r2, r1
 8004b86:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b8c:	4a15      	ldr	r2, [pc, #84]	@ (8004be4 <ADC_DMAConvCplt+0xc4>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	2201      	movs	r2, #1
 8004b92:	431a      	orrs	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b98:	e00b      	b.n	8004bb2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004baa:	2201      	movs	r2, #1
 8004bac:	431a      	orrs	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f7ff fcd7 	bl	8004568 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004bba:	e00f      	b.n	8004bdc <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc0:	2210      	movs	r2, #16
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	d004      	beq.n	8004bd0 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f7ff fce5 	bl	8004598 <HAL_ADC_ErrorCallback>
}
 8004bce:	e005      	b.n	8004bdc <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	0010      	movs	r0, r2
 8004bda:	4798      	blx	r3
}
 8004bdc:	46c0      	nop			@ (mov r8, r8)
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b004      	add	sp, #16
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	fffffefe 	.word	0xfffffefe

08004be8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f7ff fcbd 	bl	8004578 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bfe:	46c0      	nop			@ (mov r8, r8)
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b004      	add	sp, #16
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c18:	2240      	movs	r2, #64	@ 0x40
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c24:	2204      	movs	r2, #4
 8004c26:	431a      	orrs	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f7ff fcb2 	bl	8004598 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c34:	46c0      	nop			@ (mov r8, r8)
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b004      	add	sp, #16
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <LL_ADC_GetCommonClock>:
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	23f0      	movs	r3, #240	@ 0xf0
 8004c4a:	039b      	lsls	r3, r3, #14
 8004c4c:	4013      	ands	r3, r2
}
 8004c4e:	0018      	movs	r0, r3
 8004c50:	46bd      	mov	sp, r7
 8004c52:	b002      	add	sp, #8
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <LL_ADC_GetClock>:
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b082      	sub	sp, #8
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	0f9b      	lsrs	r3, r3, #30
 8004c64:	079b      	lsls	r3, r3, #30
}
 8004c66:	0018      	movs	r0, r3
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	b002      	add	sp, #8
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <LL_ADC_SetCalibrationFactor>:
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b082      	sub	sp, #8
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	22b4      	movs	r2, #180	@ 0xb4
 8004c7c:	589b      	ldr	r3, [r3, r2]
 8004c7e:	227f      	movs	r2, #127	@ 0x7f
 8004c80:	4393      	bics	r3, r2
 8004c82:	001a      	movs	r2, r3
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	21b4      	movs	r1, #180	@ 0xb4
 8004c8c:	505a      	str	r2, [r3, r1]
}
 8004c8e:	46c0      	nop			@ (mov r8, r8)
 8004c90:	46bd      	mov	sp, r7
 8004c92:	b002      	add	sp, #8
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <LL_ADC_GetCalibrationFactor>:
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b082      	sub	sp, #8
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	22b4      	movs	r2, #180	@ 0xb4
 8004ca2:	589b      	ldr	r3, [r3, r2]
 8004ca4:	227f      	movs	r2, #127	@ 0x7f
 8004ca6:	4013      	ands	r3, r2
}
 8004ca8:	0018      	movs	r0, r3
 8004caa:	46bd      	mov	sp, r7
 8004cac:	b002      	add	sp, #8
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <LL_ADC_Enable>:
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	4a04      	ldr	r2, [pc, #16]	@ (8004cd0 <LL_ADC_Enable+0x20>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	609a      	str	r2, [r3, #8]
}
 8004cc8:	46c0      	nop			@ (mov r8, r8)
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	b002      	add	sp, #8
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	7fffffe8 	.word	0x7fffffe8

08004cd4 <LL_ADC_Disable>:
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	4a04      	ldr	r2, [pc, #16]	@ (8004cf4 <LL_ADC_Disable+0x20>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	609a      	str	r2, [r3, #8]
}
 8004cec:	46c0      	nop			@ (mov r8, r8)
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	b002      	add	sp, #8
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	7fffffe8 	.word	0x7fffffe8

08004cf8 <LL_ADC_IsEnabled>:
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	2201      	movs	r2, #1
 8004d06:	4013      	ands	r3, r2
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <LL_ADC_IsEnabled+0x18>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <LL_ADC_IsEnabled+0x1a>
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	0018      	movs	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b002      	add	sp, #8
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <LL_ADC_StartCalibration>:
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	4a05      	ldr	r2, [pc, #20]	@ (8004d40 <LL_ADC_StartCalibration+0x24>)
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2280      	movs	r2, #128	@ 0x80
 8004d2e:	0612      	lsls	r2, r2, #24
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	609a      	str	r2, [r3, #8]
}
 8004d36:	46c0      	nop			@ (mov r8, r8)
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	b002      	add	sp, #8
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	46c0      	nop			@ (mov r8, r8)
 8004d40:	7fffffe8 	.word	0x7fffffe8

08004d44 <LL_ADC_IsCalibrationOnGoing>:
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	0fdb      	lsrs	r3, r3, #31
 8004d52:	07da      	lsls	r2, r3, #31
 8004d54:	2380      	movs	r3, #128	@ 0x80
 8004d56:	061b      	lsls	r3, r3, #24
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d101      	bne.n	8004d60 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	0018      	movs	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b002      	add	sp, #8
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004d6c:	b590      	push	{r4, r7, lr}
 8004d6e:	b08b      	sub	sp, #44	@ 0x2c
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2254      	movs	r2, #84	@ 0x54
 8004d80:	5c9b      	ldrb	r3, [r3, r2]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_ADCEx_Calibration_Start+0x1e>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e0de      	b.n	8004f48 <HAL_ADCEx_Calibration_Start+0x1dc>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2254      	movs	r2, #84	@ 0x54
 8004d8e:	2101      	movs	r1, #1
 8004d90:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004d92:	231f      	movs	r3, #31
 8004d94:	18fc      	adds	r4, r7, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f7ff fe69 	bl	8004a70 <ADC_Disable>
 8004d9e:	0003      	movs	r3, r0
 8004da0:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	0018      	movs	r0, r3
 8004da8:	f7ff ffa6 	bl	8004cf8 <LL_ADC_IsEnabled>
 8004dac:	1e03      	subs	r3, r0, #0
 8004dae:	d000      	beq.n	8004db2 <HAL_ADCEx_Calibration_Start+0x46>
 8004db0:	e0bd      	b.n	8004f2e <HAL_ADCEx_Calibration_Start+0x1c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db6:	4a66      	ldr	r2, [pc, #408]	@ (8004f50 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	2202      	movs	r2, #2
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4a62      	ldr	r2, [pc, #392]	@ (8004f54 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8004dca:	4013      	ands	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	495f      	ldr	r1, [pc, #380]	@ (8004f58 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8004dda:	400a      	ands	r2, r1
 8004ddc:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004dde:	2300      	movs	r3, #0
 8004de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004de2:	e02e      	b.n	8004e42 <HAL_ADCEx_Calibration_Start+0xd6>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	0018      	movs	r0, r3
 8004dea:	f7ff ff97 	bl	8004d1c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004dee:	e015      	b.n	8004e1c <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	3301      	adds	r3, #1
 8004df4:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	23ae      	movs	r3, #174	@ 0xae
 8004dfa:	029b      	lsls	r3, r3, #10
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d30d      	bcc.n	8004e1c <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e04:	2212      	movs	r2, #18
 8004e06:	4393      	bics	r3, r2
 8004e08:	2210      	movs	r2, #16
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2254      	movs	r2, #84	@ 0x54
 8004e14:	2100      	movs	r1, #0
 8004e16:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e095      	b.n	8004f48 <HAL_ADCEx_Calibration_Start+0x1dc>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	0018      	movs	r0, r3
 8004e22:	f7ff ff8f 	bl	8004d44 <LL_ADC_IsCalibrationOnGoing>
 8004e26:	1e03      	subs	r3, r0, #0
 8004e28:	d1e2      	bne.n	8004df0 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f7ff ff31 	bl	8004c96 <LL_ADC_GetCalibrationFactor>
 8004e34:	0002      	movs	r2, r0
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	189b      	adds	r3, r3, r2
 8004e3a:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3e:	3301      	adds	r3, #1
 8004e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	2b07      	cmp	r3, #7
 8004e46:	d9cd      	bls.n	8004de4 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004e48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e4a:	6a38      	ldr	r0, [r7, #32]
 8004e4c:	f7fb f95c 	bl	8000108 <__udivsi3>
 8004e50:	0003      	movs	r3, r0
 8004e52:	623b      	str	r3, [r7, #32]
    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f7ff ff29 	bl	8004cb0 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	0018      	movs	r0, r3
 8004e64:	f7ff fef7 	bl	8004c56 <LL_ADC_GetClock>
 8004e68:	1e03      	subs	r3, r0, #0
 8004e6a:	d11b      	bne.n	8004ea4 <HAL_ADCEx_Calibration_Start+0x138>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e6c:	4b3b      	ldr	r3, [pc, #236]	@ (8004f5c <HAL_ADCEx_Calibration_Start+0x1f0>)
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f7ff fee4 	bl	8004c3c <LL_ADC_GetCommonClock>
 8004e74:	0003      	movs	r3, r0
 8004e76:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	23e0      	movs	r3, #224	@ 0xe0
 8004e7c:	035b      	lsls	r3, r3, #13
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d310      	bcc.n	8004ea4 <HAL_ADCEx_Calibration_Start+0x138>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	0c9b      	lsrs	r3, r3, #18
 8004e86:	3b03      	subs	r3, #3
 8004e88:	2201      	movs	r2, #1
 8004e8a:	409a      	lsls	r2, r3
 8004e8c:	0013      	movs	r3, r2
 8004e8e:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	085b      	lsrs	r3, r3, #1
 8004e94:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8004e96:	e002      	b.n	8004e9e <HAL_ADCEx_Calibration_Start+0x132>
        {
          delay_cpu_cycles--;
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1f9      	bne.n	8004e98 <HAL_ADCEx_Calibration_Start+0x12c>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6a3a      	ldr	r2, [r7, #32]
 8004eaa:	0011      	movs	r1, r2
 8004eac:	0018      	movs	r0, r3
 8004eae:	f7ff fede 	bl	8004c6e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	f7ff ff0c 	bl	8004cd4 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004ebc:	f7fe fe44 	bl	8003b48 <HAL_GetTick>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ec4:	e01b      	b.n	8004efe <HAL_ADCEx_Calibration_Start+0x192>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ec6:	f7fe fe3f 	bl	8003b48 <HAL_GetTick>
 8004eca:	0002      	movs	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d914      	bls.n	8004efe <HAL_ADCEx_Calibration_Start+0x192>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f7ff ff0d 	bl	8004cf8 <LL_ADC_IsEnabled>
 8004ede:	1e03      	subs	r3, r0, #0
 8004ee0:	d00d      	beq.n	8004efe <HAL_ADCEx_Calibration_Start+0x192>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee6:	2210      	movs	r2, #16
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e024      	b.n	8004f48 <HAL_ADCEx_Calibration_Start+0x1dc>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	0018      	movs	r0, r3
 8004f04:	f7ff fef8 	bl	8004cf8 <LL_ADC_IsEnabled>
 8004f08:	1e03      	subs	r3, r0, #0
 8004f0a:	d1dc      	bne.n	8004ec6 <HAL_ADCEx_Calibration_Start+0x15a>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68d9      	ldr	r1, [r3, #12]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f20:	2203      	movs	r2, #3
 8004f22:	4393      	bics	r3, r2
 8004f24:	2201      	movs	r2, #1
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004f2c:	e005      	b.n	8004f3a <HAL_ADCEx_Calibration_Start+0x1ce>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f32:	2210      	movs	r2, #16
 8004f34:	431a      	orrs	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2254      	movs	r2, #84	@ 0x54
 8004f3e:	2100      	movs	r1, #0
 8004f40:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8004f42:	231f      	movs	r3, #31
 8004f44:	18fb      	adds	r3, r7, r3
 8004f46:	781b      	ldrb	r3, [r3, #0]
}
 8004f48:	0018      	movs	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b00b      	add	sp, #44	@ 0x2c
 8004f4e:	bd90      	pop	{r4, r7, pc}
 8004f50:	fffffefd 	.word	0xfffffefd
 8004f54:	00008003 	.word	0x00008003
 8004f58:	ffff7ffc 	.word	0xffff7ffc
 8004f5c:	40012708 	.word	0x40012708

08004f60 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004f68:	46c0      	nop			@ (mov r8, r8)
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	b002      	add	sp, #8
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004f78:	46c0      	nop			@ (mov r8, r8)
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	b002      	add	sp, #8
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004f88:	46c0      	nop			@ (mov r8, r8)
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b002      	add	sp, #8
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8004f98:	46c0      	nop			@ (mov r8, r8)
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	b002      	add	sp, #8
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	0002      	movs	r2, r0
 8004fa8:	1dfb      	adds	r3, r7, #7
 8004faa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004fac:	1dfb      	adds	r3, r7, #7
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fb2:	d809      	bhi.n	8004fc8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fb4:	1dfb      	adds	r3, r7, #7
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	001a      	movs	r2, r3
 8004fba:	231f      	movs	r3, #31
 8004fbc:	401a      	ands	r2, r3
 8004fbe:	4b04      	ldr	r3, [pc, #16]	@ (8004fd0 <__NVIC_EnableIRQ+0x30>)
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	4091      	lsls	r1, r2
 8004fc4:	000a      	movs	r2, r1
 8004fc6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004fc8:	46c0      	nop			@ (mov r8, r8)
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	b002      	add	sp, #8
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	e000e100 	.word	0xe000e100

08004fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fd4:	b590      	push	{r4, r7, lr}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	0002      	movs	r2, r0
 8004fdc:	6039      	str	r1, [r7, #0]
 8004fde:	1dfb      	adds	r3, r7, #7
 8004fe0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004fe2:	1dfb      	adds	r3, r7, #7
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fe8:	d828      	bhi.n	800503c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004fea:	4a2f      	ldr	r2, [pc, #188]	@ (80050a8 <__NVIC_SetPriority+0xd4>)
 8004fec:	1dfb      	adds	r3, r7, #7
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	b25b      	sxtb	r3, r3
 8004ff2:	089b      	lsrs	r3, r3, #2
 8004ff4:	33c0      	adds	r3, #192	@ 0xc0
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	589b      	ldr	r3, [r3, r2]
 8004ffa:	1dfa      	adds	r2, r7, #7
 8004ffc:	7812      	ldrb	r2, [r2, #0]
 8004ffe:	0011      	movs	r1, r2
 8005000:	2203      	movs	r2, #3
 8005002:	400a      	ands	r2, r1
 8005004:	00d2      	lsls	r2, r2, #3
 8005006:	21ff      	movs	r1, #255	@ 0xff
 8005008:	4091      	lsls	r1, r2
 800500a:	000a      	movs	r2, r1
 800500c:	43d2      	mvns	r2, r2
 800500e:	401a      	ands	r2, r3
 8005010:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	019b      	lsls	r3, r3, #6
 8005016:	22ff      	movs	r2, #255	@ 0xff
 8005018:	401a      	ands	r2, r3
 800501a:	1dfb      	adds	r3, r7, #7
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	0018      	movs	r0, r3
 8005020:	2303      	movs	r3, #3
 8005022:	4003      	ands	r3, r0
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005028:	481f      	ldr	r0, [pc, #124]	@ (80050a8 <__NVIC_SetPriority+0xd4>)
 800502a:	1dfb      	adds	r3, r7, #7
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	b25b      	sxtb	r3, r3
 8005030:	089b      	lsrs	r3, r3, #2
 8005032:	430a      	orrs	r2, r1
 8005034:	33c0      	adds	r3, #192	@ 0xc0
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800503a:	e031      	b.n	80050a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800503c:	4a1b      	ldr	r2, [pc, #108]	@ (80050ac <__NVIC_SetPriority+0xd8>)
 800503e:	1dfb      	adds	r3, r7, #7
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	0019      	movs	r1, r3
 8005044:	230f      	movs	r3, #15
 8005046:	400b      	ands	r3, r1
 8005048:	3b08      	subs	r3, #8
 800504a:	089b      	lsrs	r3, r3, #2
 800504c:	3306      	adds	r3, #6
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	18d3      	adds	r3, r2, r3
 8005052:	3304      	adds	r3, #4
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	1dfa      	adds	r2, r7, #7
 8005058:	7812      	ldrb	r2, [r2, #0]
 800505a:	0011      	movs	r1, r2
 800505c:	2203      	movs	r2, #3
 800505e:	400a      	ands	r2, r1
 8005060:	00d2      	lsls	r2, r2, #3
 8005062:	21ff      	movs	r1, #255	@ 0xff
 8005064:	4091      	lsls	r1, r2
 8005066:	000a      	movs	r2, r1
 8005068:	43d2      	mvns	r2, r2
 800506a:	401a      	ands	r2, r3
 800506c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	019b      	lsls	r3, r3, #6
 8005072:	22ff      	movs	r2, #255	@ 0xff
 8005074:	401a      	ands	r2, r3
 8005076:	1dfb      	adds	r3, r7, #7
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	0018      	movs	r0, r3
 800507c:	2303      	movs	r3, #3
 800507e:	4003      	ands	r3, r0
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005084:	4809      	ldr	r0, [pc, #36]	@ (80050ac <__NVIC_SetPriority+0xd8>)
 8005086:	1dfb      	adds	r3, r7, #7
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	001c      	movs	r4, r3
 800508c:	230f      	movs	r3, #15
 800508e:	4023      	ands	r3, r4
 8005090:	3b08      	subs	r3, #8
 8005092:	089b      	lsrs	r3, r3, #2
 8005094:	430a      	orrs	r2, r1
 8005096:	3306      	adds	r3, #6
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	18c3      	adds	r3, r0, r3
 800509c:	3304      	adds	r3, #4
 800509e:	601a      	str	r2, [r3, #0]
}
 80050a0:	46c0      	nop			@ (mov r8, r8)
 80050a2:	46bd      	mov	sp, r7
 80050a4:	b003      	add	sp, #12
 80050a6:	bd90      	pop	{r4, r7, pc}
 80050a8:	e000e100 	.word	0xe000e100
 80050ac:	e000ed00 	.word	0xe000ed00

080050b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	1e5a      	subs	r2, r3, #1
 80050bc:	2380      	movs	r3, #128	@ 0x80
 80050be:	045b      	lsls	r3, r3, #17
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d301      	bcc.n	80050c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050c4:	2301      	movs	r3, #1
 80050c6:	e010      	b.n	80050ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050c8:	4b0a      	ldr	r3, [pc, #40]	@ (80050f4 <SysTick_Config+0x44>)
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	3a01      	subs	r2, #1
 80050ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050d0:	2301      	movs	r3, #1
 80050d2:	425b      	negs	r3, r3
 80050d4:	2103      	movs	r1, #3
 80050d6:	0018      	movs	r0, r3
 80050d8:	f7ff ff7c 	bl	8004fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050dc:	4b05      	ldr	r3, [pc, #20]	@ (80050f4 <SysTick_Config+0x44>)
 80050de:	2200      	movs	r2, #0
 80050e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050e2:	4b04      	ldr	r3, [pc, #16]	@ (80050f4 <SysTick_Config+0x44>)
 80050e4:	2207      	movs	r2, #7
 80050e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	0018      	movs	r0, r3
 80050ec:	46bd      	mov	sp, r7
 80050ee:	b002      	add	sp, #8
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	46c0      	nop			@ (mov r8, r8)
 80050f4:	e000e010 	.word	0xe000e010

080050f8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	607a      	str	r2, [r7, #4]
 8005102:	210f      	movs	r1, #15
 8005104:	187b      	adds	r3, r7, r1
 8005106:	1c02      	adds	r2, r0, #0
 8005108:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	187b      	adds	r3, r7, r1
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	b25b      	sxtb	r3, r3
 8005112:	0011      	movs	r1, r2
 8005114:	0018      	movs	r0, r3
 8005116:	f7ff ff5d 	bl	8004fd4 <__NVIC_SetPriority>
}
 800511a:	46c0      	nop			@ (mov r8, r8)
 800511c:	46bd      	mov	sp, r7
 800511e:	b004      	add	sp, #16
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b082      	sub	sp, #8
 8005126:	af00      	add	r7, sp, #0
 8005128:	0002      	movs	r2, r0
 800512a:	1dfb      	adds	r3, r7, #7
 800512c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800512e:	1dfb      	adds	r3, r7, #7
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	b25b      	sxtb	r3, r3
 8005134:	0018      	movs	r0, r3
 8005136:	f7ff ff33 	bl	8004fa0 <__NVIC_EnableIRQ>
}
 800513a:	46c0      	nop			@ (mov r8, r8)
 800513c:	46bd      	mov	sp, r7
 800513e:	b002      	add	sp, #8
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b082      	sub	sp, #8
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	0018      	movs	r0, r3
 800514e:	f7ff ffaf 	bl	80050b0 <SysTick_Config>
 8005152:	0003      	movs	r3, r0
}
 8005154:	0018      	movs	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	b002      	add	sp, #8
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e077      	b.n	800525e <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a3d      	ldr	r2, [pc, #244]	@ (8005268 <HAL_DMA_Init+0x10c>)
 8005174:	4694      	mov	ip, r2
 8005176:	4463      	add	r3, ip
 8005178:	2114      	movs	r1, #20
 800517a:	0018      	movs	r0, r3
 800517c:	f7fa ffc4 	bl	8000108 <__udivsi3>
 8005180:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8005182:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2225      	movs	r2, #37	@ 0x25
 800518c:	2102      	movs	r1, #2
 800518e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4934      	ldr	r1, [pc, #208]	@ (800526c <HAL_DMA_Init+0x110>)
 800519c:	400a      	ands	r2, r1
 800519e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6819      	ldr	r1, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	0018      	movs	r0, r3
 80051da:	f000 f9c3 	bl	8005564 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	2380      	movs	r3, #128	@ 0x80
 80051e4:	01db      	lsls	r3, r3, #7
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d102      	bne.n	80051f0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f8:	21ff      	movs	r1, #255	@ 0xff
 80051fa:	400a      	ands	r2, r1
 80051fc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005206:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d011      	beq.n	8005234 <HAL_DMA_Init+0xd8>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2b04      	cmp	r3, #4
 8005216:	d80d      	bhi.n	8005234 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	0018      	movs	r0, r3
 800521c:	f000 f9ce 	bl	80055bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005230:	605a      	str	r2, [r3, #4]
 8005232:	e008      	b.n	8005246 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2225      	movs	r2, #37	@ 0x25
 8005250:	2101      	movs	r1, #1
 8005252:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2224      	movs	r2, #36	@ 0x24
 8005258:	2100      	movs	r1, #0
 800525a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	0018      	movs	r0, r3
 8005260:	46bd      	mov	sp, r7
 8005262:	b002      	add	sp, #8
 8005264:	bd80      	pop	{r7, pc}
 8005266:	46c0      	nop			@ (mov r8, r8)
 8005268:	bffdfff8 	.word	0xbffdfff8
 800526c:	ffff800f 	.word	0xffff800f

08005270 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800527e:	2317      	movs	r3, #23
 8005280:	18fb      	adds	r3, r7, r3
 8005282:	2200      	movs	r2, #0
 8005284:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2224      	movs	r2, #36	@ 0x24
 800528a:	5c9b      	ldrb	r3, [r3, r2]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d101      	bne.n	8005294 <HAL_DMA_Start_IT+0x24>
 8005290:	2302      	movs	r3, #2
 8005292:	e070      	b.n	8005376 <HAL_DMA_Start_IT+0x106>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2224      	movs	r2, #36	@ 0x24
 8005298:	2101      	movs	r1, #1
 800529a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2225      	movs	r2, #37	@ 0x25
 80052a0:	5c9b      	ldrb	r3, [r3, r2]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d157      	bne.n	8005358 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2225      	movs	r2, #37	@ 0x25
 80052ac:	2102      	movs	r1, #2
 80052ae:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2101      	movs	r1, #1
 80052c2:	438a      	bics	r2, r1
 80052c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 f909 	bl	80054e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d008      	beq.n	80052ec <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	210e      	movs	r1, #14
 80052e6:	430a      	orrs	r2, r1
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	e00f      	b.n	800530c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2104      	movs	r1, #4
 80052f8:	438a      	bics	r2, r1
 80052fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	210a      	movs	r1, #10
 8005308:	430a      	orrs	r2, r1
 800530a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	2380      	movs	r3, #128	@ 0x80
 8005314:	025b      	lsls	r3, r3, #9
 8005316:	4013      	ands	r3, r2
 8005318:	d008      	beq.n	800532c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005324:	2180      	movs	r1, #128	@ 0x80
 8005326:	0049      	lsls	r1, r1, #1
 8005328:	430a      	orrs	r2, r1
 800532a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005330:	2b00      	cmp	r3, #0
 8005332:	d008      	beq.n	8005346 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800533e:	2180      	movs	r1, #128	@ 0x80
 8005340:	0049      	lsls	r1, r1, #1
 8005342:	430a      	orrs	r2, r1
 8005344:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2101      	movs	r1, #1
 8005352:	430a      	orrs	r2, r1
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e007      	b.n	8005368 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2224      	movs	r2, #36	@ 0x24
 800535c:	2100      	movs	r1, #0
 800535e:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005360:	2317      	movs	r3, #23
 8005362:	18fb      	adds	r3, r7, r3
 8005364:	2202      	movs	r2, #2
 8005366:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2224      	movs	r2, #36	@ 0x24
 800536c:	2100      	movs	r1, #0
 800536e:	5499      	strb	r1, [r3, r2]

  return status;
 8005370:	2317      	movs	r3, #23
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	781b      	ldrb	r3, [r3, #0]
}
 8005376:	0018      	movs	r0, r3
 8005378:	46bd      	mov	sp, r7
 800537a:	b006      	add	sp, #24
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8005388:	4b55      	ldr	r3, [pc, #340]	@ (80054e0 <HAL_DMA_IRQHandler+0x160>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539a:	221c      	movs	r2, #28
 800539c:	4013      	ands	r3, r2
 800539e:	2204      	movs	r2, #4
 80053a0:	409a      	lsls	r2, r3
 80053a2:	0013      	movs	r3, r2
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4013      	ands	r3, r2
 80053a8:	d027      	beq.n	80053fa <HAL_DMA_IRQHandler+0x7a>
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2204      	movs	r2, #4
 80053ae:	4013      	ands	r3, r2
 80053b0:	d023      	beq.n	80053fa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2220      	movs	r2, #32
 80053ba:	4013      	ands	r3, r2
 80053bc:	d107      	bne.n	80053ce <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2104      	movs	r1, #4
 80053ca:	438a      	bics	r2, r1
 80053cc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 80053ce:	4b44      	ldr	r3, [pc, #272]	@ (80054e0 <HAL_DMA_IRQHandler+0x160>)
 80053d0:	6859      	ldr	r1, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d6:	221c      	movs	r2, #28
 80053d8:	4013      	ands	r3, r2
 80053da:	2204      	movs	r2, #4
 80053dc:	409a      	lsls	r2, r3
 80053de:	4b40      	ldr	r3, [pc, #256]	@ (80054e0 <HAL_DMA_IRQHandler+0x160>)
 80053e0:	430a      	orrs	r2, r1
 80053e2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d100      	bne.n	80053ee <HAL_DMA_IRQHandler+0x6e>
 80053ec:	e073      	b.n	80054d6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	0010      	movs	r0, r2
 80053f6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80053f8:	e06d      	b.n	80054d6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fe:	221c      	movs	r2, #28
 8005400:	4013      	ands	r3, r2
 8005402:	2202      	movs	r2, #2
 8005404:	409a      	lsls	r2, r3
 8005406:	0013      	movs	r3, r2
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4013      	ands	r3, r2
 800540c:	d02e      	beq.n	800546c <HAL_DMA_IRQHandler+0xec>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2202      	movs	r2, #2
 8005412:	4013      	ands	r3, r2
 8005414:	d02a      	beq.n	800546c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2220      	movs	r2, #32
 800541e:	4013      	ands	r3, r2
 8005420:	d10b      	bne.n	800543a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	210a      	movs	r1, #10
 800542e:	438a      	bics	r2, r1
 8005430:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2225      	movs	r2, #37	@ 0x25
 8005436:	2101      	movs	r1, #1
 8005438:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800543a:	4b29      	ldr	r3, [pc, #164]	@ (80054e0 <HAL_DMA_IRQHandler+0x160>)
 800543c:	6859      	ldr	r1, [r3, #4]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005442:	221c      	movs	r2, #28
 8005444:	4013      	ands	r3, r2
 8005446:	2202      	movs	r2, #2
 8005448:	409a      	lsls	r2, r3
 800544a:	4b25      	ldr	r3, [pc, #148]	@ (80054e0 <HAL_DMA_IRQHandler+0x160>)
 800544c:	430a      	orrs	r2, r1
 800544e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2224      	movs	r2, #36	@ 0x24
 8005454:	2100      	movs	r1, #0
 8005456:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545c:	2b00      	cmp	r3, #0
 800545e:	d03a      	beq.n	80054d6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	0010      	movs	r0, r2
 8005468:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800546a:	e034      	b.n	80054d6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005470:	221c      	movs	r2, #28
 8005472:	4013      	ands	r3, r2
 8005474:	2208      	movs	r2, #8
 8005476:	409a      	lsls	r2, r3
 8005478:	0013      	movs	r3, r2
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4013      	ands	r3, r2
 800547e:	d02b      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x158>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2208      	movs	r2, #8
 8005484:	4013      	ands	r3, r2
 8005486:	d027      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	210e      	movs	r1, #14
 8005494:	438a      	bics	r2, r1
 8005496:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8005498:	4b11      	ldr	r3, [pc, #68]	@ (80054e0 <HAL_DMA_IRQHandler+0x160>)
 800549a:	6859      	ldr	r1, [r3, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a0:	221c      	movs	r2, #28
 80054a2:	4013      	ands	r3, r2
 80054a4:	2201      	movs	r2, #1
 80054a6:	409a      	lsls	r2, r3
 80054a8:	4b0d      	ldr	r3, [pc, #52]	@ (80054e0 <HAL_DMA_IRQHandler+0x160>)
 80054aa:	430a      	orrs	r2, r1
 80054ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2225      	movs	r2, #37	@ 0x25
 80054b8:	2101      	movs	r1, #1
 80054ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2224      	movs	r2, #36	@ 0x24
 80054c0:	2100      	movs	r1, #0
 80054c2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d005      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	0010      	movs	r0, r2
 80054d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80054d6:	46c0      	nop			@ (mov r8, r8)
 80054d8:	46c0      	nop			@ (mov r8, r8)
}
 80054da:	46bd      	mov	sp, r7
 80054dc:	b004      	add	sp, #16
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40020000 	.word	0x40020000

080054e4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80054fa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005500:	2b00      	cmp	r3, #0
 8005502:	d004      	beq.n	800550e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800550c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800550e:	4b14      	ldr	r3, [pc, #80]	@ (8005560 <DMA_SetConfig+0x7c>)
 8005510:	6859      	ldr	r1, [r3, #4]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005516:	221c      	movs	r2, #28
 8005518:	4013      	ands	r3, r2
 800551a:	2201      	movs	r2, #1
 800551c:	409a      	lsls	r2, r3
 800551e:	4b10      	ldr	r3, [pc, #64]	@ (8005560 <DMA_SetConfig+0x7c>)
 8005520:	430a      	orrs	r2, r1
 8005522:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	2b10      	cmp	r3, #16
 8005532:	d108      	bne.n	8005546 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005544:	e007      	b.n	8005556 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	60da      	str	r2, [r3, #12]
}
 8005556:	46c0      	nop			@ (mov r8, r8)
 8005558:	46bd      	mov	sp, r7
 800555a:	b004      	add	sp, #16
 800555c:	bd80      	pop	{r7, pc}
 800555e:	46c0      	nop			@ (mov r8, r8)
 8005560:	40020000 	.word	0x40020000

08005564 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	001a      	movs	r2, r3
 8005572:	23ff      	movs	r3, #255	@ 0xff
 8005574:	4013      	ands	r3, r2
 8005576:	3b08      	subs	r3, #8
 8005578:	2114      	movs	r1, #20
 800557a:	0018      	movs	r0, r3
 800557c:	f7fa fdc4 	bl	8000108 <__udivsi3>
 8005580:	0003      	movs	r3, r0
 8005582:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005588:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800558a:	4a0a      	ldr	r2, [pc, #40]	@ (80055b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800558c:	4694      	mov	ip, r2
 800558e:	4463      	add	r3, ip
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	001a      	movs	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a07      	ldr	r2, [pc, #28]	@ (80055b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800559c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	221c      	movs	r2, #28
 80055a2:	4013      	ands	r3, r2
 80055a4:	2201      	movs	r2, #1
 80055a6:	409a      	lsls	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80055ac:	46c0      	nop			@ (mov r8, r8)
 80055ae:	46bd      	mov	sp, r7
 80055b0:	b004      	add	sp, #16
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	10008200 	.word	0x10008200
 80055b8:	40020880 	.word	0x40020880

080055bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	22ff      	movs	r2, #255	@ 0xff
 80055ca:	4013      	ands	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	4a0a      	ldr	r2, [pc, #40]	@ (80055fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80055d2:	4694      	mov	ip, r2
 80055d4:	4463      	add	r3, ip
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	001a      	movs	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a07      	ldr	r2, [pc, #28]	@ (8005600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80055e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	2203      	movs	r2, #3
 80055ea:	4013      	ands	r3, r2
 80055ec:	2201      	movs	r2, #1
 80055ee:	409a      	lsls	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80055f4:	46c0      	nop			@ (mov r8, r8)
 80055f6:	46bd      	mov	sp, r7
 80055f8:	b004      	add	sp, #16
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	1000823f 	.word	0x1000823f
 8005600:	40020940 	.word	0x40020940

08005604 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005612:	e14d      	b.n	80058b0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2101      	movs	r1, #1
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4091      	lsls	r1, r2
 800561e:	000a      	movs	r2, r1
 8005620:	4013      	ands	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d100      	bne.n	800562c <HAL_GPIO_Init+0x28>
 800562a:	e13e      	b.n	80058aa <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2b02      	cmp	r3, #2
 8005632:	d003      	beq.n	800563c <HAL_GPIO_Init+0x38>
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	2b12      	cmp	r3, #18
 800563a:	d125      	bne.n	8005688 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	08da      	lsrs	r2, r3, #3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3208      	adds	r2, #8
 8005644:	0092      	lsls	r2, r2, #2
 8005646:	58d3      	ldr	r3, [r2, r3]
 8005648:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	2207      	movs	r2, #7
 800564e:	4013      	ands	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	220f      	movs	r2, #15
 8005654:	409a      	lsls	r2, r3
 8005656:	0013      	movs	r3, r2
 8005658:	43da      	mvns	r2, r3
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	4013      	ands	r3, r2
 800565e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	220f      	movs	r2, #15
 8005666:	401a      	ands	r2, r3
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	2107      	movs	r1, #7
 800566c:	400b      	ands	r3, r1
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	409a      	lsls	r2, r3
 8005672:	0013      	movs	r3, r2
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	4313      	orrs	r3, r2
 8005678:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	08da      	lsrs	r2, r3, #3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	3208      	adds	r2, #8
 8005682:	0092      	lsls	r2, r2, #2
 8005684:	6979      	ldr	r1, [r7, #20]
 8005686:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	2203      	movs	r2, #3
 8005694:	409a      	lsls	r2, r3
 8005696:	0013      	movs	r3, r2
 8005698:	43da      	mvns	r2, r3
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	4013      	ands	r3, r2
 800569e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2203      	movs	r2, #3
 80056a6:	401a      	ands	r2, r3
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	409a      	lsls	r2, r3
 80056ae:	0013      	movs	r3, r2
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d00b      	beq.n	80056dc <HAL_GPIO_Init+0xd8>
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d007      	beq.n	80056dc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056d0:	2b11      	cmp	r3, #17
 80056d2:	d003      	beq.n	80056dc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2b12      	cmp	r3, #18
 80056da:	d130      	bne.n	800573e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	2203      	movs	r2, #3
 80056e8:	409a      	lsls	r2, r3
 80056ea:	0013      	movs	r3, r2
 80056ec:	43da      	mvns	r2, r3
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	4013      	ands	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	005b      	lsls	r3, r3, #1
 80056fc:	409a      	lsls	r2, r3
 80056fe:	0013      	movs	r3, r2
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005712:	2201      	movs	r2, #1
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	409a      	lsls	r2, r3
 8005718:	0013      	movs	r3, r2
 800571a:	43da      	mvns	r2, r3
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	4013      	ands	r3, r2
 8005720:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	091b      	lsrs	r3, r3, #4
 8005728:	2201      	movs	r2, #1
 800572a:	401a      	ands	r2, r3
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	409a      	lsls	r2, r3
 8005730:	0013      	movs	r3, r2
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2b03      	cmp	r3, #3
 8005744:	d017      	beq.n	8005776 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	2203      	movs	r2, #3
 8005752:	409a      	lsls	r2, r3
 8005754:	0013      	movs	r3, r2
 8005756:	43da      	mvns	r2, r3
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	4013      	ands	r3, r2
 800575c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	409a      	lsls	r2, r3
 8005768:	0013      	movs	r3, r2
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	2380      	movs	r3, #128	@ 0x80
 800577c:	055b      	lsls	r3, r3, #21
 800577e:	4013      	ands	r3, r2
 8005780:	d100      	bne.n	8005784 <HAL_GPIO_Init+0x180>
 8005782:	e092      	b.n	80058aa <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005784:	4a50      	ldr	r2, [pc, #320]	@ (80058c8 <HAL_GPIO_Init+0x2c4>)
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	089b      	lsrs	r3, r3, #2
 800578a:	3318      	adds	r3, #24
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	589b      	ldr	r3, [r3, r2]
 8005790:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2203      	movs	r2, #3
 8005796:	4013      	ands	r3, r2
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	220f      	movs	r2, #15
 800579c:	409a      	lsls	r2, r3
 800579e:	0013      	movs	r3, r2
 80057a0:	43da      	mvns	r2, r3
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	4013      	ands	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	23a0      	movs	r3, #160	@ 0xa0
 80057ac:	05db      	lsls	r3, r3, #23
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d013      	beq.n	80057da <HAL_GPIO_Init+0x1d6>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a45      	ldr	r2, [pc, #276]	@ (80058cc <HAL_GPIO_Init+0x2c8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00d      	beq.n	80057d6 <HAL_GPIO_Init+0x1d2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a44      	ldr	r2, [pc, #272]	@ (80058d0 <HAL_GPIO_Init+0x2cc>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d007      	beq.n	80057d2 <HAL_GPIO_Init+0x1ce>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a43      	ldr	r2, [pc, #268]	@ (80058d4 <HAL_GPIO_Init+0x2d0>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d101      	bne.n	80057ce <HAL_GPIO_Init+0x1ca>
 80057ca:	2305      	movs	r3, #5
 80057cc:	e006      	b.n	80057dc <HAL_GPIO_Init+0x1d8>
 80057ce:	2306      	movs	r3, #6
 80057d0:	e004      	b.n	80057dc <HAL_GPIO_Init+0x1d8>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e002      	b.n	80057dc <HAL_GPIO_Init+0x1d8>
 80057d6:	2301      	movs	r3, #1
 80057d8:	e000      	b.n	80057dc <HAL_GPIO_Init+0x1d8>
 80057da:	2300      	movs	r3, #0
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	2103      	movs	r1, #3
 80057e0:	400a      	ands	r2, r1
 80057e2:	00d2      	lsls	r2, r2, #3
 80057e4:	4093      	lsls	r3, r2
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80057ec:	4936      	ldr	r1, [pc, #216]	@ (80058c8 <HAL_GPIO_Init+0x2c4>)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	089b      	lsrs	r3, r3, #2
 80057f2:	3318      	adds	r3, #24
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80057fa:	4a33      	ldr	r2, [pc, #204]	@ (80058c8 <HAL_GPIO_Init+0x2c4>)
 80057fc:	2380      	movs	r3, #128	@ 0x80
 80057fe:	58d3      	ldr	r3, [r2, r3]
 8005800:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	43da      	mvns	r2, r3
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	4013      	ands	r3, r2
 800580a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	2380      	movs	r3, #128	@ 0x80
 8005812:	025b      	lsls	r3, r3, #9
 8005814:	4013      	ands	r3, r2
 8005816:	d003      	beq.n	8005820 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8005820:	4929      	ldr	r1, [pc, #164]	@ (80058c8 <HAL_GPIO_Init+0x2c4>)
 8005822:	2280      	movs	r2, #128	@ 0x80
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8005828:	4a27      	ldr	r2, [pc, #156]	@ (80058c8 <HAL_GPIO_Init+0x2c4>)
 800582a:	2384      	movs	r3, #132	@ 0x84
 800582c:	58d3      	ldr	r3, [r2, r3]
 800582e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	43da      	mvns	r2, r3
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	4013      	ands	r3, r2
 8005838:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	2380      	movs	r3, #128	@ 0x80
 8005840:	029b      	lsls	r3, r3, #10
 8005842:	4013      	ands	r3, r2
 8005844:	d003      	beq.n	800584e <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800584e:	491e      	ldr	r1, [pc, #120]	@ (80058c8 <HAL_GPIO_Init+0x2c4>)
 8005850:	2284      	movs	r2, #132	@ 0x84
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005856:	4b1c      	ldr	r3, [pc, #112]	@ (80058c8 <HAL_GPIO_Init+0x2c4>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	43da      	mvns	r2, r3
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	4013      	ands	r3, r2
 8005864:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	2380      	movs	r3, #128	@ 0x80
 800586c:	035b      	lsls	r3, r3, #13
 800586e:	4013      	ands	r3, r2
 8005870:	d003      	beq.n	800587a <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800587a:	4b13      	ldr	r3, [pc, #76]	@ (80058c8 <HAL_GPIO_Init+0x2c4>)
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8005880:	4b11      	ldr	r3, [pc, #68]	@ (80058c8 <HAL_GPIO_Init+0x2c4>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	43da      	mvns	r2, r3
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	4013      	ands	r3, r2
 800588e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	2380      	movs	r3, #128	@ 0x80
 8005896:	039b      	lsls	r3, r3, #14
 8005898:	4013      	ands	r3, r2
 800589a:	d003      	beq.n	80058a4 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80058a4:	4b08      	ldr	r3, [pc, #32]	@ (80058c8 <HAL_GPIO_Init+0x2c4>)
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	3301      	adds	r3, #1
 80058ae:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	40da      	lsrs	r2, r3
 80058b8:	1e13      	subs	r3, r2, #0
 80058ba:	d000      	beq.n	80058be <HAL_GPIO_Init+0x2ba>
 80058bc:	e6aa      	b.n	8005614 <HAL_GPIO_Init+0x10>
  }
}
 80058be:	46c0      	nop			@ (mov r8, r8)
 80058c0:	46c0      	nop			@ (mov r8, r8)
 80058c2:	46bd      	mov	sp, r7
 80058c4:	b006      	add	sp, #24
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	40021800 	.word	0x40021800
 80058cc:	50000400 	.word	0x50000400
 80058d0:	50000800 	.word	0x50000800
 80058d4:	50001400 	.word	0x50001400

080058d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	000a      	movs	r2, r1
 80058e2:	1cbb      	adds	r3, r7, #2
 80058e4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	1cba      	adds	r2, r7, #2
 80058ec:	8812      	ldrh	r2, [r2, #0]
 80058ee:	4013      	ands	r3, r2
 80058f0:	d004      	beq.n	80058fc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80058f2:	230f      	movs	r3, #15
 80058f4:	18fb      	adds	r3, r7, r3
 80058f6:	2201      	movs	r2, #1
 80058f8:	701a      	strb	r2, [r3, #0]
 80058fa:	e003      	b.n	8005904 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058fc:	230f      	movs	r3, #15
 80058fe:	18fb      	adds	r3, r7, r3
 8005900:	2200      	movs	r2, #0
 8005902:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005904:	230f      	movs	r3, #15
 8005906:	18fb      	adds	r3, r7, r3
 8005908:	781b      	ldrb	r3, [r3, #0]
}
 800590a:	0018      	movs	r0, r3
 800590c:	46bd      	mov	sp, r7
 800590e:	b004      	add	sp, #16
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b082      	sub	sp, #8
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	0008      	movs	r0, r1
 800591c:	0011      	movs	r1, r2
 800591e:	1cbb      	adds	r3, r7, #2
 8005920:	1c02      	adds	r2, r0, #0
 8005922:	801a      	strh	r2, [r3, #0]
 8005924:	1c7b      	adds	r3, r7, #1
 8005926:	1c0a      	adds	r2, r1, #0
 8005928:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800592a:	1c7b      	adds	r3, r7, #1
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d004      	beq.n	800593c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005932:	1cbb      	adds	r3, r7, #2
 8005934:	881a      	ldrh	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800593a:	e003      	b.n	8005944 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800593c:	1cbb      	adds	r3, r7, #2
 800593e:	881a      	ldrh	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005944:	46c0      	nop			@ (mov r8, r8)
 8005946:	46bd      	mov	sp, r7
 8005948:	b002      	add	sp, #8
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	000a      	movs	r2, r1
 8005956:	1cbb      	adds	r3, r7, #2
 8005958:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005960:	1cbb      	adds	r3, r7, #2
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4013      	ands	r3, r2
 8005968:	041a      	lsls	r2, r3, #16
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	43db      	mvns	r3, r3
 800596e:	1cb9      	adds	r1, r7, #2
 8005970:	8809      	ldrh	r1, [r1, #0]
 8005972:	400b      	ands	r3, r1
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	619a      	str	r2, [r3, #24]
}
 800597a:	46c0      	nop			@ (mov r8, r8)
 800597c:	46bd      	mov	sp, r7
 800597e:	b004      	add	sp, #16
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e1d0      	b.n	8005d38 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2201      	movs	r2, #1
 800599c:	4013      	ands	r3, r2
 800599e:	d100      	bne.n	80059a2 <HAL_RCC_OscConfig+0x1e>
 80059a0:	e069      	b.n	8005a76 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059a2:	4bc8      	ldr	r3, [pc, #800]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	2238      	movs	r2, #56	@ 0x38
 80059a8:	4013      	ands	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	d105      	bne.n	80059be <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d15d      	bne.n	8005a76 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e1bc      	b.n	8005d38 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	2380      	movs	r3, #128	@ 0x80
 80059c4:	025b      	lsls	r3, r3, #9
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d107      	bne.n	80059da <HAL_RCC_OscConfig+0x56>
 80059ca:	4bbe      	ldr	r3, [pc, #760]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	4bbd      	ldr	r3, [pc, #756]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 80059d0:	2180      	movs	r1, #128	@ 0x80
 80059d2:	0249      	lsls	r1, r1, #9
 80059d4:	430a      	orrs	r2, r1
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	e020      	b.n	8005a1c <HAL_RCC_OscConfig+0x98>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	23a0      	movs	r3, #160	@ 0xa0
 80059e0:	02db      	lsls	r3, r3, #11
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d10e      	bne.n	8005a04 <HAL_RCC_OscConfig+0x80>
 80059e6:	4bb7      	ldr	r3, [pc, #732]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	4bb6      	ldr	r3, [pc, #728]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 80059ec:	2180      	movs	r1, #128	@ 0x80
 80059ee:	02c9      	lsls	r1, r1, #11
 80059f0:	430a      	orrs	r2, r1
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	4bb3      	ldr	r3, [pc, #716]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	4bb2      	ldr	r3, [pc, #712]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 80059fa:	2180      	movs	r1, #128	@ 0x80
 80059fc:	0249      	lsls	r1, r1, #9
 80059fe:	430a      	orrs	r2, r1
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	e00b      	b.n	8005a1c <HAL_RCC_OscConfig+0x98>
 8005a04:	4baf      	ldr	r3, [pc, #700]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	4bae      	ldr	r3, [pc, #696]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005a0a:	49af      	ldr	r1, [pc, #700]	@ (8005cc8 <HAL_RCC_OscConfig+0x344>)
 8005a0c:	400a      	ands	r2, r1
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	4bac      	ldr	r3, [pc, #688]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	4bab      	ldr	r3, [pc, #684]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005a16:	49ad      	ldr	r1, [pc, #692]	@ (8005ccc <HAL_RCC_OscConfig+0x348>)
 8005a18:	400a      	ands	r2, r1
 8005a1a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d014      	beq.n	8005a4e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a24:	f7fe f890 	bl	8003b48 <HAL_GetTick>
 8005a28:	0003      	movs	r3, r0
 8005a2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a2c:	e008      	b.n	8005a40 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005a2e:	f7fe f88b 	bl	8003b48 <HAL_GetTick>
 8005a32:	0002      	movs	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b64      	cmp	r3, #100	@ 0x64
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e17b      	b.n	8005d38 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a40:	4ba0      	ldr	r3, [pc, #640]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	2380      	movs	r3, #128	@ 0x80
 8005a46:	029b      	lsls	r3, r3, #10
 8005a48:	4013      	ands	r3, r2
 8005a4a:	d0f0      	beq.n	8005a2e <HAL_RCC_OscConfig+0xaa>
 8005a4c:	e013      	b.n	8005a76 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a4e:	f7fe f87b 	bl	8003b48 <HAL_GetTick>
 8005a52:	0003      	movs	r3, r0
 8005a54:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a56:	e008      	b.n	8005a6a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005a58:	f7fe f876 	bl	8003b48 <HAL_GetTick>
 8005a5c:	0002      	movs	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b64      	cmp	r3, #100	@ 0x64
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e166      	b.n	8005d38 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a6a:	4b96      	ldr	r3, [pc, #600]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	2380      	movs	r3, #128	@ 0x80
 8005a70:	029b      	lsls	r3, r3, #10
 8005a72:	4013      	ands	r3, r2
 8005a74:	d1f0      	bne.n	8005a58 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	d100      	bne.n	8005a82 <HAL_RCC_OscConfig+0xfe>
 8005a80:	e086      	b.n	8005b90 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a82:	4b90      	ldr	r3, [pc, #576]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	2238      	movs	r2, #56	@ 0x38
 8005a88:	4013      	ands	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d12f      	bne.n	8005af2 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e14c      	b.n	8005d38 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a9e:	4b89      	ldr	r3, [pc, #548]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	4a8b      	ldr	r2, [pc, #556]	@ (8005cd0 <HAL_RCC_OscConfig+0x34c>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	0019      	movs	r1, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	021a      	lsls	r2, r3, #8
 8005aae:	4b85      	ldr	r3, [pc, #532]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d112      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005aba:	4b82      	ldr	r3, [pc, #520]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a85      	ldr	r2, [pc, #532]	@ (8005cd4 <HAL_RCC_OscConfig+0x350>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	0019      	movs	r1, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	4b7e      	ldr	r3, [pc, #504]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005aca:	430a      	orrs	r2, r1
 8005acc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005ace:	4b7d      	ldr	r3, [pc, #500]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	0adb      	lsrs	r3, r3, #11
 8005ad4:	2207      	movs	r2, #7
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	4a7f      	ldr	r2, [pc, #508]	@ (8005cd8 <HAL_RCC_OscConfig+0x354>)
 8005ada:	40da      	lsrs	r2, r3
 8005adc:	4b7f      	ldr	r3, [pc, #508]	@ (8005cdc <HAL_RCC_OscConfig+0x358>)
 8005ade:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ae0:	4b7f      	ldr	r3, [pc, #508]	@ (8005ce0 <HAL_RCC_OscConfig+0x35c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	f7fd ffd3 	bl	8003a90 <HAL_InitTick>
 8005aea:	1e03      	subs	r3, r0, #0
 8005aec:	d050      	beq.n	8005b90 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e122      	b.n	8005d38 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d030      	beq.n	8005b5c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005afa:	4b72      	ldr	r3, [pc, #456]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a75      	ldr	r2, [pc, #468]	@ (8005cd4 <HAL_RCC_OscConfig+0x350>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	0019      	movs	r1, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691a      	ldr	r2, [r3, #16]
 8005b08:	4b6e      	ldr	r3, [pc, #440]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8005b0e:	4b6d      	ldr	r3, [pc, #436]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	4b6c      	ldr	r3, [pc, #432]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005b14:	2180      	movs	r1, #128	@ 0x80
 8005b16:	0049      	lsls	r1, r1, #1
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1c:	f7fe f814 	bl	8003b48 <HAL_GetTick>
 8005b20:	0003      	movs	r3, r0
 8005b22:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b24:	e008      	b.n	8005b38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005b26:	f7fe f80f 	bl	8003b48 <HAL_GetTick>
 8005b2a:	0002      	movs	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e0ff      	b.n	8005d38 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b38:	4b62      	ldr	r3, [pc, #392]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	2380      	movs	r3, #128	@ 0x80
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	4013      	ands	r3, r2
 8005b42:	d0f0      	beq.n	8005b26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b44:	4b5f      	ldr	r3, [pc, #380]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	4a61      	ldr	r2, [pc, #388]	@ (8005cd0 <HAL_RCC_OscConfig+0x34c>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	0019      	movs	r1, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	021a      	lsls	r2, r3, #8
 8005b54:	4b5b      	ldr	r3, [pc, #364]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005b56:	430a      	orrs	r2, r1
 8005b58:	605a      	str	r2, [r3, #4]
 8005b5a:	e019      	b.n	8005b90 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8005b5c:	4b59      	ldr	r3, [pc, #356]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	4b58      	ldr	r3, [pc, #352]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005b62:	4960      	ldr	r1, [pc, #384]	@ (8005ce4 <HAL_RCC_OscConfig+0x360>)
 8005b64:	400a      	ands	r2, r1
 8005b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b68:	f7fd ffee 	bl	8003b48 <HAL_GetTick>
 8005b6c:	0003      	movs	r3, r0
 8005b6e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b70:	e008      	b.n	8005b84 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005b72:	f7fd ffe9 	bl	8003b48 <HAL_GetTick>
 8005b76:	0002      	movs	r2, r0
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e0d9      	b.n	8005d38 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b84:	4b4f      	ldr	r3, [pc, #316]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	2380      	movs	r3, #128	@ 0x80
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	d1f0      	bne.n	8005b72 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2208      	movs	r2, #8
 8005b96:	4013      	ands	r3, r2
 8005b98:	d042      	beq.n	8005c20 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8005b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	2238      	movs	r2, #56	@ 0x38
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	2b18      	cmp	r3, #24
 8005ba4:	d105      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d138      	bne.n	8005c20 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e0c2      	b.n	8005d38 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d019      	beq.n	8005bee <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005bba:	4b42      	ldr	r3, [pc, #264]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005bbc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005bbe:	4b41      	ldr	r3, [pc, #260]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc6:	f7fd ffbf 	bl	8003b48 <HAL_GetTick>
 8005bca:	0003      	movs	r3, r0
 8005bcc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005bd0:	f7fd ffba 	bl	8003b48 <HAL_GetTick>
 8005bd4:	0002      	movs	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e0aa      	b.n	8005d38 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005be2:	4b38      	ldr	r3, [pc, #224]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005be6:	2202      	movs	r2, #2
 8005be8:	4013      	ands	r3, r2
 8005bea:	d0f1      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x24c>
 8005bec:	e018      	b.n	8005c20 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005bee:	4b35      	ldr	r3, [pc, #212]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005bf0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005bf2:	4b34      	ldr	r3, [pc, #208]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	438a      	bics	r2, r1
 8005bf8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfa:	f7fd ffa5 	bl	8003b48 <HAL_GetTick>
 8005bfe:	0003      	movs	r3, r0
 8005c00:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005c04:	f7fd ffa0 	bl	8003b48 <HAL_GetTick>
 8005c08:	0002      	movs	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e090      	b.n	8005d38 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8005c16:	4b2b      	ldr	r3, [pc, #172]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	d1f1      	bne.n	8005c04 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2204      	movs	r2, #4
 8005c26:	4013      	ands	r3, r2
 8005c28:	d100      	bne.n	8005c2c <HAL_RCC_OscConfig+0x2a8>
 8005c2a:	e084      	b.n	8005d36 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c2c:	230f      	movs	r3, #15
 8005c2e:	18fb      	adds	r3, r7, r3
 8005c30:	2200      	movs	r2, #0
 8005c32:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8005c34:	4b23      	ldr	r3, [pc, #140]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	2238      	movs	r2, #56	@ 0x38
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	d106      	bne.n	8005c4e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d000      	beq.n	8005c4a <HAL_RCC_OscConfig+0x2c6>
 8005c48:	e075      	b.n	8005d36 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e074      	b.n	8005d38 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d106      	bne.n	8005c64 <HAL_RCC_OscConfig+0x2e0>
 8005c56:	4b1b      	ldr	r3, [pc, #108]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005c58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c62:	e01c      	b.n	8005c9e <HAL_RCC_OscConfig+0x31a>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2b05      	cmp	r3, #5
 8005c6a:	d10c      	bne.n	8005c86 <HAL_RCC_OscConfig+0x302>
 8005c6c:	4b15      	ldr	r3, [pc, #84]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005c6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c70:	4b14      	ldr	r3, [pc, #80]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005c72:	2104      	movs	r1, #4
 8005c74:	430a      	orrs	r2, r1
 8005c76:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c78:	4b12      	ldr	r3, [pc, #72]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005c7a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c7c:	4b11      	ldr	r3, [pc, #68]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005c7e:	2101      	movs	r1, #1
 8005c80:	430a      	orrs	r2, r1
 8005c82:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c84:	e00b      	b.n	8005c9e <HAL_RCC_OscConfig+0x31a>
 8005c86:	4b0f      	ldr	r3, [pc, #60]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005c88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	438a      	bics	r2, r1
 8005c90:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c92:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005c94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c96:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc4 <HAL_RCC_OscConfig+0x340>)
 8005c98:	2104      	movs	r1, #4
 8005c9a:	438a      	bics	r2, r1
 8005c9c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d028      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca6:	f7fd ff4f 	bl	8003b48 <HAL_GetTick>
 8005caa:	0003      	movs	r3, r0
 8005cac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005cae:	e01d      	b.n	8005cec <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb0:	f7fd ff4a 	bl	8003b48 <HAL_GetTick>
 8005cb4:	0002      	movs	r2, r0
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	4a0b      	ldr	r2, [pc, #44]	@ (8005ce8 <HAL_RCC_OscConfig+0x364>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d915      	bls.n	8005cec <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e039      	b.n	8005d38 <HAL_RCC_OscConfig+0x3b4>
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	fffeffff 	.word	0xfffeffff
 8005ccc:	fffbffff 	.word	0xfffbffff
 8005cd0:	ffff80ff 	.word	0xffff80ff
 8005cd4:	ffffc7ff 	.word	0xffffc7ff
 8005cd8:	02dc6c00 	.word	0x02dc6c00
 8005cdc:	20000028 	.word	0x20000028
 8005ce0:	2000002c 	.word	0x2000002c
 8005ce4:	fffffeff 	.word	0xfffffeff
 8005ce8:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005cec:	4b14      	ldr	r3, [pc, #80]	@ (8005d40 <HAL_RCC_OscConfig+0x3bc>)
 8005cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	d0dc      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x32c>
 8005cf6:	e013      	b.n	8005d20 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf8:	f7fd ff26 	bl	8003b48 <HAL_GetTick>
 8005cfc:	0003      	movs	r3, r0
 8005cfe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8005d00:	e009      	b.n	8005d16 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d02:	f7fd ff21 	bl	8003b48 <HAL_GetTick>
 8005d06:	0002      	movs	r2, r0
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8005d44 <HAL_RCC_OscConfig+0x3c0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e010      	b.n	8005d38 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8005d16:	4b0a      	ldr	r3, [pc, #40]	@ (8005d40 <HAL_RCC_OscConfig+0x3bc>)
 8005d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	d1f0      	bne.n	8005d02 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005d20:	230f      	movs	r3, #15
 8005d22:	18fb      	adds	r3, r7, r3
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d105      	bne.n	8005d36 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005d2a:	4b05      	ldr	r3, [pc, #20]	@ (8005d40 <HAL_RCC_OscConfig+0x3bc>)
 8005d2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d2e:	4b04      	ldr	r3, [pc, #16]	@ (8005d40 <HAL_RCC_OscConfig+0x3bc>)
 8005d30:	4905      	ldr	r1, [pc, #20]	@ (8005d48 <HAL_RCC_OscConfig+0x3c4>)
 8005d32:	400a      	ands	r2, r1
 8005d34:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	0018      	movs	r0, r3
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	b006      	add	sp, #24
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	40021000 	.word	0x40021000
 8005d44:	00001388 	.word	0x00001388
 8005d48:	efffffff 	.word	0xefffffff

08005d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e0e9      	b.n	8005f34 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d60:	4b76      	ldr	r3, [pc, #472]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2207      	movs	r2, #7
 8005d66:	4013      	ands	r3, r2
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d91e      	bls.n	8005dac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d6e:	4b73      	ldr	r3, [pc, #460]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2207      	movs	r2, #7
 8005d74:	4393      	bics	r3, r2
 8005d76:	0019      	movs	r1, r3
 8005d78:	4b70      	ldr	r3, [pc, #448]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d80:	f7fd fee2 	bl	8003b48 <HAL_GetTick>
 8005d84:	0003      	movs	r3, r0
 8005d86:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d88:	e009      	b.n	8005d9e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005d8a:	f7fd fedd 	bl	8003b48 <HAL_GetTick>
 8005d8e:	0002      	movs	r2, r0
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	4a6a      	ldr	r2, [pc, #424]	@ (8005f40 <HAL_RCC_ClockConfig+0x1f4>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e0ca      	b.n	8005f34 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d9e:	4b67      	ldr	r3, [pc, #412]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2207      	movs	r2, #7
 8005da4:	4013      	ands	r3, r2
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d1ee      	bne.n	8005d8a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2202      	movs	r2, #2
 8005db2:	4013      	ands	r3, r2
 8005db4:	d017      	beq.n	8005de6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2204      	movs	r2, #4
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	d008      	beq.n	8005dd2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005dc0:	4b60      	ldr	r3, [pc, #384]	@ (8005f44 <HAL_RCC_ClockConfig+0x1f8>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	4a60      	ldr	r2, [pc, #384]	@ (8005f48 <HAL_RCC_ClockConfig+0x1fc>)
 8005dc6:	401a      	ands	r2, r3
 8005dc8:	4b5e      	ldr	r3, [pc, #376]	@ (8005f44 <HAL_RCC_ClockConfig+0x1f8>)
 8005dca:	21b0      	movs	r1, #176	@ 0xb0
 8005dcc:	0109      	lsls	r1, r1, #4
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dd2:	4b5c      	ldr	r3, [pc, #368]	@ (8005f44 <HAL_RCC_ClockConfig+0x1f8>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	4a5d      	ldr	r2, [pc, #372]	@ (8005f4c <HAL_RCC_ClockConfig+0x200>)
 8005dd8:	4013      	ands	r3, r2
 8005dda:	0019      	movs	r1, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	4b58      	ldr	r3, [pc, #352]	@ (8005f44 <HAL_RCC_ClockConfig+0x1f8>)
 8005de2:	430a      	orrs	r2, r1
 8005de4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2201      	movs	r2, #1
 8005dec:	4013      	ands	r3, r2
 8005dee:	d055      	beq.n	8005e9c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8005df0:	4b54      	ldr	r3, [pc, #336]	@ (8005f44 <HAL_RCC_ClockConfig+0x1f8>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	221c      	movs	r2, #28
 8005df6:	4393      	bics	r3, r2
 8005df8:	0019      	movs	r1, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	4b51      	ldr	r3, [pc, #324]	@ (8005f44 <HAL_RCC_ClockConfig+0x1f8>)
 8005e00:	430a      	orrs	r2, r1
 8005e02:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d107      	bne.n	8005e1c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e0c:	4b4d      	ldr	r3, [pc, #308]	@ (8005f44 <HAL_RCC_ClockConfig+0x1f8>)
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	2380      	movs	r3, #128	@ 0x80
 8005e12:	029b      	lsls	r3, r3, #10
 8005e14:	4013      	ands	r3, r2
 8005e16:	d11f      	bne.n	8005e58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e08b      	b.n	8005f34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d107      	bne.n	8005e34 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e24:	4b47      	ldr	r3, [pc, #284]	@ (8005f44 <HAL_RCC_ClockConfig+0x1f8>)
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	2380      	movs	r3, #128	@ 0x80
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	d113      	bne.n	8005e58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e07f      	b.n	8005f34 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d106      	bne.n	8005e4a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005e3c:	4b41      	ldr	r3, [pc, #260]	@ (8005f44 <HAL_RCC_ClockConfig+0x1f8>)
 8005e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e40:	2202      	movs	r2, #2
 8005e42:	4013      	ands	r3, r2
 8005e44:	d108      	bne.n	8005e58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e074      	b.n	8005f34 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005e4a:	4b3e      	ldr	r3, [pc, #248]	@ (8005f44 <HAL_RCC_ClockConfig+0x1f8>)
 8005e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e4e:	2202      	movs	r2, #2
 8005e50:	4013      	ands	r3, r2
 8005e52:	d101      	bne.n	8005e58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e06d      	b.n	8005f34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e58:	4b3a      	ldr	r3, [pc, #232]	@ (8005f44 <HAL_RCC_ClockConfig+0x1f8>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	2207      	movs	r2, #7
 8005e5e:	4393      	bics	r3, r2
 8005e60:	0019      	movs	r1, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	4b37      	ldr	r3, [pc, #220]	@ (8005f44 <HAL_RCC_ClockConfig+0x1f8>)
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e6c:	f7fd fe6c 	bl	8003b48 <HAL_GetTick>
 8005e70:	0003      	movs	r3, r0
 8005e72:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e74:	e009      	b.n	8005e8a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005e76:	f7fd fe67 	bl	8003b48 <HAL_GetTick>
 8005e7a:	0002      	movs	r2, r0
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	4a2f      	ldr	r2, [pc, #188]	@ (8005f40 <HAL_RCC_ClockConfig+0x1f4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e054      	b.n	8005f34 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e8a:	4b2e      	ldr	r3, [pc, #184]	@ (8005f44 <HAL_RCC_ClockConfig+0x1f8>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	2238      	movs	r2, #56	@ 0x38
 8005e90:	401a      	ands	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d1ec      	bne.n	8005e76 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e9c:	4b27      	ldr	r3, [pc, #156]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2207      	movs	r2, #7
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d21e      	bcs.n	8005ee8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eaa:	4b24      	ldr	r3, [pc, #144]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2207      	movs	r2, #7
 8005eb0:	4393      	bics	r3, r2
 8005eb2:	0019      	movs	r1, r3
 8005eb4:	4b21      	ldr	r3, [pc, #132]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ebc:	f7fd fe44 	bl	8003b48 <HAL_GetTick>
 8005ec0:	0003      	movs	r3, r0
 8005ec2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005ec4:	e009      	b.n	8005eda <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005ec6:	f7fd fe3f 	bl	8003b48 <HAL_GetTick>
 8005eca:	0002      	movs	r2, r0
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f40 <HAL_RCC_ClockConfig+0x1f4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e02c      	b.n	8005f34 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005eda:	4b18      	ldr	r3, [pc, #96]	@ (8005f3c <HAL_RCC_ClockConfig+0x1f0>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2207      	movs	r2, #7
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d1ee      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2204      	movs	r2, #4
 8005eee:	4013      	ands	r3, r2
 8005ef0:	d009      	beq.n	8005f06 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005ef2:	4b14      	ldr	r3, [pc, #80]	@ (8005f44 <HAL_RCC_ClockConfig+0x1f8>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	4a16      	ldr	r2, [pc, #88]	@ (8005f50 <HAL_RCC_ClockConfig+0x204>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	0019      	movs	r1, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	691a      	ldr	r2, [r3, #16]
 8005f00:	4b10      	ldr	r3, [pc, #64]	@ (8005f44 <HAL_RCC_ClockConfig+0x1f8>)
 8005f02:	430a      	orrs	r2, r1
 8005f04:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005f06:	f000 f82b 	bl	8005f60 <HAL_RCC_GetSysClockFreq>
 8005f0a:	0001      	movs	r1, r0
 8005f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f44 <HAL_RCC_ClockConfig+0x1f8>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005f10:	0a1b      	lsrs	r3, r3, #8
 8005f12:	220f      	movs	r2, #15
 8005f14:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005f16:	4b0f      	ldr	r3, [pc, #60]	@ (8005f54 <HAL_RCC_ClockConfig+0x208>)
 8005f18:	0092      	lsls	r2, r2, #2
 8005f1a:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005f1c:	221f      	movs	r2, #31
 8005f1e:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005f20:	000a      	movs	r2, r1
 8005f22:	40da      	lsrs	r2, r3
 8005f24:	4b0c      	ldr	r3, [pc, #48]	@ (8005f58 <HAL_RCC_ClockConfig+0x20c>)
 8005f26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005f28:	4b0c      	ldr	r3, [pc, #48]	@ (8005f5c <HAL_RCC_ClockConfig+0x210>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f7fd fdaf 	bl	8003a90 <HAL_InitTick>
 8005f32:	0003      	movs	r3, r0
}
 8005f34:	0018      	movs	r0, r3
 8005f36:	46bd      	mov	sp, r7
 8005f38:	b004      	add	sp, #16
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40022000 	.word	0x40022000
 8005f40:	00001388 	.word	0x00001388
 8005f44:	40021000 	.word	0x40021000
 8005f48:	ffff84ff 	.word	0xffff84ff
 8005f4c:	fffff0ff 	.word	0xfffff0ff
 8005f50:	ffff8fff 	.word	0xffff8fff
 8005f54:	080077ec 	.word	0x080077ec
 8005f58:	20000028 	.word	0x20000028
 8005f5c:	2000002c 	.word	0x2000002c

08005f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8005f66:	4b23      	ldr	r3, [pc, #140]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	089b      	lsrs	r3, r3, #2
 8005f6c:	2207      	movs	r2, #7
 8005f6e:	4013      	ands	r3, r2
 8005f70:	3301      	adds	r3, #1
 8005f72:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005f74:	4b1f      	ldr	r3, [pc, #124]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	2238      	movs	r2, #56	@ 0x38
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	d10f      	bne.n	8005f9e <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	0adb      	lsrs	r3, r3, #11
 8005f84:	2207      	movs	r2, #7
 8005f86:	4013      	ands	r3, r2
 8005f88:	2201      	movs	r2, #1
 8005f8a:	409a      	lsls	r2, r3
 8005f8c:	0013      	movs	r3, r2
 8005f8e:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005f90:	6879      	ldr	r1, [r7, #4]
 8005f92:	4819      	ldr	r0, [pc, #100]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005f94:	f7fa f8b8 	bl	8000108 <__udivsi3>
 8005f98:	0003      	movs	r3, r0
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	e01e      	b.n	8005fdc <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005f9e:	4b15      	ldr	r3, [pc, #84]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	2238      	movs	r2, #56	@ 0x38
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	2b08      	cmp	r3, #8
 8005fa8:	d102      	bne.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005faa:	4b14      	ldr	r3, [pc, #80]	@ (8005ffc <HAL_RCC_GetSysClockFreq+0x9c>)
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	e015      	b.n	8005fdc <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8005fb0:	4b10      	ldr	r3, [pc, #64]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	2238      	movs	r2, #56	@ 0x38
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d103      	bne.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005fbc:	2380      	movs	r3, #128	@ 0x80
 8005fbe:	021b      	lsls	r3, r3, #8
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	e00b      	b.n	8005fdc <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8005fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2238      	movs	r2, #56	@ 0x38
 8005fca:	4013      	ands	r3, r2
 8005fcc:	2b18      	cmp	r3, #24
 8005fce:	d103      	bne.n	8005fd8 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005fd0:	23fa      	movs	r3, #250	@ 0xfa
 8005fd2:	01db      	lsls	r3, r3, #7
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	e001      	b.n	8005fdc <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8005fdc:	68b9      	ldr	r1, [r7, #8]
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f7fa f892 	bl	8000108 <__udivsi3>
 8005fe4:	0003      	movs	r3, r0
 8005fe6:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
}
 8005fea:	0018      	movs	r0, r3
 8005fec:	46bd      	mov	sp, r7
 8005fee:	b004      	add	sp, #16
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	46c0      	nop			@ (mov r8, r8)
 8005ff4:	40021000 	.word	0x40021000
 8005ff8:	02dc6c00 	.word	0x02dc6c00
 8005ffc:	007a1200 	.word	0x007a1200

08006000 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006008:	2313      	movs	r3, #19
 800600a:	18fb      	adds	r3, r7, r3
 800600c:	2200      	movs	r2, #0
 800600e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006010:	2312      	movs	r3, #18
 8006012:	18fb      	adds	r3, r7, r3
 8006014:	2200      	movs	r2, #0
 8006016:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2240      	movs	r2, #64	@ 0x40
 800601e:	4013      	ands	r3, r2
 8006020:	d100      	bne.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8006022:	e079      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006024:	2011      	movs	r0, #17
 8006026:	183b      	adds	r3, r7, r0
 8006028:	2200      	movs	r2, #0
 800602a:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800602c:	4b63      	ldr	r3, [pc, #396]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800602e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006030:	2380      	movs	r3, #128	@ 0x80
 8006032:	055b      	lsls	r3, r3, #21
 8006034:	4013      	ands	r3, r2
 8006036:	d110      	bne.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006038:	4b60      	ldr	r3, [pc, #384]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800603a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800603c:	4b5f      	ldr	r3, [pc, #380]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800603e:	2180      	movs	r1, #128	@ 0x80
 8006040:	0549      	lsls	r1, r1, #21
 8006042:	430a      	orrs	r2, r1
 8006044:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006046:	4b5d      	ldr	r3, [pc, #372]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006048:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800604a:	2380      	movs	r3, #128	@ 0x80
 800604c:	055b      	lsls	r3, r3, #21
 800604e:	4013      	ands	r3, r2
 8006050:	60bb      	str	r3, [r7, #8]
 8006052:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006054:	183b      	adds	r3, r7, r0
 8006056:	2201      	movs	r2, #1
 8006058:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800605a:	4b58      	ldr	r3, [pc, #352]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800605c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800605e:	23c0      	movs	r3, #192	@ 0xc0
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4013      	ands	r3, r2
 8006064:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d019      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	429a      	cmp	r2, r3
 8006074:	d014      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8006076:	4b51      	ldr	r3, [pc, #324]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800607a:	4a51      	ldr	r2, [pc, #324]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800607c:	4013      	ands	r3, r2
 800607e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006080:	4b4e      	ldr	r3, [pc, #312]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006082:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006084:	4b4d      	ldr	r3, [pc, #308]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006086:	2180      	movs	r1, #128	@ 0x80
 8006088:	0249      	lsls	r1, r1, #9
 800608a:	430a      	orrs	r2, r1
 800608c:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800608e:	4b4b      	ldr	r3, [pc, #300]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006090:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006092:	4b4a      	ldr	r3, [pc, #296]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006094:	494b      	ldr	r1, [pc, #300]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006096:	400a      	ands	r2, r1
 8006098:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800609a:	4b48      	ldr	r3, [pc, #288]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2201      	movs	r2, #1
 80060a4:	4013      	ands	r3, r2
 80060a6:	d016      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a8:	f7fd fd4e 	bl	8003b48 <HAL_GetTick>
 80060ac:	0003      	movs	r3, r0
 80060ae:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80060b0:	e00c      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060b2:	f7fd fd49 	bl	8003b48 <HAL_GetTick>
 80060b6:	0002      	movs	r2, r0
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	4a42      	ldr	r2, [pc, #264]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d904      	bls.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 80060c2:	2313      	movs	r3, #19
 80060c4:	18fb      	adds	r3, r7, r3
 80060c6:	2203      	movs	r2, #3
 80060c8:	701a      	strb	r2, [r3, #0]
          break;
 80060ca:	e004      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80060cc:	4b3b      	ldr	r3, [pc, #236]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060d0:	2202      	movs	r2, #2
 80060d2:	4013      	ands	r3, r2
 80060d4:	d0ed      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80060d6:	2313      	movs	r3, #19
 80060d8:	18fb      	adds	r3, r7, r3
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060e0:	4b36      	ldr	r3, [pc, #216]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e4:	4a36      	ldr	r2, [pc, #216]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80060e6:	4013      	ands	r3, r2
 80060e8:	0019      	movs	r1, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	4b33      	ldr	r3, [pc, #204]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060f0:	430a      	orrs	r2, r1
 80060f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80060f4:	e005      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f6:	2312      	movs	r3, #18
 80060f8:	18fb      	adds	r3, r7, r3
 80060fa:	2213      	movs	r2, #19
 80060fc:	18ba      	adds	r2, r7, r2
 80060fe:	7812      	ldrb	r2, [r2, #0]
 8006100:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006102:	2311      	movs	r3, #17
 8006104:	18fb      	adds	r3, r7, r3
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d105      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800610c:	4b2b      	ldr	r3, [pc, #172]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800610e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006110:	4b2a      	ldr	r3, [pc, #168]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006112:	492e      	ldr	r1, [pc, #184]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006114:	400a      	ands	r2, r1
 8006116:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2201      	movs	r2, #1
 800611e:	4013      	ands	r3, r2
 8006120:	d009      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006122:	4b26      	ldr	r3, [pc, #152]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006126:	2203      	movs	r2, #3
 8006128:	4393      	bics	r3, r2
 800612a:	0019      	movs	r1, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689a      	ldr	r2, [r3, #8]
 8006130:	4b22      	ldr	r3, [pc, #136]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006132:	430a      	orrs	r2, r1
 8006134:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2202      	movs	r2, #2
 800613c:	4013      	ands	r3, r2
 800613e:	d009      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006140:	4b1e      	ldr	r3, [pc, #120]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006144:	4a22      	ldr	r2, [pc, #136]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006146:	4013      	ands	r3, r2
 8006148:	0019      	movs	r1, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	4b1b      	ldr	r3, [pc, #108]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006150:	430a      	orrs	r2, r1
 8006152:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2220      	movs	r2, #32
 800615a:	4013      	ands	r3, r2
 800615c:	d008      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800615e:	4b17      	ldr	r3, [pc, #92]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	0899      	lsrs	r1, r3, #2
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	695a      	ldr	r2, [r3, #20]
 800616a:	4b14      	ldr	r3, [pc, #80]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800616c:	430a      	orrs	r2, r1
 800616e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2204      	movs	r2, #4
 8006176:	4013      	ands	r3, r2
 8006178:	d009      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800617a:	4b10      	ldr	r3, [pc, #64]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800617c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800617e:	4a15      	ldr	r2, [pc, #84]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006180:	4013      	ands	r3, r2
 8006182:	0019      	movs	r1, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	4b0c      	ldr	r3, [pc, #48]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800618a:	430a      	orrs	r2, r1
 800618c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2280      	movs	r2, #128	@ 0x80
 8006194:	4013      	ands	r3, r2
 8006196:	d009      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8006198:	4b08      	ldr	r3, [pc, #32]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	22e0      	movs	r2, #224	@ 0xe0
 800619e:	4393      	bics	r3, r2
 80061a0:	0019      	movs	r1, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	4b05      	ldr	r3, [pc, #20]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80061a8:	430a      	orrs	r2, r1
 80061aa:	601a      	str	r2, [r3, #0]
  }
  return status;
 80061ac:	2312      	movs	r3, #18
 80061ae:	18fb      	adds	r3, r7, r3
 80061b0:	781b      	ldrb	r3, [r3, #0]
}
 80061b2:	0018      	movs	r0, r3
 80061b4:	46bd      	mov	sp, r7
 80061b6:	b006      	add	sp, #24
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	46c0      	nop			@ (mov r8, r8)
 80061bc:	40021000 	.word	0x40021000
 80061c0:	fffffcff 	.word	0xfffffcff
 80061c4:	fffeffff 	.word	0xfffeffff
 80061c8:	00001388 	.word	0x00001388
 80061cc:	efffffff 	.word	0xefffffff
 80061d0:	ffffcfff 	.word	0xffffcfff
 80061d4:	ffff3fff 	.word	0xffff3fff

080061d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e04a      	b.n	8006280 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	223d      	movs	r2, #61	@ 0x3d
 80061ee:	5c9b      	ldrb	r3, [r3, r2]
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d107      	bne.n	8006206 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	223c      	movs	r2, #60	@ 0x3c
 80061fa:	2100      	movs	r1, #0
 80061fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	0018      	movs	r0, r3
 8006202:	f7fd fb55 	bl	80038b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	223d      	movs	r2, #61	@ 0x3d
 800620a:	2102      	movs	r1, #2
 800620c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	3304      	adds	r3, #4
 8006216:	0019      	movs	r1, r3
 8006218:	0010      	movs	r0, r2
 800621a:	f000 fb89 	bl	8006930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2248      	movs	r2, #72	@ 0x48
 8006222:	2101      	movs	r1, #1
 8006224:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	223e      	movs	r2, #62	@ 0x3e
 800622a:	2101      	movs	r1, #1
 800622c:	5499      	strb	r1, [r3, r2]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	223f      	movs	r2, #63	@ 0x3f
 8006232:	2101      	movs	r1, #1
 8006234:	5499      	strb	r1, [r3, r2]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2240      	movs	r2, #64	@ 0x40
 800623a:	2101      	movs	r1, #1
 800623c:	5499      	strb	r1, [r3, r2]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2241      	movs	r2, #65	@ 0x41
 8006242:	2101      	movs	r1, #1
 8006244:	5499      	strb	r1, [r3, r2]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2242      	movs	r2, #66	@ 0x42
 800624a:	2101      	movs	r1, #1
 800624c:	5499      	strb	r1, [r3, r2]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2243      	movs	r2, #67	@ 0x43
 8006252:	2101      	movs	r1, #1
 8006254:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2244      	movs	r2, #68	@ 0x44
 800625a:	2101      	movs	r1, #1
 800625c:	5499      	strb	r1, [r3, r2]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2245      	movs	r2, #69	@ 0x45
 8006262:	2101      	movs	r1, #1
 8006264:	5499      	strb	r1, [r3, r2]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2246      	movs	r2, #70	@ 0x46
 800626a:	2101      	movs	r1, #1
 800626c:	5499      	strb	r1, [r3, r2]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2247      	movs	r2, #71	@ 0x47
 8006272:	2101      	movs	r1, #1
 8006274:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	223d      	movs	r2, #61	@ 0x3d
 800627a:	2101      	movs	r1, #1
 800627c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	0018      	movs	r0, r3
 8006282:	46bd      	mov	sp, r7
 8006284:	b002      	add	sp, #8
 8006286:	bd80      	pop	{r7, pc}

08006288 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	223d      	movs	r2, #61	@ 0x3d
 8006294:	5c9b      	ldrb	r3, [r3, r2]
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b01      	cmp	r3, #1
 800629a:	d001      	beq.n	80062a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e02f      	b.n	8006300 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	223d      	movs	r2, #61	@ 0x3d
 80062a4:	2102      	movs	r1, #2
 80062a6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a16      	ldr	r2, [pc, #88]	@ (8006308 <HAL_TIM_Base_Start+0x80>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d004      	beq.n	80062bc <HAL_TIM_Base_Start+0x34>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a15      	ldr	r2, [pc, #84]	@ (800630c <HAL_TIM_Base_Start+0x84>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d116      	bne.n	80062ea <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	4a13      	ldr	r2, [pc, #76]	@ (8006310 <HAL_TIM_Base_Start+0x88>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b06      	cmp	r3, #6
 80062cc:	d016      	beq.n	80062fc <HAL_TIM_Base_Start+0x74>
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	2380      	movs	r3, #128	@ 0x80
 80062d2:	025b      	lsls	r3, r3, #9
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d011      	beq.n	80062fc <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2101      	movs	r1, #1
 80062e4:	430a      	orrs	r2, r1
 80062e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e8:	e008      	b.n	80062fc <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2101      	movs	r1, #1
 80062f6:	430a      	orrs	r2, r1
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	e000      	b.n	80062fe <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062fc:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	0018      	movs	r0, r3
 8006302:	46bd      	mov	sp, r7
 8006304:	b004      	add	sp, #16
 8006306:	bd80      	pop	{r7, pc}
 8006308:	40012c00 	.word	0x40012c00
 800630c:	40000400 	.word	0x40000400
 8006310:	00010007 	.word	0x00010007

08006314 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e04a      	b.n	80063bc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	223d      	movs	r2, #61	@ 0x3d
 800632a:	5c9b      	ldrb	r3, [r3, r2]
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d107      	bne.n	8006342 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	223c      	movs	r2, #60	@ 0x3c
 8006336:	2100      	movs	r1, #0
 8006338:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	0018      	movs	r0, r3
 800633e:	f000 f841 	bl	80063c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	223d      	movs	r2, #61	@ 0x3d
 8006346:	2102      	movs	r1, #2
 8006348:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	3304      	adds	r3, #4
 8006352:	0019      	movs	r1, r3
 8006354:	0010      	movs	r0, r2
 8006356:	f000 faeb 	bl	8006930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2248      	movs	r2, #72	@ 0x48
 800635e:	2101      	movs	r1, #1
 8006360:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	223e      	movs	r2, #62	@ 0x3e
 8006366:	2101      	movs	r1, #1
 8006368:	5499      	strb	r1, [r3, r2]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	223f      	movs	r2, #63	@ 0x3f
 800636e:	2101      	movs	r1, #1
 8006370:	5499      	strb	r1, [r3, r2]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2240      	movs	r2, #64	@ 0x40
 8006376:	2101      	movs	r1, #1
 8006378:	5499      	strb	r1, [r3, r2]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2241      	movs	r2, #65	@ 0x41
 800637e:	2101      	movs	r1, #1
 8006380:	5499      	strb	r1, [r3, r2]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2242      	movs	r2, #66	@ 0x42
 8006386:	2101      	movs	r1, #1
 8006388:	5499      	strb	r1, [r3, r2]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2243      	movs	r2, #67	@ 0x43
 800638e:	2101      	movs	r1, #1
 8006390:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2244      	movs	r2, #68	@ 0x44
 8006396:	2101      	movs	r1, #1
 8006398:	5499      	strb	r1, [r3, r2]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2245      	movs	r2, #69	@ 0x45
 800639e:	2101      	movs	r1, #1
 80063a0:	5499      	strb	r1, [r3, r2]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2246      	movs	r2, #70	@ 0x46
 80063a6:	2101      	movs	r1, #1
 80063a8:	5499      	strb	r1, [r3, r2]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2247      	movs	r2, #71	@ 0x47
 80063ae:	2101      	movs	r1, #1
 80063b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	223d      	movs	r2, #61	@ 0x3d
 80063b6:	2101      	movs	r1, #1
 80063b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	0018      	movs	r0, r3
 80063be:	46bd      	mov	sp, r7
 80063c0:	b002      	add	sp, #8
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063cc:	46c0      	nop			@ (mov r8, r8)
 80063ce:	46bd      	mov	sp, r7
 80063d0:	b002      	add	sp, #8
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d108      	bne.n	80063f6 <HAL_TIM_PWM_Start+0x22>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	223e      	movs	r2, #62	@ 0x3e
 80063e8:	5c9b      	ldrb	r3, [r3, r2]
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	3b01      	subs	r3, #1
 80063ee:	1e5a      	subs	r2, r3, #1
 80063f0:	4193      	sbcs	r3, r2
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	e037      	b.n	8006466 <HAL_TIM_PWM_Start+0x92>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	d108      	bne.n	800640e <HAL_TIM_PWM_Start+0x3a>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	223f      	movs	r2, #63	@ 0x3f
 8006400:	5c9b      	ldrb	r3, [r3, r2]
 8006402:	b2db      	uxtb	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	1e5a      	subs	r2, r3, #1
 8006408:	4193      	sbcs	r3, r2
 800640a:	b2db      	uxtb	r3, r3
 800640c:	e02b      	b.n	8006466 <HAL_TIM_PWM_Start+0x92>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b08      	cmp	r3, #8
 8006412:	d108      	bne.n	8006426 <HAL_TIM_PWM_Start+0x52>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2240      	movs	r2, #64	@ 0x40
 8006418:	5c9b      	ldrb	r3, [r3, r2]
 800641a:	b2db      	uxtb	r3, r3
 800641c:	3b01      	subs	r3, #1
 800641e:	1e5a      	subs	r2, r3, #1
 8006420:	4193      	sbcs	r3, r2
 8006422:	b2db      	uxtb	r3, r3
 8006424:	e01f      	b.n	8006466 <HAL_TIM_PWM_Start+0x92>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b0c      	cmp	r3, #12
 800642a:	d108      	bne.n	800643e <HAL_TIM_PWM_Start+0x6a>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2241      	movs	r2, #65	@ 0x41
 8006430:	5c9b      	ldrb	r3, [r3, r2]
 8006432:	b2db      	uxtb	r3, r3
 8006434:	3b01      	subs	r3, #1
 8006436:	1e5a      	subs	r2, r3, #1
 8006438:	4193      	sbcs	r3, r2
 800643a:	b2db      	uxtb	r3, r3
 800643c:	e013      	b.n	8006466 <HAL_TIM_PWM_Start+0x92>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b10      	cmp	r3, #16
 8006442:	d108      	bne.n	8006456 <HAL_TIM_PWM_Start+0x82>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2242      	movs	r2, #66	@ 0x42
 8006448:	5c9b      	ldrb	r3, [r3, r2]
 800644a:	b2db      	uxtb	r3, r3
 800644c:	3b01      	subs	r3, #1
 800644e:	1e5a      	subs	r2, r3, #1
 8006450:	4193      	sbcs	r3, r2
 8006452:	b2db      	uxtb	r3, r3
 8006454:	e007      	b.n	8006466 <HAL_TIM_PWM_Start+0x92>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2243      	movs	r2, #67	@ 0x43
 800645a:	5c9b      	ldrb	r3, [r3, r2]
 800645c:	b2db      	uxtb	r3, r3
 800645e:	3b01      	subs	r3, #1
 8006460:	1e5a      	subs	r2, r3, #1
 8006462:	4193      	sbcs	r3, r2
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e07b      	b.n	8006566 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d104      	bne.n	800647e <HAL_TIM_PWM_Start+0xaa>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	223e      	movs	r2, #62	@ 0x3e
 8006478:	2102      	movs	r1, #2
 800647a:	5499      	strb	r1, [r3, r2]
 800647c:	e023      	b.n	80064c6 <HAL_TIM_PWM_Start+0xf2>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b04      	cmp	r3, #4
 8006482:	d104      	bne.n	800648e <HAL_TIM_PWM_Start+0xba>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	223f      	movs	r2, #63	@ 0x3f
 8006488:	2102      	movs	r1, #2
 800648a:	5499      	strb	r1, [r3, r2]
 800648c:	e01b      	b.n	80064c6 <HAL_TIM_PWM_Start+0xf2>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b08      	cmp	r3, #8
 8006492:	d104      	bne.n	800649e <HAL_TIM_PWM_Start+0xca>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2240      	movs	r2, #64	@ 0x40
 8006498:	2102      	movs	r1, #2
 800649a:	5499      	strb	r1, [r3, r2]
 800649c:	e013      	b.n	80064c6 <HAL_TIM_PWM_Start+0xf2>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b0c      	cmp	r3, #12
 80064a2:	d104      	bne.n	80064ae <HAL_TIM_PWM_Start+0xda>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2241      	movs	r2, #65	@ 0x41
 80064a8:	2102      	movs	r1, #2
 80064aa:	5499      	strb	r1, [r3, r2]
 80064ac:	e00b      	b.n	80064c6 <HAL_TIM_PWM_Start+0xf2>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b10      	cmp	r3, #16
 80064b2:	d104      	bne.n	80064be <HAL_TIM_PWM_Start+0xea>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2242      	movs	r2, #66	@ 0x42
 80064b8:	2102      	movs	r1, #2
 80064ba:	5499      	strb	r1, [r3, r2]
 80064bc:	e003      	b.n	80064c6 <HAL_TIM_PWM_Start+0xf2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2243      	movs	r2, #67	@ 0x43
 80064c2:	2102      	movs	r1, #2
 80064c4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	2201      	movs	r2, #1
 80064ce:	0018      	movs	r0, r3
 80064d0:	f000 fde0 	bl	8007094 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a25      	ldr	r2, [pc, #148]	@ (8006570 <HAL_TIM_PWM_Start+0x19c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d009      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x11e>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a24      	ldr	r2, [pc, #144]	@ (8006574 <HAL_TIM_PWM_Start+0x1a0>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d004      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x11e>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a22      	ldr	r2, [pc, #136]	@ (8006578 <HAL_TIM_PWM_Start+0x1a4>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d101      	bne.n	80064f6 <HAL_TIM_PWM_Start+0x122>
 80064f2:	2301      	movs	r3, #1
 80064f4:	e000      	b.n	80064f8 <HAL_TIM_PWM_Start+0x124>
 80064f6:	2300      	movs	r3, #0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d008      	beq.n	800650e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2180      	movs	r1, #128	@ 0x80
 8006508:	0209      	lsls	r1, r1, #8
 800650a:	430a      	orrs	r2, r1
 800650c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a17      	ldr	r2, [pc, #92]	@ (8006570 <HAL_TIM_PWM_Start+0x19c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d004      	beq.n	8006522 <HAL_TIM_PWM_Start+0x14e>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a17      	ldr	r2, [pc, #92]	@ (800657c <HAL_TIM_PWM_Start+0x1a8>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d116      	bne.n	8006550 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	4a15      	ldr	r2, [pc, #84]	@ (8006580 <HAL_TIM_PWM_Start+0x1ac>)
 800652a:	4013      	ands	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b06      	cmp	r3, #6
 8006532:	d016      	beq.n	8006562 <HAL_TIM_PWM_Start+0x18e>
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	2380      	movs	r3, #128	@ 0x80
 8006538:	025b      	lsls	r3, r3, #9
 800653a:	429a      	cmp	r2, r3
 800653c:	d011      	beq.n	8006562 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2101      	movs	r1, #1
 800654a:	430a      	orrs	r2, r1
 800654c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800654e:	e008      	b.n	8006562 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2101      	movs	r1, #1
 800655c:	430a      	orrs	r2, r1
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	e000      	b.n	8006564 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006562:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	0018      	movs	r0, r3
 8006568:	46bd      	mov	sp, r7
 800656a:	b004      	add	sp, #16
 800656c:	bd80      	pop	{r7, pc}
 800656e:	46c0      	nop			@ (mov r8, r8)
 8006570:	40012c00 	.word	0x40012c00
 8006574:	40014400 	.word	0x40014400
 8006578:	40014800 	.word	0x40014800
 800657c:	40000400 	.word	0x40000400
 8006580:	00010007 	.word	0x00010007

08006584 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006590:	2317      	movs	r3, #23
 8006592:	18fb      	adds	r3, r7, r3
 8006594:	2200      	movs	r2, #0
 8006596:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	223c      	movs	r2, #60	@ 0x3c
 800659c:	5c9b      	ldrb	r3, [r3, r2]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d101      	bne.n	80065a6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80065a2:	2302      	movs	r3, #2
 80065a4:	e0e5      	b.n	8006772 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	223c      	movs	r2, #60	@ 0x3c
 80065aa:	2101      	movs	r1, #1
 80065ac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b14      	cmp	r3, #20
 80065b2:	d900      	bls.n	80065b6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80065b4:	e0d1      	b.n	800675a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	009a      	lsls	r2, r3, #2
 80065ba:	4b70      	ldr	r3, [pc, #448]	@ (800677c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80065bc:	18d3      	adds	r3, r2, r3
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	0011      	movs	r1, r2
 80065ca:	0018      	movs	r0, r3
 80065cc:	f000 fa2a 	bl	8006a24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699a      	ldr	r2, [r3, #24]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2108      	movs	r1, #8
 80065dc:	430a      	orrs	r2, r1
 80065de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699a      	ldr	r2, [r3, #24]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2104      	movs	r1, #4
 80065ec:	438a      	bics	r2, r1
 80065ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6999      	ldr	r1, [r3, #24]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	691a      	ldr	r2, [r3, #16]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	619a      	str	r2, [r3, #24]
      break;
 8006602:	e0af      	b.n	8006764 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	0011      	movs	r1, r2
 800660c:	0018      	movs	r0, r3
 800660e:	f000 fa89 	bl	8006b24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	699a      	ldr	r2, [r3, #24]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2180      	movs	r1, #128	@ 0x80
 800661e:	0109      	lsls	r1, r1, #4
 8006620:	430a      	orrs	r2, r1
 8006622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699a      	ldr	r2, [r3, #24]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4954      	ldr	r1, [pc, #336]	@ (8006780 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006630:	400a      	ands	r2, r1
 8006632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6999      	ldr	r1, [r3, #24]
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	021a      	lsls	r2, r3, #8
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	619a      	str	r2, [r3, #24]
      break;
 8006648:	e08c      	b.n	8006764 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	0011      	movs	r1, r2
 8006652:	0018      	movs	r0, r3
 8006654:	f000 fae4 	bl	8006c20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	69da      	ldr	r2, [r3, #28]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2108      	movs	r1, #8
 8006664:	430a      	orrs	r2, r1
 8006666:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	69da      	ldr	r2, [r3, #28]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2104      	movs	r1, #4
 8006674:	438a      	bics	r2, r1
 8006676:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	69d9      	ldr	r1, [r3, #28]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	691a      	ldr	r2, [r3, #16]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	61da      	str	r2, [r3, #28]
      break;
 800668a:	e06b      	b.n	8006764 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	0011      	movs	r1, r2
 8006694:	0018      	movs	r0, r3
 8006696:	f000 fb45 	bl	8006d24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69da      	ldr	r2, [r3, #28]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2180      	movs	r1, #128	@ 0x80
 80066a6:	0109      	lsls	r1, r1, #4
 80066a8:	430a      	orrs	r2, r1
 80066aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	69da      	ldr	r2, [r3, #28]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4932      	ldr	r1, [pc, #200]	@ (8006780 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80066b8:	400a      	ands	r2, r1
 80066ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	69d9      	ldr	r1, [r3, #28]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	021a      	lsls	r2, r3, #8
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	61da      	str	r2, [r3, #28]
      break;
 80066d0:	e048      	b.n	8006764 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	0011      	movs	r1, r2
 80066da:	0018      	movs	r0, r3
 80066dc:	f000 fb86 	bl	8006dec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2108      	movs	r1, #8
 80066ec:	430a      	orrs	r2, r1
 80066ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2104      	movs	r1, #4
 80066fc:	438a      	bics	r2, r1
 80066fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	691a      	ldr	r2, [r3, #16]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006712:	e027      	b.n	8006764 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	0011      	movs	r1, r2
 800671c:	0018      	movs	r0, r3
 800671e:	f000 fbbf 	bl	8006ea0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2180      	movs	r1, #128	@ 0x80
 800672e:	0109      	lsls	r1, r1, #4
 8006730:	430a      	orrs	r2, r1
 8006732:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4910      	ldr	r1, [pc, #64]	@ (8006780 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006740:	400a      	ands	r2, r1
 8006742:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	021a      	lsls	r2, r3, #8
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006758:	e004      	b.n	8006764 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800675a:	2317      	movs	r3, #23
 800675c:	18fb      	adds	r3, r7, r3
 800675e:	2201      	movs	r2, #1
 8006760:	701a      	strb	r2, [r3, #0]
      break;
 8006762:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	223c      	movs	r2, #60	@ 0x3c
 8006768:	2100      	movs	r1, #0
 800676a:	5499      	strb	r1, [r3, r2]

  return status;
 800676c:	2317      	movs	r3, #23
 800676e:	18fb      	adds	r3, r7, r3
 8006770:	781b      	ldrb	r3, [r3, #0]
}
 8006772:	0018      	movs	r0, r3
 8006774:	46bd      	mov	sp, r7
 8006776:	b006      	add	sp, #24
 8006778:	bd80      	pop	{r7, pc}
 800677a:	46c0      	nop			@ (mov r8, r8)
 800677c:	0800782c 	.word	0x0800782c
 8006780:	fffffbff 	.word	0xfffffbff

08006784 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800678e:	230f      	movs	r3, #15
 8006790:	18fb      	adds	r3, r7, r3
 8006792:	2200      	movs	r2, #0
 8006794:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	223c      	movs	r2, #60	@ 0x3c
 800679a:	5c9b      	ldrb	r3, [r3, r2]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d101      	bne.n	80067a4 <HAL_TIM_ConfigClockSource+0x20>
 80067a0:	2302      	movs	r3, #2
 80067a2:	e0bc      	b.n	800691e <HAL_TIM_ConfigClockSource+0x19a>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	223c      	movs	r2, #60	@ 0x3c
 80067a8:	2101      	movs	r1, #1
 80067aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	223d      	movs	r2, #61	@ 0x3d
 80067b0:	2102      	movs	r1, #2
 80067b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	4a5a      	ldr	r2, [pc, #360]	@ (8006928 <HAL_TIM_ConfigClockSource+0x1a4>)
 80067c0:	4013      	ands	r3, r2
 80067c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	4a59      	ldr	r2, [pc, #356]	@ (800692c <HAL_TIM_ConfigClockSource+0x1a8>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2280      	movs	r2, #128	@ 0x80
 80067da:	0192      	lsls	r2, r2, #6
 80067dc:	4293      	cmp	r3, r2
 80067de:	d040      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0xde>
 80067e0:	2280      	movs	r2, #128	@ 0x80
 80067e2:	0192      	lsls	r2, r2, #6
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d900      	bls.n	80067ea <HAL_TIM_ConfigClockSource+0x66>
 80067e8:	e088      	b.n	80068fc <HAL_TIM_ConfigClockSource+0x178>
 80067ea:	2280      	movs	r2, #128	@ 0x80
 80067ec:	0152      	lsls	r2, r2, #5
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d100      	bne.n	80067f4 <HAL_TIM_ConfigClockSource+0x70>
 80067f2:	e088      	b.n	8006906 <HAL_TIM_ConfigClockSource+0x182>
 80067f4:	2280      	movs	r2, #128	@ 0x80
 80067f6:	0152      	lsls	r2, r2, #5
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d900      	bls.n	80067fe <HAL_TIM_ConfigClockSource+0x7a>
 80067fc:	e07e      	b.n	80068fc <HAL_TIM_ConfigClockSource+0x178>
 80067fe:	2b70      	cmp	r3, #112	@ 0x70
 8006800:	d018      	beq.n	8006834 <HAL_TIM_ConfigClockSource+0xb0>
 8006802:	d900      	bls.n	8006806 <HAL_TIM_ConfigClockSource+0x82>
 8006804:	e07a      	b.n	80068fc <HAL_TIM_ConfigClockSource+0x178>
 8006806:	2b60      	cmp	r3, #96	@ 0x60
 8006808:	d04f      	beq.n	80068aa <HAL_TIM_ConfigClockSource+0x126>
 800680a:	d900      	bls.n	800680e <HAL_TIM_ConfigClockSource+0x8a>
 800680c:	e076      	b.n	80068fc <HAL_TIM_ConfigClockSource+0x178>
 800680e:	2b50      	cmp	r3, #80	@ 0x50
 8006810:	d03b      	beq.n	800688a <HAL_TIM_ConfigClockSource+0x106>
 8006812:	d900      	bls.n	8006816 <HAL_TIM_ConfigClockSource+0x92>
 8006814:	e072      	b.n	80068fc <HAL_TIM_ConfigClockSource+0x178>
 8006816:	2b40      	cmp	r3, #64	@ 0x40
 8006818:	d057      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x146>
 800681a:	d900      	bls.n	800681e <HAL_TIM_ConfigClockSource+0x9a>
 800681c:	e06e      	b.n	80068fc <HAL_TIM_ConfigClockSource+0x178>
 800681e:	2b30      	cmp	r3, #48	@ 0x30
 8006820:	d063      	beq.n	80068ea <HAL_TIM_ConfigClockSource+0x166>
 8006822:	d86b      	bhi.n	80068fc <HAL_TIM_ConfigClockSource+0x178>
 8006824:	2b20      	cmp	r3, #32
 8006826:	d060      	beq.n	80068ea <HAL_TIM_ConfigClockSource+0x166>
 8006828:	d868      	bhi.n	80068fc <HAL_TIM_ConfigClockSource+0x178>
 800682a:	2b00      	cmp	r3, #0
 800682c:	d05d      	beq.n	80068ea <HAL_TIM_ConfigClockSource+0x166>
 800682e:	2b10      	cmp	r3, #16
 8006830:	d05b      	beq.n	80068ea <HAL_TIM_ConfigClockSource+0x166>
 8006832:	e063      	b.n	80068fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006844:	f000 fc06 	bl	8007054 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2277      	movs	r2, #119	@ 0x77
 8006854:	4313      	orrs	r3, r2
 8006856:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	609a      	str	r2, [r3, #8]
      break;
 8006860:	e052      	b.n	8006908 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006872:	f000 fbef 	bl	8007054 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2180      	movs	r1, #128	@ 0x80
 8006882:	01c9      	lsls	r1, r1, #7
 8006884:	430a      	orrs	r2, r1
 8006886:	609a      	str	r2, [r3, #8]
      break;
 8006888:	e03e      	b.n	8006908 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006896:	001a      	movs	r2, r3
 8006898:	f000 fb60 	bl	8006f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2150      	movs	r1, #80	@ 0x50
 80068a2:	0018      	movs	r0, r3
 80068a4:	f000 fbba 	bl	800701c <TIM_ITRx_SetConfig>
      break;
 80068a8:	e02e      	b.n	8006908 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068b6:	001a      	movs	r2, r3
 80068b8:	f000 fb7e 	bl	8006fb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2160      	movs	r1, #96	@ 0x60
 80068c2:	0018      	movs	r0, r3
 80068c4:	f000 fbaa 	bl	800701c <TIM_ITRx_SetConfig>
      break;
 80068c8:	e01e      	b.n	8006908 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068d6:	001a      	movs	r2, r3
 80068d8:	f000 fb40 	bl	8006f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2140      	movs	r1, #64	@ 0x40
 80068e2:	0018      	movs	r0, r3
 80068e4:	f000 fb9a 	bl	800701c <TIM_ITRx_SetConfig>
      break;
 80068e8:	e00e      	b.n	8006908 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	0019      	movs	r1, r3
 80068f4:	0010      	movs	r0, r2
 80068f6:	f000 fb91 	bl	800701c <TIM_ITRx_SetConfig>
      break;
 80068fa:	e005      	b.n	8006908 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80068fc:	230f      	movs	r3, #15
 80068fe:	18fb      	adds	r3, r7, r3
 8006900:	2201      	movs	r2, #1
 8006902:	701a      	strb	r2, [r3, #0]
      break;
 8006904:	e000      	b.n	8006908 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006906:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	223d      	movs	r2, #61	@ 0x3d
 800690c:	2101      	movs	r1, #1
 800690e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	223c      	movs	r2, #60	@ 0x3c
 8006914:	2100      	movs	r1, #0
 8006916:	5499      	strb	r1, [r3, r2]

  return status;
 8006918:	230f      	movs	r3, #15
 800691a:	18fb      	adds	r3, r7, r3
 800691c:	781b      	ldrb	r3, [r3, #0]
}
 800691e:	0018      	movs	r0, r3
 8006920:	46bd      	mov	sp, r7
 8006922:	b004      	add	sp, #16
 8006924:	bd80      	pop	{r7, pc}
 8006926:	46c0      	nop			@ (mov r8, r8)
 8006928:	ffceff88 	.word	0xffceff88
 800692c:	ffff00ff 	.word	0xffff00ff

08006930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a32      	ldr	r2, [pc, #200]	@ (8006a0c <TIM_Base_SetConfig+0xdc>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d003      	beq.n	8006950 <TIM_Base_SetConfig+0x20>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a31      	ldr	r2, [pc, #196]	@ (8006a10 <TIM_Base_SetConfig+0xe0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d108      	bne.n	8006962 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2270      	movs	r2, #112	@ 0x70
 8006954:	4393      	bics	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a29      	ldr	r2, [pc, #164]	@ (8006a0c <TIM_Base_SetConfig+0xdc>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00f      	beq.n	800698a <TIM_Base_SetConfig+0x5a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a28      	ldr	r2, [pc, #160]	@ (8006a10 <TIM_Base_SetConfig+0xe0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d00b      	beq.n	800698a <TIM_Base_SetConfig+0x5a>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a27      	ldr	r2, [pc, #156]	@ (8006a14 <TIM_Base_SetConfig+0xe4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d007      	beq.n	800698a <TIM_Base_SetConfig+0x5a>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a26      	ldr	r2, [pc, #152]	@ (8006a18 <TIM_Base_SetConfig+0xe8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d003      	beq.n	800698a <TIM_Base_SetConfig+0x5a>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a25      	ldr	r2, [pc, #148]	@ (8006a1c <TIM_Base_SetConfig+0xec>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d108      	bne.n	800699c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	4a24      	ldr	r2, [pc, #144]	@ (8006a20 <TIM_Base_SetConfig+0xf0>)
 800698e:	4013      	ands	r3, r2
 8006990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4313      	orrs	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2280      	movs	r2, #128	@ 0x80
 80069a0:	4393      	bics	r3, r2
 80069a2:	001a      	movs	r2, r3
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a11      	ldr	r2, [pc, #68]	@ (8006a0c <TIM_Base_SetConfig+0xdc>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d007      	beq.n	80069da <TIM_Base_SetConfig+0xaa>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a12      	ldr	r2, [pc, #72]	@ (8006a18 <TIM_Base_SetConfig+0xe8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d003      	beq.n	80069da <TIM_Base_SetConfig+0xaa>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a11      	ldr	r2, [pc, #68]	@ (8006a1c <TIM_Base_SetConfig+0xec>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d103      	bne.n	80069e2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	691a      	ldr	r2, [r3, #16]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	2201      	movs	r2, #1
 80069ee:	4013      	ands	r3, r2
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d106      	bne.n	8006a02 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	2201      	movs	r2, #1
 80069fa:	4393      	bics	r3, r2
 80069fc:	001a      	movs	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	611a      	str	r2, [r3, #16]
  }
}
 8006a02:	46c0      	nop			@ (mov r8, r8)
 8006a04:	46bd      	mov	sp, r7
 8006a06:	b004      	add	sp, #16
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	46c0      	nop			@ (mov r8, r8)
 8006a0c:	40012c00 	.word	0x40012c00
 8006a10:	40000400 	.word	0x40000400
 8006a14:	40002000 	.word	0x40002000
 8006a18:	40014400 	.word	0x40014400
 8006a1c:	40014800 	.word	0x40014800
 8006a20:	fffffcff 	.word	0xfffffcff

08006a24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	4393      	bics	r3, r2
 8006a3c:	001a      	movs	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4a2e      	ldr	r2, [pc, #184]	@ (8006b0c <TIM_OC1_SetConfig+0xe8>)
 8006a52:	4013      	ands	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2203      	movs	r2, #3
 8006a5a:	4393      	bics	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	4393      	bics	r3, r2
 8006a6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a24      	ldr	r2, [pc, #144]	@ (8006b10 <TIM_OC1_SetConfig+0xec>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d007      	beq.n	8006a92 <TIM_OC1_SetConfig+0x6e>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a23      	ldr	r2, [pc, #140]	@ (8006b14 <TIM_OC1_SetConfig+0xf0>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d003      	beq.n	8006a92 <TIM_OC1_SetConfig+0x6e>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a22      	ldr	r2, [pc, #136]	@ (8006b18 <TIM_OC1_SetConfig+0xf4>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d10c      	bne.n	8006aac <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	2208      	movs	r2, #8
 8006a96:	4393      	bics	r3, r2
 8006a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2204      	movs	r2, #4
 8006aa8:	4393      	bics	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a18      	ldr	r2, [pc, #96]	@ (8006b10 <TIM_OC1_SetConfig+0xec>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d007      	beq.n	8006ac4 <TIM_OC1_SetConfig+0xa0>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a17      	ldr	r2, [pc, #92]	@ (8006b14 <TIM_OC1_SetConfig+0xf0>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d003      	beq.n	8006ac4 <TIM_OC1_SetConfig+0xa0>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a16      	ldr	r2, [pc, #88]	@ (8006b18 <TIM_OC1_SetConfig+0xf4>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d111      	bne.n	8006ae8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	4a15      	ldr	r2, [pc, #84]	@ (8006b1c <TIM_OC1_SetConfig+0xf8>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	4a14      	ldr	r2, [pc, #80]	@ (8006b20 <TIM_OC1_SetConfig+0xfc>)
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	621a      	str	r2, [r3, #32]
}
 8006b02:	46c0      	nop			@ (mov r8, r8)
 8006b04:	46bd      	mov	sp, r7
 8006b06:	b006      	add	sp, #24
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	46c0      	nop			@ (mov r8, r8)
 8006b0c:	fffeff8f 	.word	0xfffeff8f
 8006b10:	40012c00 	.word	0x40012c00
 8006b14:	40014400 	.word	0x40014400
 8006b18:	40014800 	.word	0x40014800
 8006b1c:	fffffeff 	.word	0xfffffeff
 8006b20:	fffffdff 	.word	0xfffffdff

08006b24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	2210      	movs	r2, #16
 8006b3a:	4393      	bics	r3, r2
 8006b3c:	001a      	movs	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	4a2c      	ldr	r2, [pc, #176]	@ (8006c04 <TIM_OC2_SetConfig+0xe0>)
 8006b52:	4013      	ands	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	4a2b      	ldr	r2, [pc, #172]	@ (8006c08 <TIM_OC2_SetConfig+0xe4>)
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	4393      	bics	r3, r2
 8006b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	011b      	lsls	r3, r3, #4
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a22      	ldr	r2, [pc, #136]	@ (8006c0c <TIM_OC2_SetConfig+0xe8>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d10d      	bne.n	8006ba2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2280      	movs	r2, #128	@ 0x80
 8006b8a:	4393      	bics	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2240      	movs	r2, #64	@ 0x40
 8006b9e:	4393      	bics	r3, r2
 8006ba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a19      	ldr	r2, [pc, #100]	@ (8006c0c <TIM_OC2_SetConfig+0xe8>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d007      	beq.n	8006bba <TIM_OC2_SetConfig+0x96>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a18      	ldr	r2, [pc, #96]	@ (8006c10 <TIM_OC2_SetConfig+0xec>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d003      	beq.n	8006bba <TIM_OC2_SetConfig+0x96>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a17      	ldr	r2, [pc, #92]	@ (8006c14 <TIM_OC2_SetConfig+0xf0>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d113      	bne.n	8006be2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	4a16      	ldr	r2, [pc, #88]	@ (8006c18 <TIM_OC2_SetConfig+0xf4>)
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	4a15      	ldr	r2, [pc, #84]	@ (8006c1c <TIM_OC2_SetConfig+0xf8>)
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	621a      	str	r2, [r3, #32]
}
 8006bfc:	46c0      	nop			@ (mov r8, r8)
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	b006      	add	sp, #24
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	feff8fff 	.word	0xfeff8fff
 8006c08:	fffffcff 	.word	0xfffffcff
 8006c0c:	40012c00 	.word	0x40012c00
 8006c10:	40014400 	.word	0x40014400
 8006c14:	40014800 	.word	0x40014800
 8006c18:	fffffbff 	.word	0xfffffbff
 8006c1c:	fffff7ff 	.word	0xfffff7ff

08006c20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	4a31      	ldr	r2, [pc, #196]	@ (8006cfc <TIM_OC3_SetConfig+0xdc>)
 8006c36:	401a      	ands	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4a2d      	ldr	r2, [pc, #180]	@ (8006d00 <TIM_OC3_SetConfig+0xe0>)
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2203      	movs	r2, #3
 8006c54:	4393      	bics	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	4a27      	ldr	r2, [pc, #156]	@ (8006d04 <TIM_OC3_SetConfig+0xe4>)
 8006c66:	4013      	ands	r3, r2
 8006c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	021b      	lsls	r3, r3, #8
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a23      	ldr	r2, [pc, #140]	@ (8006d08 <TIM_OC3_SetConfig+0xe8>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d10d      	bne.n	8006c9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	4a22      	ldr	r2, [pc, #136]	@ (8006d0c <TIM_OC3_SetConfig+0xec>)
 8006c82:	4013      	ands	r3, r2
 8006c84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	021b      	lsls	r3, r3, #8
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	4a1e      	ldr	r2, [pc, #120]	@ (8006d10 <TIM_OC3_SetConfig+0xf0>)
 8006c96:	4013      	ands	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8006d08 <TIM_OC3_SetConfig+0xe8>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d007      	beq.n	8006cb2 <TIM_OC3_SetConfig+0x92>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8006d14 <TIM_OC3_SetConfig+0xf4>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d003      	beq.n	8006cb2 <TIM_OC3_SetConfig+0x92>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a1a      	ldr	r2, [pc, #104]	@ (8006d18 <TIM_OC3_SetConfig+0xf8>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d113      	bne.n	8006cda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	4a19      	ldr	r2, [pc, #100]	@ (8006d1c <TIM_OC3_SetConfig+0xfc>)
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	4a18      	ldr	r2, [pc, #96]	@ (8006d20 <TIM_OC3_SetConfig+0x100>)
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	011b      	lsls	r3, r3, #4
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	011b      	lsls	r3, r3, #4
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	621a      	str	r2, [r3, #32]
}
 8006cf4:	46c0      	nop			@ (mov r8, r8)
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	b006      	add	sp, #24
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	fffffeff 	.word	0xfffffeff
 8006d00:	fffeff8f 	.word	0xfffeff8f
 8006d04:	fffffdff 	.word	0xfffffdff
 8006d08:	40012c00 	.word	0x40012c00
 8006d0c:	fffff7ff 	.word	0xfffff7ff
 8006d10:	fffffbff 	.word	0xfffffbff
 8006d14:	40014400 	.word	0x40014400
 8006d18:	40014800 	.word	0x40014800
 8006d1c:	ffffefff 	.word	0xffffefff
 8006d20:	ffffdfff 	.word	0xffffdfff

08006d24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	4a24      	ldr	r2, [pc, #144]	@ (8006dcc <TIM_OC4_SetConfig+0xa8>)
 8006d3a:	401a      	ands	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4a20      	ldr	r2, [pc, #128]	@ (8006dd0 <TIM_OC4_SetConfig+0xac>)
 8006d50:	4013      	ands	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4a1f      	ldr	r2, [pc, #124]	@ (8006dd4 <TIM_OC4_SetConfig+0xb0>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	021b      	lsls	r3, r3, #8
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8006dd8 <TIM_OC4_SetConfig+0xb4>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	031b      	lsls	r3, r3, #12
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a17      	ldr	r2, [pc, #92]	@ (8006ddc <TIM_OC4_SetConfig+0xb8>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d007      	beq.n	8006d94 <TIM_OC4_SetConfig+0x70>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a16      	ldr	r2, [pc, #88]	@ (8006de0 <TIM_OC4_SetConfig+0xbc>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d003      	beq.n	8006d94 <TIM_OC4_SetConfig+0x70>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a15      	ldr	r2, [pc, #84]	@ (8006de4 <TIM_OC4_SetConfig+0xc0>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d109      	bne.n	8006da8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	4a14      	ldr	r2, [pc, #80]	@ (8006de8 <TIM_OC4_SetConfig+0xc4>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	019b      	lsls	r3, r3, #6
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	621a      	str	r2, [r3, #32]
}
 8006dc2:	46c0      	nop			@ (mov r8, r8)
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	b006      	add	sp, #24
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	46c0      	nop			@ (mov r8, r8)
 8006dcc:	ffffefff 	.word	0xffffefff
 8006dd0:	feff8fff 	.word	0xfeff8fff
 8006dd4:	fffffcff 	.word	0xfffffcff
 8006dd8:	ffffdfff 	.word	0xffffdfff
 8006ddc:	40012c00 	.word	0x40012c00
 8006de0:	40014400 	.word	0x40014400
 8006de4:	40014800 	.word	0x40014800
 8006de8:	ffffbfff 	.word	0xffffbfff

08006dec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	4a21      	ldr	r2, [pc, #132]	@ (8006e88 <TIM_OC5_SetConfig+0x9c>)
 8006e02:	401a      	ands	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4a1d      	ldr	r2, [pc, #116]	@ (8006e8c <TIM_OC5_SetConfig+0xa0>)
 8006e18:	4013      	ands	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	4a19      	ldr	r2, [pc, #100]	@ (8006e90 <TIM_OC5_SetConfig+0xa4>)
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	041b      	lsls	r3, r3, #16
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a15      	ldr	r2, [pc, #84]	@ (8006e94 <TIM_OC5_SetConfig+0xa8>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d007      	beq.n	8006e52 <TIM_OC5_SetConfig+0x66>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a14      	ldr	r2, [pc, #80]	@ (8006e98 <TIM_OC5_SetConfig+0xac>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d003      	beq.n	8006e52 <TIM_OC5_SetConfig+0x66>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a13      	ldr	r2, [pc, #76]	@ (8006e9c <TIM_OC5_SetConfig+0xb0>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d109      	bne.n	8006e66 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	4a0c      	ldr	r2, [pc, #48]	@ (8006e88 <TIM_OC5_SetConfig+0x9c>)
 8006e56:	4013      	ands	r3, r2
 8006e58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	021b      	lsls	r3, r3, #8
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	621a      	str	r2, [r3, #32]
}
 8006e80:	46c0      	nop			@ (mov r8, r8)
 8006e82:	46bd      	mov	sp, r7
 8006e84:	b006      	add	sp, #24
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	fffeffff 	.word	0xfffeffff
 8006e8c:	fffeff8f 	.word	0xfffeff8f
 8006e90:	fffdffff 	.word	0xfffdffff
 8006e94:	40012c00 	.word	0x40012c00
 8006e98:	40014400 	.word	0x40014400
 8006e9c:	40014800 	.word	0x40014800

08006ea0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	4a22      	ldr	r2, [pc, #136]	@ (8006f40 <TIM_OC6_SetConfig+0xa0>)
 8006eb6:	401a      	ands	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4a1e      	ldr	r2, [pc, #120]	@ (8006f44 <TIM_OC6_SetConfig+0xa4>)
 8006ecc:	4013      	ands	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	021b      	lsls	r3, r3, #8
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	4a1a      	ldr	r2, [pc, #104]	@ (8006f48 <TIM_OC6_SetConfig+0xa8>)
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	051b      	lsls	r3, r3, #20
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a16      	ldr	r2, [pc, #88]	@ (8006f4c <TIM_OC6_SetConfig+0xac>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d007      	beq.n	8006f08 <TIM_OC6_SetConfig+0x68>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a15      	ldr	r2, [pc, #84]	@ (8006f50 <TIM_OC6_SetConfig+0xb0>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d003      	beq.n	8006f08 <TIM_OC6_SetConfig+0x68>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a14      	ldr	r2, [pc, #80]	@ (8006f54 <TIM_OC6_SetConfig+0xb4>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d109      	bne.n	8006f1c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	4a13      	ldr	r2, [pc, #76]	@ (8006f58 <TIM_OC6_SetConfig+0xb8>)
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	029b      	lsls	r3, r3, #10
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	621a      	str	r2, [r3, #32]
}
 8006f36:	46c0      	nop			@ (mov r8, r8)
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	b006      	add	sp, #24
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	46c0      	nop			@ (mov r8, r8)
 8006f40:	ffefffff 	.word	0xffefffff
 8006f44:	feff8fff 	.word	0xfeff8fff
 8006f48:	ffdfffff 	.word	0xffdfffff
 8006f4c:	40012c00 	.word	0x40012c00
 8006f50:	40014400 	.word	0x40014400
 8006f54:	40014800 	.word	0x40014800
 8006f58:	fffbffff 	.word	0xfffbffff

08006f5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	2201      	movs	r2, #1
 8006f74:	4393      	bics	r3, r2
 8006f76:	001a      	movs	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	22f0      	movs	r2, #240	@ 0xf0
 8006f86:	4393      	bics	r3, r2
 8006f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	011b      	lsls	r3, r3, #4
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	220a      	movs	r2, #10
 8006f98:	4393      	bics	r3, r2
 8006f9a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	621a      	str	r2, [r3, #32]
}
 8006fb0:	46c0      	nop			@ (mov r8, r8)
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	b006      	add	sp, #24
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	2210      	movs	r2, #16
 8006fd0:	4393      	bics	r3, r2
 8006fd2:	001a      	movs	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8007018 <TIM_TI2_ConfigInputStage+0x60>)
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	031b      	lsls	r3, r3, #12
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	22a0      	movs	r2, #160	@ 0xa0
 8006ff4:	4393      	bics	r3, r2
 8006ff6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	011b      	lsls	r3, r3, #4
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	621a      	str	r2, [r3, #32]
}
 800700e:	46c0      	nop			@ (mov r8, r8)
 8007010:	46bd      	mov	sp, r7
 8007012:	b006      	add	sp, #24
 8007014:	bd80      	pop	{r7, pc}
 8007016:	46c0      	nop			@ (mov r8, r8)
 8007018:	ffff0fff 	.word	0xffff0fff

0800701c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4a08      	ldr	r2, [pc, #32]	@ (8007050 <TIM_ITRx_SetConfig+0x34>)
 8007030:	4013      	ands	r3, r2
 8007032:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007034:	683a      	ldr	r2, [r7, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4313      	orrs	r3, r2
 800703a:	2207      	movs	r2, #7
 800703c:	4313      	orrs	r3, r2
 800703e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	609a      	str	r2, [r3, #8]
}
 8007046:	46c0      	nop			@ (mov r8, r8)
 8007048:	46bd      	mov	sp, r7
 800704a:	b004      	add	sp, #16
 800704c:	bd80      	pop	{r7, pc}
 800704e:	46c0      	nop			@ (mov r8, r8)
 8007050:	ffcfff8f 	.word	0xffcfff8f

08007054 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
 8007060:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	4a09      	ldr	r2, [pc, #36]	@ (8007090 <TIM_ETR_SetConfig+0x3c>)
 800706c:	4013      	ands	r3, r2
 800706e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	021a      	lsls	r2, r3, #8
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	431a      	orrs	r2, r3
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	4313      	orrs	r3, r2
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	4313      	orrs	r3, r2
 8007080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	609a      	str	r2, [r3, #8]
}
 8007088:	46c0      	nop			@ (mov r8, r8)
 800708a:	46bd      	mov	sp, r7
 800708c:	b006      	add	sp, #24
 800708e:	bd80      	pop	{r7, pc}
 8007090:	ffff00ff 	.word	0xffff00ff

08007094 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	221f      	movs	r2, #31
 80070a4:	4013      	ands	r3, r2
 80070a6:	2201      	movs	r2, #1
 80070a8:	409a      	lsls	r2, r3
 80070aa:	0013      	movs	r3, r2
 80070ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	43d2      	mvns	r2, r2
 80070b6:	401a      	ands	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6a1a      	ldr	r2, [r3, #32]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	211f      	movs	r1, #31
 80070c4:	400b      	ands	r3, r1
 80070c6:	6879      	ldr	r1, [r7, #4]
 80070c8:	4099      	lsls	r1, r3
 80070ca:	000b      	movs	r3, r1
 80070cc:	431a      	orrs	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	621a      	str	r2, [r3, #32]
}
 80070d2:	46c0      	nop			@ (mov r8, r8)
 80070d4:	46bd      	mov	sp, r7
 80070d6:	b006      	add	sp, #24
 80070d8:	bd80      	pop	{r7, pc}
	...

080070dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	223c      	movs	r2, #60	@ 0x3c
 80070ea:	5c9b      	ldrb	r3, [r3, r2]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d101      	bne.n	80070f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070f0:	2302      	movs	r3, #2
 80070f2:	e04a      	b.n	800718a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	223c      	movs	r2, #60	@ 0x3c
 80070f8:	2101      	movs	r1, #1
 80070fa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	223d      	movs	r2, #61	@ 0x3d
 8007100:	2102      	movs	r1, #2
 8007102:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a1e      	ldr	r2, [pc, #120]	@ (8007194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d108      	bne.n	8007130 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4a1d      	ldr	r2, [pc, #116]	@ (8007198 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007122:	4013      	ands	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	4313      	orrs	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2270      	movs	r2, #112	@ 0x70
 8007134:	4393      	bics	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a11      	ldr	r2, [pc, #68]	@ (8007194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d004      	beq.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a10      	ldr	r2, [pc, #64]	@ (800719c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d10c      	bne.n	8007178 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2280      	movs	r2, #128	@ 0x80
 8007162:	4393      	bics	r3, r2
 8007164:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	4313      	orrs	r3, r2
 800716e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	223d      	movs	r2, #61	@ 0x3d
 800717c:	2101      	movs	r1, #1
 800717e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	223c      	movs	r2, #60	@ 0x3c
 8007184:	2100      	movs	r1, #0
 8007186:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	0018      	movs	r0, r3
 800718c:	46bd      	mov	sp, r7
 800718e:	b004      	add	sp, #16
 8007190:	bd80      	pop	{r7, pc}
 8007192:	46c0      	nop			@ (mov r8, r8)
 8007194:	40012c00 	.word	0x40012c00
 8007198:	ff0fffff 	.word	0xff0fffff
 800719c:	40000400 	.word	0x40000400

080071a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	223c      	movs	r2, #60	@ 0x3c
 80071b2:	5c9b      	ldrb	r3, [r3, r2]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d101      	bne.n	80071bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80071b8:	2302      	movs	r3, #2
 80071ba:	e06f      	b.n	800729c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	223c      	movs	r2, #60	@ 0x3c
 80071c0:	2101      	movs	r1, #1
 80071c2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	22ff      	movs	r2, #255	@ 0xff
 80071c8:	4393      	bics	r3, r2
 80071ca:	001a      	movs	r2, r3
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4a33      	ldr	r2, [pc, #204]	@ (80072a4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80071d8:	401a      	ands	r2, r3
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	4313      	orrs	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	4a30      	ldr	r2, [pc, #192]	@ (80072a8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80071e6:	401a      	ands	r2, r3
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4a2e      	ldr	r2, [pc, #184]	@ (80072ac <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80071f4:	401a      	ands	r2, r3
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	4a2b      	ldr	r2, [pc, #172]	@ (80072b0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007202:	401a      	ands	r2, r3
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	4313      	orrs	r3, r2
 800720a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4a29      	ldr	r2, [pc, #164]	@ (80072b4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007210:	401a      	ands	r2, r3
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	4313      	orrs	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4a26      	ldr	r2, [pc, #152]	@ (80072b8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800721e:	401a      	ands	r2, r3
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007224:	4313      	orrs	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4a24      	ldr	r2, [pc, #144]	@ (80072bc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800722c:	401a      	ands	r2, r3
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	041b      	lsls	r3, r3, #16
 8007234:	4313      	orrs	r3, r2
 8007236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4a21      	ldr	r2, [pc, #132]	@ (80072c0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800723c:	401a      	ands	r2, r3
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	4313      	orrs	r3, r2
 8007244:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a1e      	ldr	r2, [pc, #120]	@ (80072c4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d11c      	bne.n	800728a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4a1d      	ldr	r2, [pc, #116]	@ (80072c8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8007254:	401a      	ands	r2, r3
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800725a:	051b      	lsls	r3, r3, #20
 800725c:	4313      	orrs	r3, r2
 800725e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4a1a      	ldr	r2, [pc, #104]	@ (80072cc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8007264:	401a      	ands	r2, r3
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	4313      	orrs	r3, r2
 800726c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	4a17      	ldr	r2, [pc, #92]	@ (80072d0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8007272:	401a      	ands	r2, r3
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007278:	4313      	orrs	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4a15      	ldr	r2, [pc, #84]	@ (80072d4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007280:	401a      	ands	r2, r3
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007286:	4313      	orrs	r3, r2
 8007288:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	223c      	movs	r2, #60	@ 0x3c
 8007296:	2100      	movs	r1, #0
 8007298:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	0018      	movs	r0, r3
 800729e:	46bd      	mov	sp, r7
 80072a0:	b004      	add	sp, #16
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	fffffcff 	.word	0xfffffcff
 80072a8:	fffffbff 	.word	0xfffffbff
 80072ac:	fffff7ff 	.word	0xfffff7ff
 80072b0:	ffffefff 	.word	0xffffefff
 80072b4:	ffffdfff 	.word	0xffffdfff
 80072b8:	ffffbfff 	.word	0xffffbfff
 80072bc:	fff0ffff 	.word	0xfff0ffff
 80072c0:	efffffff 	.word	0xefffffff
 80072c4:	40012c00 	.word	0x40012c00
 80072c8:	ff0fffff 	.word	0xff0fffff
 80072cc:	feffffff 	.word	0xfeffffff
 80072d0:	fdffffff 	.word	0xfdffffff
 80072d4:	dfffffff 	.word	0xdfffffff

080072d8 <memset>:
 80072d8:	0003      	movs	r3, r0
 80072da:	1882      	adds	r2, r0, r2
 80072dc:	4293      	cmp	r3, r2
 80072de:	d100      	bne.n	80072e2 <memset+0xa>
 80072e0:	4770      	bx	lr
 80072e2:	7019      	strb	r1, [r3, #0]
 80072e4:	3301      	adds	r3, #1
 80072e6:	e7f9      	b.n	80072dc <memset+0x4>

080072e8 <__errno>:
 80072e8:	4b01      	ldr	r3, [pc, #4]	@ (80072f0 <__errno+0x8>)
 80072ea:	6818      	ldr	r0, [r3, #0]
 80072ec:	4770      	bx	lr
 80072ee:	46c0      	nop			@ (mov r8, r8)
 80072f0:	20000034 	.word	0x20000034

080072f4 <__libc_init_array>:
 80072f4:	b570      	push	{r4, r5, r6, lr}
 80072f6:	2600      	movs	r6, #0
 80072f8:	4c0c      	ldr	r4, [pc, #48]	@ (800732c <__libc_init_array+0x38>)
 80072fa:	4d0d      	ldr	r5, [pc, #52]	@ (8007330 <__libc_init_array+0x3c>)
 80072fc:	1b64      	subs	r4, r4, r5
 80072fe:	10a4      	asrs	r4, r4, #2
 8007300:	42a6      	cmp	r6, r4
 8007302:	d109      	bne.n	8007318 <__libc_init_array+0x24>
 8007304:	2600      	movs	r6, #0
 8007306:	f000 fa07 	bl	8007718 <_init>
 800730a:	4c0a      	ldr	r4, [pc, #40]	@ (8007334 <__libc_init_array+0x40>)
 800730c:	4d0a      	ldr	r5, [pc, #40]	@ (8007338 <__libc_init_array+0x44>)
 800730e:	1b64      	subs	r4, r4, r5
 8007310:	10a4      	asrs	r4, r4, #2
 8007312:	42a6      	cmp	r6, r4
 8007314:	d105      	bne.n	8007322 <__libc_init_array+0x2e>
 8007316:	bd70      	pop	{r4, r5, r6, pc}
 8007318:	00b3      	lsls	r3, r6, #2
 800731a:	58eb      	ldr	r3, [r5, r3]
 800731c:	4798      	blx	r3
 800731e:	3601      	adds	r6, #1
 8007320:	e7ee      	b.n	8007300 <__libc_init_array+0xc>
 8007322:	00b3      	lsls	r3, r6, #2
 8007324:	58eb      	ldr	r3, [r5, r3]
 8007326:	4798      	blx	r3
 8007328:	3601      	adds	r6, #1
 800732a:	e7f2      	b.n	8007312 <__libc_init_array+0x1e>
 800732c:	08007884 	.word	0x08007884
 8007330:	08007884 	.word	0x08007884
 8007334:	08007888 	.word	0x08007888
 8007338:	08007884 	.word	0x08007884

0800733c <log>:
 800733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733e:	0004      	movs	r4, r0
 8007340:	000d      	movs	r5, r1
 8007342:	f000 f837 	bl	80073b4 <__ieee754_log>
 8007346:	0022      	movs	r2, r4
 8007348:	0006      	movs	r6, r0
 800734a:	000f      	movs	r7, r1
 800734c:	002b      	movs	r3, r5
 800734e:	0020      	movs	r0, r4
 8007350:	0029      	movs	r1, r5
 8007352:	f7fb fd01 	bl	8002d58 <__aeabi_dcmpun>
 8007356:	2800      	cmp	r0, #0
 8007358:	d115      	bne.n	8007386 <log+0x4a>
 800735a:	2200      	movs	r2, #0
 800735c:	2300      	movs	r3, #0
 800735e:	0020      	movs	r0, r4
 8007360:	0029      	movs	r1, r5
 8007362:	f7f8 ff87 	bl	8000274 <__aeabi_dcmpgt>
 8007366:	2800      	cmp	r0, #0
 8007368:	d10d      	bne.n	8007386 <log+0x4a>
 800736a:	2200      	movs	r2, #0
 800736c:	2300      	movs	r3, #0
 800736e:	0020      	movs	r0, r4
 8007370:	0029      	movs	r1, r5
 8007372:	f7f8 ff65 	bl	8000240 <__aeabi_dcmpeq>
 8007376:	2800      	cmp	r0, #0
 8007378:	d008      	beq.n	800738c <log+0x50>
 800737a:	f7ff ffb5 	bl	80072e8 <__errno>
 800737e:	2322      	movs	r3, #34	@ 0x22
 8007380:	2600      	movs	r6, #0
 8007382:	4f07      	ldr	r7, [pc, #28]	@ (80073a0 <log+0x64>)
 8007384:	6003      	str	r3, [r0, #0]
 8007386:	0030      	movs	r0, r6
 8007388:	0039      	movs	r1, r7
 800738a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800738c:	f7ff ffac 	bl	80072e8 <__errno>
 8007390:	2321      	movs	r3, #33	@ 0x21
 8007392:	6003      	str	r3, [r0, #0]
 8007394:	4803      	ldr	r0, [pc, #12]	@ (80073a4 <log+0x68>)
 8007396:	f000 f807 	bl	80073a8 <nan>
 800739a:	0006      	movs	r6, r0
 800739c:	000f      	movs	r7, r1
 800739e:	e7f2      	b.n	8007386 <log+0x4a>
 80073a0:	fff00000 	.word	0xfff00000
 80073a4:	08007880 	.word	0x08007880

080073a8 <nan>:
 80073a8:	2000      	movs	r0, #0
 80073aa:	4901      	ldr	r1, [pc, #4]	@ (80073b0 <nan+0x8>)
 80073ac:	4770      	bx	lr
 80073ae:	46c0      	nop			@ (mov r8, r8)
 80073b0:	7ff80000 	.word	0x7ff80000

080073b4 <__ieee754_log>:
 80073b4:	2380      	movs	r3, #128	@ 0x80
 80073b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073b8:	035b      	lsls	r3, r3, #13
 80073ba:	000e      	movs	r6, r1
 80073bc:	b08d      	sub	sp, #52	@ 0x34
 80073be:	4299      	cmp	r1, r3
 80073c0:	da23      	bge.n	800740a <__ieee754_log+0x56>
 80073c2:	004b      	lsls	r3, r1, #1
 80073c4:	085b      	lsrs	r3, r3, #1
 80073c6:	4303      	orrs	r3, r0
 80073c8:	d107      	bne.n	80073da <__ieee754_log+0x26>
 80073ca:	2200      	movs	r2, #0
 80073cc:	2300      	movs	r3, #0
 80073ce:	2000      	movs	r0, #0
 80073d0:	49b4      	ldr	r1, [pc, #720]	@ (80076a4 <__ieee754_log+0x2f0>)
 80073d2:	f7fa fa19 	bl	8001808 <__aeabi_ddiv>
 80073d6:	b00d      	add	sp, #52	@ 0x34
 80073d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073da:	2900      	cmp	r1, #0
 80073dc:	da06      	bge.n	80073ec <__ieee754_log+0x38>
 80073de:	0002      	movs	r2, r0
 80073e0:	000b      	movs	r3, r1
 80073e2:	f7fb f91d 	bl	8002620 <__aeabi_dsub>
 80073e6:	2200      	movs	r2, #0
 80073e8:	2300      	movs	r3, #0
 80073ea:	e7f2      	b.n	80073d2 <__ieee754_log+0x1e>
 80073ec:	4bae      	ldr	r3, [pc, #696]	@ (80076a8 <__ieee754_log+0x2f4>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	f7fa fe4e 	bl	8002090 <__aeabi_dmul>
 80073f4:	2336      	movs	r3, #54	@ 0x36
 80073f6:	000e      	movs	r6, r1
 80073f8:	425b      	negs	r3, r3
 80073fa:	4aac      	ldr	r2, [pc, #688]	@ (80076ac <__ieee754_log+0x2f8>)
 80073fc:	4296      	cmp	r6, r2
 80073fe:	dd06      	ble.n	800740e <__ieee754_log+0x5a>
 8007400:	0002      	movs	r2, r0
 8007402:	000b      	movs	r3, r1
 8007404:	f7f9 fe9c 	bl	8001140 <__aeabi_dadd>
 8007408:	e7e5      	b.n	80073d6 <__ieee754_log+0x22>
 800740a:	2300      	movs	r3, #0
 800740c:	e7f5      	b.n	80073fa <__ieee754_log+0x46>
 800740e:	4ca8      	ldr	r4, [pc, #672]	@ (80076b0 <__ieee754_log+0x2fc>)
 8007410:	1532      	asrs	r2, r6, #20
 8007412:	1912      	adds	r2, r2, r4
 8007414:	0336      	lsls	r6, r6, #12
 8007416:	4ca7      	ldr	r4, [pc, #668]	@ (80076b4 <__ieee754_log+0x300>)
 8007418:	18d2      	adds	r2, r2, r3
 800741a:	0b33      	lsrs	r3, r6, #12
 800741c:	9302      	str	r3, [sp, #8]
 800741e:	191b      	adds	r3, r3, r4
 8007420:	2480      	movs	r4, #128	@ 0x80
 8007422:	0364      	lsls	r4, r4, #13
 8007424:	4023      	ands	r3, r4
 8007426:	4ca4      	ldr	r4, [pc, #656]	@ (80076b8 <__ieee754_log+0x304>)
 8007428:	9d02      	ldr	r5, [sp, #8]
 800742a:	405c      	eors	r4, r3
 800742c:	151b      	asrs	r3, r3, #20
 800742e:	189b      	adds	r3, r3, r2
 8007430:	4325      	orrs	r5, r4
 8007432:	2200      	movs	r2, #0
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	0029      	movs	r1, r5
 8007438:	4b9f      	ldr	r3, [pc, #636]	@ (80076b8 <__ieee754_log+0x304>)
 800743a:	f7fb f8f1 	bl	8002620 <__aeabi_dsub>
 800743e:	9b02      	ldr	r3, [sp, #8]
 8007440:	0006      	movs	r6, r0
 8007442:	3302      	adds	r3, #2
 8007444:	031b      	lsls	r3, r3, #12
 8007446:	000f      	movs	r7, r1
 8007448:	2200      	movs	r2, #0
 800744a:	0b1b      	lsrs	r3, r3, #12
 800744c:	2b02      	cmp	r3, #2
 800744e:	dc64      	bgt.n	800751a <__ieee754_log+0x166>
 8007450:	2300      	movs	r3, #0
 8007452:	f7f8 fef5 	bl	8000240 <__aeabi_dcmpeq>
 8007456:	2800      	cmp	r0, #0
 8007458:	d019      	beq.n	800748e <__ieee754_log+0xda>
 800745a:	9b00      	ldr	r3, [sp, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d100      	bne.n	8007462 <__ieee754_log+0xae>
 8007460:	e11c      	b.n	800769c <__ieee754_log+0x2e8>
 8007462:	0018      	movs	r0, r3
 8007464:	f7fb fc9a 	bl	8002d9c <__aeabi_i2d>
 8007468:	4a94      	ldr	r2, [pc, #592]	@ (80076bc <__ieee754_log+0x308>)
 800746a:	4b95      	ldr	r3, [pc, #596]	@ (80076c0 <__ieee754_log+0x30c>)
 800746c:	0004      	movs	r4, r0
 800746e:	000d      	movs	r5, r1
 8007470:	f7fa fe0e 	bl	8002090 <__aeabi_dmul>
 8007474:	4a93      	ldr	r2, [pc, #588]	@ (80076c4 <__ieee754_log+0x310>)
 8007476:	0006      	movs	r6, r0
 8007478:	000f      	movs	r7, r1
 800747a:	4b93      	ldr	r3, [pc, #588]	@ (80076c8 <__ieee754_log+0x314>)
 800747c:	0020      	movs	r0, r4
 800747e:	0029      	movs	r1, r5
 8007480:	f7fa fe06 	bl	8002090 <__aeabi_dmul>
 8007484:	0002      	movs	r2, r0
 8007486:	000b      	movs	r3, r1
 8007488:	0030      	movs	r0, r6
 800748a:	0039      	movs	r1, r7
 800748c:	e7ba      	b.n	8007404 <__ieee754_log+0x50>
 800748e:	4a8f      	ldr	r2, [pc, #572]	@ (80076cc <__ieee754_log+0x318>)
 8007490:	4b8f      	ldr	r3, [pc, #572]	@ (80076d0 <__ieee754_log+0x31c>)
 8007492:	0030      	movs	r0, r6
 8007494:	0039      	movs	r1, r7
 8007496:	f7fa fdfb 	bl	8002090 <__aeabi_dmul>
 800749a:	0002      	movs	r2, r0
 800749c:	000b      	movs	r3, r1
 800749e:	2000      	movs	r0, #0
 80074a0:	498c      	ldr	r1, [pc, #560]	@ (80076d4 <__ieee754_log+0x320>)
 80074a2:	f7fb f8bd 	bl	8002620 <__aeabi_dsub>
 80074a6:	0032      	movs	r2, r6
 80074a8:	0004      	movs	r4, r0
 80074aa:	000d      	movs	r5, r1
 80074ac:	003b      	movs	r3, r7
 80074ae:	0030      	movs	r0, r6
 80074b0:	0039      	movs	r1, r7
 80074b2:	f7fa fded 	bl	8002090 <__aeabi_dmul>
 80074b6:	000b      	movs	r3, r1
 80074b8:	0002      	movs	r2, r0
 80074ba:	0029      	movs	r1, r5
 80074bc:	0020      	movs	r0, r4
 80074be:	f7fa fde7 	bl	8002090 <__aeabi_dmul>
 80074c2:	9b00      	ldr	r3, [sp, #0]
 80074c4:	9002      	str	r0, [sp, #8]
 80074c6:	9103      	str	r1, [sp, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d106      	bne.n	80074da <__ieee754_log+0x126>
 80074cc:	0002      	movs	r2, r0
 80074ce:	000b      	movs	r3, r1
 80074d0:	0030      	movs	r0, r6
 80074d2:	0039      	movs	r1, r7
 80074d4:	f7fb f8a4 	bl	8002620 <__aeabi_dsub>
 80074d8:	e77d      	b.n	80073d6 <__ieee754_log+0x22>
 80074da:	9800      	ldr	r0, [sp, #0]
 80074dc:	f7fb fc5e 	bl	8002d9c <__aeabi_i2d>
 80074e0:	4a76      	ldr	r2, [pc, #472]	@ (80076bc <__ieee754_log+0x308>)
 80074e2:	4b77      	ldr	r3, [pc, #476]	@ (80076c0 <__ieee754_log+0x30c>)
 80074e4:	0004      	movs	r4, r0
 80074e6:	000d      	movs	r5, r1
 80074e8:	f7fa fdd2 	bl	8002090 <__aeabi_dmul>
 80074ec:	4a75      	ldr	r2, [pc, #468]	@ (80076c4 <__ieee754_log+0x310>)
 80074ee:	9000      	str	r0, [sp, #0]
 80074f0:	9101      	str	r1, [sp, #4]
 80074f2:	4b75      	ldr	r3, [pc, #468]	@ (80076c8 <__ieee754_log+0x314>)
 80074f4:	0020      	movs	r0, r4
 80074f6:	0029      	movs	r1, r5
 80074f8:	f7fa fdca 	bl	8002090 <__aeabi_dmul>
 80074fc:	0002      	movs	r2, r0
 80074fe:	000b      	movs	r3, r1
 8007500:	9802      	ldr	r0, [sp, #8]
 8007502:	9903      	ldr	r1, [sp, #12]
 8007504:	f7fb f88c 	bl	8002620 <__aeabi_dsub>
 8007508:	0032      	movs	r2, r6
 800750a:	003b      	movs	r3, r7
 800750c:	f7fb f888 	bl	8002620 <__aeabi_dsub>
 8007510:	0002      	movs	r2, r0
 8007512:	000b      	movs	r3, r1
 8007514:	9800      	ldr	r0, [sp, #0]
 8007516:	9901      	ldr	r1, [sp, #4]
 8007518:	e7dc      	b.n	80074d4 <__ieee754_log+0x120>
 800751a:	2380      	movs	r3, #128	@ 0x80
 800751c:	05db      	lsls	r3, r3, #23
 800751e:	f7f9 fe0f 	bl	8001140 <__aeabi_dadd>
 8007522:	0002      	movs	r2, r0
 8007524:	000b      	movs	r3, r1
 8007526:	0030      	movs	r0, r6
 8007528:	0039      	movs	r1, r7
 800752a:	f7fa f96d 	bl	8001808 <__aeabi_ddiv>
 800752e:	9004      	str	r0, [sp, #16]
 8007530:	9105      	str	r1, [sp, #20]
 8007532:	9800      	ldr	r0, [sp, #0]
 8007534:	f7fb fc32 	bl	8002d9c <__aeabi_i2d>
 8007538:	9a04      	ldr	r2, [sp, #16]
 800753a:	9b05      	ldr	r3, [sp, #20]
 800753c:	9006      	str	r0, [sp, #24]
 800753e:	9107      	str	r1, [sp, #28]
 8007540:	0010      	movs	r0, r2
 8007542:	0019      	movs	r1, r3
 8007544:	f7fa fda4 	bl	8002090 <__aeabi_dmul>
 8007548:	4a63      	ldr	r2, [pc, #396]	@ (80076d8 <__ieee754_log+0x324>)
 800754a:	9b02      	ldr	r3, [sp, #8]
 800754c:	4694      	mov	ip, r2
 800754e:	4463      	add	r3, ip
 8007550:	0002      	movs	r2, r0
 8007552:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007554:	000b      	movs	r3, r1
 8007556:	9008      	str	r0, [sp, #32]
 8007558:	9109      	str	r1, [sp, #36]	@ 0x24
 800755a:	f7fa fd99 	bl	8002090 <__aeabi_dmul>
 800755e:	0004      	movs	r4, r0
 8007560:	000d      	movs	r5, r1
 8007562:	4a5e      	ldr	r2, [pc, #376]	@ (80076dc <__ieee754_log+0x328>)
 8007564:	4b5e      	ldr	r3, [pc, #376]	@ (80076e0 <__ieee754_log+0x32c>)
 8007566:	f7fa fd93 	bl	8002090 <__aeabi_dmul>
 800756a:	4a5e      	ldr	r2, [pc, #376]	@ (80076e4 <__ieee754_log+0x330>)
 800756c:	4b5e      	ldr	r3, [pc, #376]	@ (80076e8 <__ieee754_log+0x334>)
 800756e:	f7f9 fde7 	bl	8001140 <__aeabi_dadd>
 8007572:	0022      	movs	r2, r4
 8007574:	002b      	movs	r3, r5
 8007576:	f7fa fd8b 	bl	8002090 <__aeabi_dmul>
 800757a:	4a5c      	ldr	r2, [pc, #368]	@ (80076ec <__ieee754_log+0x338>)
 800757c:	4b5c      	ldr	r3, [pc, #368]	@ (80076f0 <__ieee754_log+0x33c>)
 800757e:	f7f9 fddf 	bl	8001140 <__aeabi_dadd>
 8007582:	0022      	movs	r2, r4
 8007584:	002b      	movs	r3, r5
 8007586:	f7fa fd83 	bl	8002090 <__aeabi_dmul>
 800758a:	4a5a      	ldr	r2, [pc, #360]	@ (80076f4 <__ieee754_log+0x340>)
 800758c:	4b5a      	ldr	r3, [pc, #360]	@ (80076f8 <__ieee754_log+0x344>)
 800758e:	f7f9 fdd7 	bl	8001140 <__aeabi_dadd>
 8007592:	9a08      	ldr	r2, [sp, #32]
 8007594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007596:	f7fa fd7b 	bl	8002090 <__aeabi_dmul>
 800759a:	4a58      	ldr	r2, [pc, #352]	@ (80076fc <__ieee754_log+0x348>)
 800759c:	9008      	str	r0, [sp, #32]
 800759e:	9109      	str	r1, [sp, #36]	@ 0x24
 80075a0:	4b57      	ldr	r3, [pc, #348]	@ (8007700 <__ieee754_log+0x34c>)
 80075a2:	0020      	movs	r0, r4
 80075a4:	0029      	movs	r1, r5
 80075a6:	f7fa fd73 	bl	8002090 <__aeabi_dmul>
 80075aa:	4a56      	ldr	r2, [pc, #344]	@ (8007704 <__ieee754_log+0x350>)
 80075ac:	4b56      	ldr	r3, [pc, #344]	@ (8007708 <__ieee754_log+0x354>)
 80075ae:	f7f9 fdc7 	bl	8001140 <__aeabi_dadd>
 80075b2:	0022      	movs	r2, r4
 80075b4:	002b      	movs	r3, r5
 80075b6:	f7fa fd6b 	bl	8002090 <__aeabi_dmul>
 80075ba:	4a54      	ldr	r2, [pc, #336]	@ (800770c <__ieee754_log+0x358>)
 80075bc:	4b54      	ldr	r3, [pc, #336]	@ (8007710 <__ieee754_log+0x35c>)
 80075be:	f7f9 fdbf 	bl	8001140 <__aeabi_dadd>
 80075c2:	0022      	movs	r2, r4
 80075c4:	002b      	movs	r3, r5
 80075c6:	f7fa fd63 	bl	8002090 <__aeabi_dmul>
 80075ca:	0002      	movs	r2, r0
 80075cc:	000b      	movs	r3, r1
 80075ce:	9808      	ldr	r0, [sp, #32]
 80075d0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80075d2:	f7f9 fdb5 	bl	8001140 <__aeabi_dadd>
 80075d6:	9a02      	ldr	r2, [sp, #8]
 80075d8:	4b4e      	ldr	r3, [pc, #312]	@ (8007714 <__ieee754_log+0x360>)
 80075da:	0004      	movs	r4, r0
 80075dc:	1a9b      	subs	r3, r3, r2
 80075de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80075e0:	000d      	movs	r5, r1
 80075e2:	4313      	orrs	r3, r2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	dd34      	ble.n	8007652 <__ieee754_log+0x29e>
 80075e8:	2200      	movs	r2, #0
 80075ea:	4b3a      	ldr	r3, [pc, #232]	@ (80076d4 <__ieee754_log+0x320>)
 80075ec:	0030      	movs	r0, r6
 80075ee:	0039      	movs	r1, r7
 80075f0:	f7fa fd4e 	bl	8002090 <__aeabi_dmul>
 80075f4:	0032      	movs	r2, r6
 80075f6:	003b      	movs	r3, r7
 80075f8:	f7fa fd4a 	bl	8002090 <__aeabi_dmul>
 80075fc:	0002      	movs	r2, r0
 80075fe:	000b      	movs	r3, r1
 8007600:	9002      	str	r0, [sp, #8]
 8007602:	9103      	str	r1, [sp, #12]
 8007604:	0020      	movs	r0, r4
 8007606:	0029      	movs	r1, r5
 8007608:	f7f9 fd9a 	bl	8001140 <__aeabi_dadd>
 800760c:	9a04      	ldr	r2, [sp, #16]
 800760e:	9b05      	ldr	r3, [sp, #20]
 8007610:	f7fa fd3e 	bl	8002090 <__aeabi_dmul>
 8007614:	9b00      	ldr	r3, [sp, #0]
 8007616:	0004      	movs	r4, r0
 8007618:	000d      	movs	r5, r1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d106      	bne.n	800762c <__ieee754_log+0x278>
 800761e:	0002      	movs	r2, r0
 8007620:	000b      	movs	r3, r1
 8007622:	9802      	ldr	r0, [sp, #8]
 8007624:	9903      	ldr	r1, [sp, #12]
 8007626:	f7fa fffb 	bl	8002620 <__aeabi_dsub>
 800762a:	e74f      	b.n	80074cc <__ieee754_log+0x118>
 800762c:	4a23      	ldr	r2, [pc, #140]	@ (80076bc <__ieee754_log+0x308>)
 800762e:	4b24      	ldr	r3, [pc, #144]	@ (80076c0 <__ieee754_log+0x30c>)
 8007630:	9806      	ldr	r0, [sp, #24]
 8007632:	9907      	ldr	r1, [sp, #28]
 8007634:	f7fa fd2c 	bl	8002090 <__aeabi_dmul>
 8007638:	4a22      	ldr	r2, [pc, #136]	@ (80076c4 <__ieee754_log+0x310>)
 800763a:	9000      	str	r0, [sp, #0]
 800763c:	9101      	str	r1, [sp, #4]
 800763e:	9806      	ldr	r0, [sp, #24]
 8007640:	9907      	ldr	r1, [sp, #28]
 8007642:	4b21      	ldr	r3, [pc, #132]	@ (80076c8 <__ieee754_log+0x314>)
 8007644:	f7fa fd24 	bl	8002090 <__aeabi_dmul>
 8007648:	0022      	movs	r2, r4
 800764a:	002b      	movs	r3, r5
 800764c:	f7f9 fd78 	bl	8001140 <__aeabi_dadd>
 8007650:	e754      	b.n	80074fc <__ieee754_log+0x148>
 8007652:	0002      	movs	r2, r0
 8007654:	000b      	movs	r3, r1
 8007656:	0030      	movs	r0, r6
 8007658:	0039      	movs	r1, r7
 800765a:	f7fa ffe1 	bl	8002620 <__aeabi_dsub>
 800765e:	9a04      	ldr	r2, [sp, #16]
 8007660:	9b05      	ldr	r3, [sp, #20]
 8007662:	f7fa fd15 	bl	8002090 <__aeabi_dmul>
 8007666:	9b00      	ldr	r3, [sp, #0]
 8007668:	0004      	movs	r4, r0
 800766a:	000d      	movs	r5, r1
 800766c:	2b00      	cmp	r3, #0
 800766e:	d102      	bne.n	8007676 <__ieee754_log+0x2c2>
 8007670:	0002      	movs	r2, r0
 8007672:	000b      	movs	r3, r1
 8007674:	e72c      	b.n	80074d0 <__ieee754_log+0x11c>
 8007676:	4a11      	ldr	r2, [pc, #68]	@ (80076bc <__ieee754_log+0x308>)
 8007678:	4b11      	ldr	r3, [pc, #68]	@ (80076c0 <__ieee754_log+0x30c>)
 800767a:	9806      	ldr	r0, [sp, #24]
 800767c:	9907      	ldr	r1, [sp, #28]
 800767e:	f7fa fd07 	bl	8002090 <__aeabi_dmul>
 8007682:	4a10      	ldr	r2, [pc, #64]	@ (80076c4 <__ieee754_log+0x310>)
 8007684:	9000      	str	r0, [sp, #0]
 8007686:	9101      	str	r1, [sp, #4]
 8007688:	9806      	ldr	r0, [sp, #24]
 800768a:	9907      	ldr	r1, [sp, #28]
 800768c:	4b0e      	ldr	r3, [pc, #56]	@ (80076c8 <__ieee754_log+0x314>)
 800768e:	f7fa fcff 	bl	8002090 <__aeabi_dmul>
 8007692:	0002      	movs	r2, r0
 8007694:	000b      	movs	r3, r1
 8007696:	0020      	movs	r0, r4
 8007698:	0029      	movs	r1, r5
 800769a:	e733      	b.n	8007504 <__ieee754_log+0x150>
 800769c:	2000      	movs	r0, #0
 800769e:	2100      	movs	r1, #0
 80076a0:	e699      	b.n	80073d6 <__ieee754_log+0x22>
 80076a2:	46c0      	nop			@ (mov r8, r8)
 80076a4:	c3500000 	.word	0xc3500000
 80076a8:	43500000 	.word	0x43500000
 80076ac:	7fefffff 	.word	0x7fefffff
 80076b0:	fffffc01 	.word	0xfffffc01
 80076b4:	00095f64 	.word	0x00095f64
 80076b8:	3ff00000 	.word	0x3ff00000
 80076bc:	fee00000 	.word	0xfee00000
 80076c0:	3fe62e42 	.word	0x3fe62e42
 80076c4:	35793c76 	.word	0x35793c76
 80076c8:	3dea39ef 	.word	0x3dea39ef
 80076cc:	55555555 	.word	0x55555555
 80076d0:	3fd55555 	.word	0x3fd55555
 80076d4:	3fe00000 	.word	0x3fe00000
 80076d8:	fff9eb86 	.word	0xfff9eb86
 80076dc:	df3e5244 	.word	0xdf3e5244
 80076e0:	3fc2f112 	.word	0x3fc2f112
 80076e4:	96cb03de 	.word	0x96cb03de
 80076e8:	3fc74664 	.word	0x3fc74664
 80076ec:	94229359 	.word	0x94229359
 80076f0:	3fd24924 	.word	0x3fd24924
 80076f4:	55555593 	.word	0x55555593
 80076f8:	3fe55555 	.word	0x3fe55555
 80076fc:	d078c69f 	.word	0xd078c69f
 8007700:	3fc39a09 	.word	0x3fc39a09
 8007704:	1d8e78af 	.word	0x1d8e78af
 8007708:	3fcc71c5 	.word	0x3fcc71c5
 800770c:	9997fa04 	.word	0x9997fa04
 8007710:	3fd99999 	.word	0x3fd99999
 8007714:	0006b851 	.word	0x0006b851

08007718 <_init>:
 8007718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771a:	46c0      	nop			@ (mov r8, r8)
 800771c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771e:	bc08      	pop	{r3}
 8007720:	469e      	mov	lr, r3
 8007722:	4770      	bx	lr

08007724 <_fini>:
 8007724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007726:	46c0      	nop			@ (mov r8, r8)
 8007728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800772a:	bc08      	pop	{r3}
 800772c:	469e      	mov	lr, r3
 800772e:	4770      	bx	lr
